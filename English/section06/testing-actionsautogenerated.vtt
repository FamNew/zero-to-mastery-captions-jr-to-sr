WEBVTT

00:01.120 --> 00:02.500
Welcome back.

00:02.500 --> 00:07.730
We've written quite a few tests now and well 13 tests.

00:07.780 --> 00:09.340
That's not bad for a small lot.

00:09.340 --> 00:13.750
There's definitely more that we can do but I want to cover the last part.

00:13.740 --> 00:22.680
Now that I think is important and that is testing our actions now you might be asking yourself what

00:22.680 --> 00:28.920
about Constance are we not testing the Constans file but you can see here that Constance are just simply

00:29.640 --> 00:38.100
well just assigning string constants to a variable and when you're testing you really want to decide

00:38.100 --> 00:41.860
for yourself what you need to test and why you don't test.

00:41.920 --> 00:46.590
You really get into a rabbit hole that is you just keep working on test keep working on tests.

00:46.680 --> 00:53.310
And next thing you know you haven't really done anything on the production side of things and tests

00:53.310 --> 00:59.940
are important but you really want to avoid the idea that oh I just need to have a hundred pass tests

01:00.030 --> 01:05.210
or 100 snapshots or I need my code coverage to be 100 percent.

01:05.640 --> 01:11.550
It's actually not a good idea to have 100 percent code coverage because it means that you're running

01:11.910 --> 01:19.680
tests that most likely don't need to be run and your time could have been spent wisely in other areas

01:19.680 --> 01:20.960
of your app.

01:20.970 --> 01:26.490
Remember there's infinit things that we can do to refactor or make our code prettier write more tests

01:26.970 --> 01:29.060
but we have limited time.

01:29.130 --> 01:34.310
So as a senior developer you have to decide for yourself where the tradeoffs are.

01:35.610 --> 01:36.200
All right.

01:36.250 --> 01:40.590
So Constans file we don't really need tests for that but actions.

01:40.630 --> 01:44.000
I think we do need some tests for our actions.

01:44.020 --> 01:47.400
Let's create an action or actions that test fall

01:51.700 --> 01:53.690
and within here.

01:53.800 --> 01:58.750
Let's once again import star as actions.

02:00.680 --> 02:02.410
From our actions file

02:06.560 --> 02:11.710
and with the first action that we have which is the set search field.

02:11.880 --> 02:12.920
That's a pretty simple one.

02:12.930 --> 02:21.170
We just want to make sure that this function returns this object so we can just use basic just functionality

02:21.170 --> 02:22.210
here.

02:22.340 --> 02:34.700
We can just have the it and I know I should be using that described to you to separate out the two actions

02:34.700 --> 02:35.180
that we have.

02:35.180 --> 02:38.380
But I think you get the idea you can do that on your own.

02:38.420 --> 02:50.480
I want to get you to board here but let's have it should create an action to search robots and this

02:50.480 --> 02:51.770
is going to have

02:54.970 --> 03:04.980
a simple very simple stack Sloth's have a constant text that's going to equal our search term to and

03:04.980 --> 03:17.760
the consulates have the expected action and the expected action is going to be our object of

03:24.090 --> 03:27.770
and let's import our constants here as well.

03:29.000 --> 03:31.650
So we can use them.

03:31.790 --> 03:36.650
It's going to have a type of change search field and a payload.

03:37.160 --> 03:39.050
And this is the expected action.

03:39.050 --> 03:45.820
So we expect that the action is going to include the text or we don't need the string characters here.

03:46.010 --> 03:47.270
There you go.

03:47.270 --> 03:52.030
So we can simply just say xpect actions

03:56.170 --> 03:57.300
search what was it.

03:57.310 --> 04:00.580
It was set search field.

04:00.640 --> 04:02.370
Copy that set search field

04:05.530 --> 04:12.230
to have the text and to have two equal.

04:12.280 --> 04:18.970
So we want to set the search field with that text and we need it to have the expected output of the

04:18.970 --> 04:21.570
action so expected action.

04:21.610 --> 04:24.630
Let's save.

04:24.760 --> 04:27.240
And what did I miss here.

04:27.250 --> 04:31.070
Let's see no comma here.

04:31.090 --> 04:33.030
Now over using the commas.

04:33.470 --> 04:35.760
This test section has been hard on me with the commas.

04:35.790 --> 04:36.360
You're right.

04:36.480 --> 04:37.080
So there you go.

04:37.080 --> 04:41.580
We have new tests now in the actions that is passing.

04:41.580 --> 04:43.130
Very very nice.

04:43.260 --> 04:45.510
And that simple we should know how to do that.

04:45.810 --> 04:46.950
But here's the challenging part.

04:46.950 --> 04:56.460
Now we have this action request robots that oh boy does a dispatch and a have an API call here and this

04:56.460 --> 04:59.090
is something that you might not have seen.

04:59.100 --> 05:04.810
I've created an API for that here that simply extracts out our fetch call.

05:05.040 --> 05:12.240
So we give it a u r l and does the response response so on so that it simplifies things for things for

05:12.240 --> 05:18.980
us so we don't have to constantly do fetch them response response Sardesai But you've seen this before

05:19.940 --> 05:21.080
the whereas it

05:24.010 --> 05:29.580
the actions just have they dispatch of request robot's pending.

05:29.710 --> 05:34.920
And then finally it's going to have either success or failed.

05:35.290 --> 05:45.510
So how do we do this because looking at this action we need dispatch because this is an asynchronous

05:45.720 --> 05:48.540
action Remember we need to thank for it.

05:48.550 --> 05:52.280
We need a thunk middleware.

05:52.420 --> 05:54.900
Let's start writing the tests and see what we can improve on.

05:54.900 --> 05:57.630
I'm going to close some of these tabs just to clean things out.

06:01.940 --> 06:03.010
There you go.

06:03.110 --> 06:10.160
And we're going to create a new block and in this block we want to say handle's

06:12.870 --> 06:20.310
changing changing or handles requesting robots API

06:23.600 --> 06:33.400
and we'll say here that well the very first thing we want to do we need to pass the dispatch to our

06:33.400 --> 06:42.480
function again I remembered the dispatch here well if we do it without this so let's just test it out.

06:42.600 --> 06:53.960
If I run the xpect actions dot request robot's action and I believe that's what's called the request

06:53.960 --> 07:04.070
robots and we leave it at this and let's just say that we expect the type of the action

07:09.670 --> 07:13.590
to have the say requests robot's pending and payload.

07:13.600 --> 07:21.990
If we look at our actions we're not sending any payloads so we can just go ahead and leave that as it

07:21.990 --> 07:22.950
is.

07:23.070 --> 07:27.310
If I save yet one failed

07:30.650 --> 07:36.390
request robots and there you go I get an error type error.

07:36.390 --> 07:47.120
Dispatch is not a function because remember with asynchronous code we need to pass this dispatch function

07:47.960 --> 07:57.070
to actually run this and we used to thunk middleware in order for us to do this if you remember indexed.

07:57.190 --> 08:04.060
Yes we have the thunk middleware and here how do we do this.

08:04.470 --> 08:07.360
Well there is a special package that we can use here.

08:07.530 --> 08:11.250
Let me exit out of this make this a little bit bigger.

08:12.240 --> 08:18.890
Let's clear we can install a package called the redux

08:22.310 --> 08:30.170
store and remember that this gives us access to a fake store that we can use for testing.

08:30.480 --> 08:37.060
So let's do and PM install dash dash safe.

08:37.370 --> 08:37.810
Def

08:43.940 --> 08:53.150
and now we have access to this fake store and the way we can use it is if I go up here and I say import

08:54.610 --> 09:00.780
configure store and once again this is all in their documentation for the package you want to use the

09:00.780 --> 09:06.340
redox maake store.

09:06.650 --> 09:16.210
And we also want to import the thunk middleware from the redox

09:19.030 --> 09:27.350
package which if you remember we already have in our index does jazz file.

09:27.450 --> 09:35.460
And the last thing we need to do me make sure it's lined up properly is to configure and create this

09:35.550 --> 09:41.200
store so we can simply just say Konst locked store.

09:42.700 --> 09:43.250
Equals

09:45.900 --> 09:55.500
configure locked store and reconfigure it by giving it some properties of which one of them is the middleware

09:55.500 --> 09:58.890
that we're going to use which is going to be the Thankx middleware.

09:58.890 --> 10:04.280
So sometimes you're most likely going to add this in a set up test file.

10:04.290 --> 10:11.100
For now I'm going to keep it in here because we only have one action file but you can usually export

10:11.100 --> 10:11.280
it.

10:11.280 --> 10:14.930
So the store is available to all your tests.

10:16.600 --> 10:20.970
So now we can create the store

10:24.790 --> 10:29.940
equal to the maake store and we were on it.

10:30.190 --> 10:42.460
And I can now say store Daut dispatch and store that dispatch takes actions dot requests robots.

10:42.580 --> 10:46.740
So we're going to dispatch this action.

10:46.870 --> 10:52.760
Remember that's this action over here.

10:52.880 --> 11:06.890
And once we dispatch that we can do something like Konst action equals to store Daut get actions.

11:07.010 --> 11:09.850
And now this action is going to contain what we need.

11:11.260 --> 11:12.900
Let me just console log it to show you.

11:12.910 --> 11:14.050
So console the log

11:18.340 --> 11:30.200
action that's going to contain the action let's save Iran NPM test.

11:30.230 --> 11:36.540
Scroll up and I have a bit of a console log error here.

11:36.590 --> 11:44.280
The configure Mock's store should be configure Haake store here.

11:44.290 --> 11:49.320
All right so we see that dispatch is not a function.

11:49.390 --> 11:57.470
Now why is that and this is something that you may have noticed while we're looking at the action.

11:57.710 --> 12:04.960
J.S. S-5 you remember that redux thank expects a function to be returned.

12:05.410 --> 12:13.750
And although our program works the way it is now you ideally want to let's go back to the top dog.

12:13.740 --> 12:14.280
Yes.

12:17.270 --> 12:21.590
You see here that and this is something we talked about before the redux section.

12:21.590 --> 12:28.520
You see here that we're just giving the dispatch to our request robots.

12:28.940 --> 12:38.110
But the way Thankx works is we want to make sure that we dispatch like this run the function inside

12:38.110 --> 12:47.140
of it so that we can run the dispatch dispatch function just like we have in our tests over here and

12:47.140 --> 12:50.900
the actions requests robots and we want to dispatch that.

12:51.010 --> 12:55.280
Otherwise we would have to do store Daut dispatch Midhir which is kind of ugly.

12:55.360 --> 13:01.870
Once again to fix that all we need to do is in the actions because if you remember Apogee Yes we have

13:01.870 --> 13:07.560
dispatched now and quest robots needs to run.

13:07.630 --> 13:16.090
So we're just going to have a function inside of a function and we want to make sure that this works

13:16.090 --> 13:16.660
as well.

13:16.660 --> 13:19.060
So I'm going to go back and do NPM start

13:26.170 --> 13:28.290
bright and everything still works.

13:28.730 --> 13:35.090
But now we're able to hopefully run the tests better so and PM test

13:38.210 --> 13:42.650
go back to our tests and we see that we have one fail.

13:44.130 --> 13:49.630
We have a type requests robot's pending that we expected but we got a function instead.

13:51.590 --> 13:59.830
And if we log actions we see that we have a action type of request robot's pending which we're getting.

13:59.970 --> 14:04.220
And that's because you can see that the action is returning an array.

14:04.320 --> 14:15.170
And we want the object of the action in the xpect because we no longer need to run this action.

14:15.170 --> 14:23.560
It's all being run up here and we can get the actions we can just say xpect action

14:26.480 --> 14:34.320
the first item in the array to be run and look at that everything works.

14:34.500 --> 14:37.650
And I know this can get a little bit confusing.

14:37.710 --> 14:42.120
And any time you're testing asynchronous things it can get pretty difficult.

14:42.300 --> 14:50.670
But all we did was really create a fake store that had the thunk middleware so it awaits for any functions

14:51.120 --> 14:58.830
that are returned from an action in which case we did with our actions requests robots because you see

14:58.830 --> 15:10.510
here that every turns an action that takes a dispatch and now this dispatch gets automatically sentence's

15:10.510 --> 15:14.890
requests robots it's going to receive the actions.

15:14.890 --> 15:17.070
And because if we go to our action.

15:17.230 --> 15:17.760
Yes.

15:17.770 --> 15:26.970
The very first thing we dispatch is the pending action we receive action zero.

15:27.060 --> 15:32.270
Called the expected action of robots pending.

15:32.280 --> 15:32.940
All right.

15:32.940 --> 15:39.570
So how do we test the request robot's success and request robots fail.

15:39.900 --> 15:45.060
And that's a little challenge that I'm going to leave for you to decide what to do based on what we've

15:45.060 --> 15:55.130
learned about asynchronous tests and also what we've learned about mocking our redux or and this is

15:55.130 --> 15:57.430
a tough challenging problem.

15:57.440 --> 16:04.550
So use whatever resources you have at hand Internet Google stack overflow anything you can to try and

16:04.550 --> 16:08.810
figure this out because that's what testing is all about.

16:08.810 --> 16:17.780
Testing is sometimes very simple when you have pure functional components or functions or it could be

16:17.780 --> 16:23.160
really difficult when you have all these dependencies that your tests run on.

16:23.720 --> 16:26.130
But every situation is different.

16:26.210 --> 16:33.290
And luckily for us with all these resources online you can figure it out as long as you understand how

16:33.290 --> 16:39.510
things work and what the errors mean which as a senior developer is the most important thing.

16:39.620 --> 16:44.080
They don't know every single syntax in a library and know all the documentation.

16:44.120 --> 16:50.480
They just understand how things work underneath the hood so that when the problem arises they can solve

16:50.480 --> 16:50.770
it.

16:52.050 --> 16:58.960
Finally I wanted to show you two things that may help you or I think are great.

16:58.980 --> 17:07.620
Whenever you are doing asynchronous tests the first one is a library called knock and knock simply is

17:07.640 --> 17:08.600
an empty package.

17:08.640 --> 17:16.190
You can install and you can see over here that we can pretend that we're doing a you are alcohol.

17:16.380 --> 17:25.080
We can do a get request to an endpoint and we can automatically reply with whatever we want.

17:25.200 --> 17:32.240
We can say that this reply had a status of 200 and it gave us user name and email.

17:32.610 --> 17:40.630
And this sets you up really nicely for asynchronous tests once you get deep into testing as well especially

17:40.630 --> 17:42.220
when you start working with API.

17:43.030 --> 17:48.970
Super Test is one of my favorite tools simply by importing super tests just like here.

17:49.060 --> 17:57.880
And we have the request he can request let's say an express app and you can do all these sayings like

17:58.120 --> 18:05.860
running get and expecting a Content-Type and a status and a ton of things.

18:05.890 --> 18:13.170
Now this is beyond the scope of this course and is something that you can take a look at has you get

18:13.210 --> 18:19.240
more and more into testing but just realize that there's tons of tools out there for you to use to write

18:19.240 --> 18:21.750
clean nice beautiful tests.

18:22.840 --> 18:24.420
I'll see you in the next one.

18:24.430 --> 18:24.960
Bye bye.
