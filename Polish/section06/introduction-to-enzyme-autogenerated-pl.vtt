WEBVTT

00:00:00.960 --> 00:00:08.430
Witamy ponownie, dowiedzieliśmy się trochę o testowaniu, ale co powiesz na testowanie naszego składnika re-act lub

00:00:09.120 --> 00:00:12.580
naszą ponowną pracę z naszymi przyjaciółmi robo.

00:00:12.800 --> 00:00:20.330
Jeśli przyjrzymy się naszemu folderowi, mam robotów PWI, ponieważ jest to teraz progresywna

00:00:20.330 --> 00:00:30.010
aplikacja internetowa i na podstawie tego, czego się dowiedzieliśmy, możemy przejść do foldera akcji, w folderze Constans,

00:00:30.650 --> 00:00:34.220
może jest tam folder plików reduktorów.

00:00:34.220 --> 00:00:41.370
A ponieważ są to tylko proste funkcje, możemy wiedzieć, jak je przetestować.

00:00:41.900 --> 00:00:50.810
Ale jedyną rzeczą, o której tak naprawdę nie mówiliśmy, jest to, jak testujemy te funkcje, które są jej składnikami Riaka.

00:00:50.810 --> 00:00:54.000
Mam na myśli, jak to właściwie robimy.

00:00:54.290 --> 00:01:00.690
Są sposoby, które możemy wymyślić, aby przetestować to za pomocą metod, których nauczyliśmy się do tej pory.

00:01:01.460 --> 00:01:08.780
Ale jest świetna biblioteka, która upraszcza nam rzeczy, a to jest enzym.

00:01:09.150 --> 00:01:12.750
A to biblioteka od B i B.

00:01:12.750 --> 00:01:14.020
To jest dość standardowe.

00:01:14.040 --> 00:01:22.220
Reac społeczność, jeśli chcesz przetestować swoje komponenty, to najprawdopodobniej użyjesz enzymu. Enzym znów jest narzędziem,

00:01:22.940 --> 00:01:32.240
które pozwala nam powiedzieć, że w naszych testach po prostu sprawimy, że ten komponent samochodowy i enzym

00:01:32.240 --> 00:01:35.900
da nam tonę metod do testowania.

00:01:36.050 --> 00:01:41.200
Hej dostał div, Brender, czy obraz dostał Brandura.

00:01:41.360 --> 00:01:46.100
Czy nazwa i adres e-mail zostały wyświetlone?

00:01:46.290 --> 00:01:52.950
W tym filmie zainstalujmy enzym i zobaczmy, co nam oferuje.

00:01:53.020 --> 00:01:58.810
Teraz mają świetną dokumentację i widać, że w oparciu o naszą wersję Riak mają

00:01:58.810 --> 00:02:01.200
różne rzeczy, które musimy zainstalować.

00:02:01.360 --> 00:02:07.200
A ponieważ używamy reakcji, która jest wyższa niż 16, jeśli przyjrzymy się opakowanemu

00:02:10.520 --> 00:02:14.500
Jaison, widzimy, że używamy ponownie szesnaście punktów dwa.

00:02:14.690 --> 00:02:19.820
Być może korzystasz z wyższej wersji, ale najprawdopodobniej będziesz korzystał z wersji wyższej

00:02:19.820 --> 00:02:26.520
niż ta, która zapewnia nam całkiem niezłe informacje na temat tego, co należy zrobić i co musimy

00:02:26.520 --> 00:02:27.200
zainstalować.

00:02:27.210 --> 00:02:33.220
Dlatego musimy zainstalować bibliotekę enzymów, jak również ten adapter adaptacyjny enzymu 16.

00:02:33.360 --> 00:02:41.880
Więc po prostu specjalny adapter, którego potrzebujemy do tej nowszej wersji reagowania

00:02:42.450 --> 00:02:55.490
skyn, kontynuuj i skopiuj to i widzisz, że robimy deskę rozdzielczą, aby zapisać Dev, ponieważ jest to zależność od śmierci.

00:02:55.500 --> 00:02:56.310
W porządku.

00:02:56.550 --> 00:03:03.310
Mamy zainstalowany enzym z adapterem enzymu.

00:03:03.330 --> 00:03:09.450
Teraz, jeśli przejrzysz ich dokumentację, musimy szybko skonfigurować dla nas, aby móc

00:03:09.450 --> 00:03:11.510
faktycznie używać enzymu.

00:03:11.540 --> 00:03:15.260
I znowu dlatego, że używamy nowej wersji reagowania.

00:03:15.260 --> 00:03:22.340
I chciałem mieć na uwadze, że nie jest to naprawdę trudne, gdy widzisz, że mam te specjalne przypadki

00:03:22.340 --> 00:03:25.540
bibliotek i musimy zrobić coś w rodzaju konfiguracji.

00:03:25.580 --> 00:03:30.890
W większości przypadków wszystkie te biblioteki mają dla ciebie dokumentację.

00:03:30.890 --> 00:03:35.600
Chodzi mi o to, że ich celem jest, aby ludzie używali ich jak

00:03:35.600 --> 00:03:38.550
najwięcej, więc ułatwią ci zrozumienie i ustawienie enzymu.

00:03:38.570 --> 00:03:47.410
To, co musimy zrobić, to stworzyć coś, co nazywa się testami konfiguracyjnymi, aby to ustawić.

00:03:47.520 --> 00:03:54.580
W naszym folderze źródłowym możemy po prostu powiedzieć, że nowy plik będzie współprowadził testy konfiguracji.

00:03:54.640 --> 00:04:07.040
JOT. S. i tutaj zaimportujemy coś, co nazywa się configure z enzymu.

00:04:07.140 --> 00:04:12.250
I znów wszystko to można znaleźć w ich dokumentacji, więc nie daj się zastraszyć.

00:04:12.270 --> 00:04:18.080
Nie miałem pojęcia, jak to zrobić, dopóki nie przeczytałem ich dokumentacji tylko na ich stronie wprowadzenia.

00:04:18.090 --> 00:04:20.100
Pokażę ci, jak to zrobić.

00:04:20.160 --> 00:04:27.400
I wreszcie chcemy też zaimportować coś, co nazywa się adapterem.

00:04:27.590 --> 00:04:28.680
A jeśli nie potrafię przeliterować.

00:04:28.700 --> 00:04:32.360
Tak właśnie piszesz adapter z biblioteki

00:04:34.600 --> 00:04:38.170
16 reaktywnej adaptera enzymu.

00:04:38.210 --> 00:04:42.210
Teraz też zainstalowaliśmy.

00:04:42.380 --> 00:04:53.250
A na koniec potrzebujemy tylko jednego wiersza tutaj, a to oznacza, że karta adaptera powinna być nowa, jeśli

00:04:53.760 --> 00:04:57.720
naprawdę chcesz wiedzieć, co to robi.

00:04:57.870 --> 00:05:05.460
Mogą przechodzić przez ich kodowanie na punkcie pobierania, ale po prostu patrząc na nazwę powiemy, że właśnie konfigurujemy

00:05:05.640 --> 00:05:07.340
nasz test prawy.

00:05:07.350 --> 00:05:10.290
To jest skonfigurowane, co możemy zrobić.

00:05:10.320 --> 00:05:14.820
W jaki sposób możemy teraz przetestować nasze składniki

00:05:17.660 --> 00:05:23.930
teraz za pomocą enzymu Enzyte daje nam głównie trzy rzeczy, które możemy wykorzystać.

00:05:24.050 --> 00:05:25.590
Pozwól, że pokażę ci, jakie one są.

00:05:25.610 --> 00:05:35.350
Jednym z nich jest coś, co nazywa się Shallow the other. Chcemy czegoś, co nazywa się Mount, a następnie trzeciego.

00:05:35.460 --> 00:05:43.440
Są to funkcje, których możemy użyć z biblioteki końcowej, z której właśnie korzystaliśmy, i dzięki temu mogliśmy

00:05:43.470 --> 00:05:50.310
zrobić coś bardzo interesującego z naszymi komponentami, które widzicie w idealnym świecie, aby wykonać

00:05:50.310 --> 00:05:51.010
test.

00:05:51.180 --> 00:05:55.950
Możemy oddać to wszystko i upewnić się, że na każdym kroku.

00:05:55.950 --> 00:05:57.120
Więc tego się spodziewaliśmy.

00:05:57.120 --> 00:06:04.290
Tak jak powiedziałem wcześniej, aby upewnić się, że zwracamy div może z tego typu nazwami klas, że

00:06:04.290 --> 00:06:09.570
zwracamy również inny DB w nim z nazwą i adresem e-mail.

00:06:09.590 --> 00:06:15.980
Tak więc, podobnie jak dom, musimy dowiedzieć się, czy renderuje dokładnie to, czego potrzebuje

00:06:15.980 --> 00:06:24.720
i po prostu patrząc na nazwy wygląda na to, że enzym zapewnia nam sposób renderowania MT i płytkiego tego komponentu.

00:06:24.740 --> 00:06:27.100
Co to wszystko znaczyło?

00:06:28.550 --> 00:06:30.730
I zamierzam dać ci głowę.

00:06:30.740 --> 00:06:37.150
Najprawdopodobniej 90 procent czasu, który chcesz wykorzystać do płytkiego i płytkiego jest tym, czego będziemy używać w

00:06:37.250 --> 00:06:38.190
tym kursie.

00:06:38.240 --> 00:06:43.400
Jest kilka przypadków, w których możesz chcieć użyć funkcji mount i render, ale pamiętaj, że

00:06:43.700 --> 00:06:48.720
z enzymami właśnie używamy tego, co sprawia, że jest bardzo przyjemna i prosta.

00:06:48.860 --> 00:06:56.330
Pierwszą rzeczą, z której korzystamy najczęściej jest to, co płytkie dobrze działa jako pierwsze, jest stworzenie pliku

00:06:56.330 --> 00:07:01.490
testowego tutaj, ponieważ nie będziemy importować enzymu w naszym rzeczywistym komponencie.

00:07:01.490 --> 00:07:08.420
Tak więc w pliku składników po prostu powiem, że nowy test ws. Psa na kartę pliku.

00:07:08.570 --> 00:07:12.690
A teraz zaimportujmy enzym tutaj.

00:07:15.660 --> 00:07:18.930
Import Zoli do naszego rzeczywistego komponentu.

00:07:19.090 --> 00:07:22.330
Znowu będziemy importować karty

00:07:25.600 --> 00:07:26.530
z

00:07:29.450 --> 00:07:33.650
trudnych i nieuporządkowanych sposobów. A teraz

00:07:36.490 --> 00:07:49.590
dla zabawy zobaczmy, co się stanie, jeśli zrobię płytką kartę lub składnik karty i po prostu poczytajmy to.

00:07:49.740 --> 00:07:52.010
Jak właściwie uruchomić ten test.

00:07:52.320 --> 00:08:00.210
Jeśli pójdziemy do naszego zapakowanego Jaisona, mamy zainstalowany żart, ale pamiętajcie, ponieważ używaliśmy go, aby ponownie

00:08:00.210 --> 00:08:07.620
zacząć działać, jest on wbudowany w skrypty Riak i ma wszystko przygotowane dla nas.

00:08:07.920 --> 00:08:10.530
Więc może po prostu uruchomić test NPM

00:08:16.140 --> 00:08:20.200
i dostajemy tu trochę wąskiego, mówiąc, że ponowne zdefiniowanie nie jest zdefiniowane.

00:08:21.020 --> 00:08:29.390
To dlatego, że pamiętajmy, że używamy tutaj GSX, więc potrzebujemy sposobu na seks Rejeb, a jeśli

00:08:29.390 --> 00:08:35.510
pamiętasz z jakimś składnikiem, zawsze importujemy powtórkę z pakietu re-act.

00:08:38.160 --> 00:08:38.450
W porządku.

00:08:38.490 --> 00:08:44.680
I mówi, że nasz zestaw testów musi zawierać przynajmniej jeden test, ponieważ tak naprawdę nie testujemy niczego.

00:08:44.820 --> 00:08:51.500
Ale na dole widzimy, że mamy płytkie opakowanie o długości 1.

00:08:51.570 --> 00:08:57.170
Co robi płytka po prostu, uruchamiając tę składnię.

00:08:57.180 --> 00:09:06.370
Mówimy, że hej płytkie renderowanie tego składnika karty i płytkiego renderowania jest przydatne, ponieważ

00:09:06.370 --> 00:09:09.100
renderuje komponent karty.

00:09:09.100 --> 00:09:15.790
Jeśli komponent karty z jakiegoś powodu, powiedzmy, ma komponent wewnątrz tego, który jest komponentem

00:09:17.600 --> 00:09:21.210
Halo, Cóż, to również tego nie zrobi.

00:09:21.320 --> 00:09:29.330
To tylko płytko wyrenderuje właśnie ten komponent i przydaje się, ponieważ ogranicza się do testowania jednego komponentu

00:09:29.330 --> 00:09:37.220
za jednym razem, ponieważ być może pamiętasz, że test jednostkowy jest czymś, co po prostu testuje

00:09:37.520 --> 00:09:41.430
jednostkę po jednym małym kawałku na raz.

00:09:41.780 --> 00:09:50.060
Zapewnia to, że twoje testy nie pośrednio potwierdzają zachowanie elementu chawl takiego jak komponent

00:09:50.240 --> 00:09:51.280
halo.

00:09:52.230 --> 00:09:56.270
Dlatego jestem wielkim fanem płytkiego renderowania enzymu.

00:09:56.310 --> 00:10:02.740
Idealnie chcesz przetestować jedną rzecz na raz, bez wpływu na wszystkie składniki podrzędne.

00:10:04.420 --> 00:10:07.130
A te kopy utrzymują twoje testy w czystości i czystości.

00:10:07.890 --> 00:10:16.810
Teraz fajne jest to, że dostajemy mnóstwo metod, które możemy teraz wykorzystać na przykład w tym komponencie

00:10:18.300 --> 00:10:19.090
koszyka.

00:10:19.170 --> 00:10:27.810
Teraz, ponieważ to robimy, możemy użyć naszego dobrego starego przyjaciela, który spodziewa się powiedzieć, że

00:10:30.500 --> 00:10:40.490
wypatrujemy płytko wyrenderowany komponent samochodowy, a następnie możemy powiedzieć, że jest równy jednemu, a my po prostu

00:10:40.490 --> 00:10:46.170
nadamy mu właściwość długości, którą chcemy zawinąć. nasze IT.

00:10:46.210 --> 00:10:50.560
BLOCK oczekuje

00:10:53.870 --> 00:11:01.430
na renderowanie elementu karty.

00:11:01.670 --> 00:11:08.310
A teraz możemy po prostu włożyć to do środka, oszczędzajmy i gotowe.

00:11:08.350 --> 00:11:15.970
Mamy jeden test, który przechodzi, a to pokazuje, że w porządku komponent samochodu, kiedy

00:11:15.970 --> 00:11:18.870
go wyrenderujemy, faktycznie wyrówna jeden.

00:11:18.880 --> 00:11:22.110
Mam na myśli, że to głupi test, ale to miłe.

00:11:22.150 --> 00:11:30.770
Udało nam się sprawić, że miły i prosty komponent samochodowy pozwoli mi usunąć stąd powitanie.

00:11:33.020 --> 00:11:36.760
A co z tymi dwoma pozostałymi dwiema innymi rzeczami?

00:11:36.800 --> 00:11:40.730
Nie zamierzamy wdawać się w zbyt wiele, ponieważ mają to konkretne przypadki użycia.

00:11:40.730 --> 00:11:46.520
Tak jak mówiłem przez większość czasu, kiedy chcesz używać płytkiego i utrzymywać twoje testy

00:11:47.210 --> 00:11:56.780
ładnymi i prostymi i zawartymi, ale robi to, co nazywane jest pełnym renderowaniem DOM, jest idealne do przypadków użycia, w których masz komponenty, które

00:11:56.780 --> 00:11:59.710
mogą wchodzić w interakcje z DOM API.

00:11:59.900 --> 00:12:06.480
Więc z jakiegoś powodu może składnik karty używa selektora zapytania Daut.

00:12:06.620 --> 00:12:11.380
Lub dowolny inny interfejs API DOM, który zwykle widzimy.

00:12:11.900 --> 00:12:18.150
A może komponent samochodu ma jakąś metodę cyklu życia? Odpowiedź na metodę cyklu życia.

00:12:18.440 --> 00:12:21.430
Chcesz przetestować komponent Sacha.

00:12:21.690 --> 00:12:31.270
Teraz jednym z mountem jest to, że wymaga pełnego API DOM, aby faktycznie działać i być dostępnym dla nas, aby

00:12:31.270 --> 00:12:33.480
zamontowanie mogło się wydarzyć.

00:12:34.710 --> 00:12:42.140
Oznacza to, że musi działać w środowisku, które przynajmniej wygląda jak środowisko przeglądarki.

00:12:42.410 --> 00:12:49.500
A jeśli pamiętasz z poprzedniej rozmowy, nie zawsze będziesz chciał przeprowadzić testy w przeglądarce, ponieważ

00:12:49.530 --> 00:12:51.920
zajmuje to trochę czasu.

00:12:52.140 --> 00:12:58.530
Jeśli więc nie chcesz uruchamiać testów w przeglądarce, możesz użyć czegoś takiego jak przeglądarka bez nagłówka lub

00:12:58.890 --> 00:13:00.440
zrobione polecenie Jasc.

00:13:00.570 --> 00:13:04.860
I zaleca się, aby z jazzowym głupcem używano go z Monkiem.

00:13:05.070 --> 00:13:05.930
Miej to w pamięci.

00:13:06.030 --> 00:13:14.880
MT lubię płytkie renderowanie, renderowanie w pełni i faktycznie montuje komponent na zrzucie, tak jak to robisz, co oznacza,

00:13:15.000 --> 00:13:21.220
że testy mogą wpływać na siebie nawzajem, jeśli wszyscy używają tego samego zrzutu.

00:13:21.600 --> 00:13:28.890
Ale tak jak powiedziałem, bardzo rzadko zdarza się, że chcesz używać MT, ponieważ może się skomplikować, a potem

00:13:28.890 --> 00:13:33.960
chcesz, aby twoje testy były tak czyste i jak to tylko możliwe.

00:13:33.960 --> 00:13:42.270
Ostatnim z nich jest funkcja renderowania i renderowania, ponieważ nazwa sugeruje, że jest używana do

00:13:42.420 --> 00:13:52.440
renderowania komponentów Riak, ale w przeciwieństwie do prawdziwego Dom jest renderowana statycznie jako shemale, więc render zwraca coś bardzo

00:13:52.440 --> 00:13:56.980
podobnego do tego, co płytkie i do Montross.

00:13:57.030 --> 00:14:03.100
Jednak różnice, które renderują, wykorzystują bibliotekę o nazwie Cheerio pod maską.

00:14:03.300 --> 00:14:06.060
Pomyśl o tym jako o płytkim wierzchu.

00:14:06.120 --> 00:14:13.770
W rzeczywistości nie potrzebuje pełnego API DOM, ale renderuje wszystkie swoje jądro lub dowolne dziecko z karty

00:14:13.800 --> 00:14:16.710
pod nim, jeśli trzeba je przetestować.

00:14:16.710 --> 00:14:17.120
W porządku.

00:14:17.160 --> 00:14:23.610
Mamy więc skonfigurowane enzymy i możemy przetestować niektóre z naszych komponentów, ale jest jeszcze

00:14:23.610 --> 00:14:26.060
trochę pracy, którą musimy wykonać.

00:14:26.100 --> 00:14:28.000
Zobaczę w następnym.