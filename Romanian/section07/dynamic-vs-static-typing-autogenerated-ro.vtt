WEBVTT

00:00:02.020 --> 00:00:07.560
Bine ați venit înapoi, există o grămadă de limbi de programare acolo.

00:00:07.590 --> 00:00:08.970
Am auzit de ei corect.

00:00:09.180 --> 00:00:10.080
Piton.

00:00:10.140 --> 00:00:13.190
Ruby Java C ++.

00:00:13.350 --> 00:00:21.500
Există o tonă și, deși javascript este limbajul dominant pe web și cu introducerea de lucruri

00:00:21.500 --> 00:00:28.730
ca nodul Da, putem folosi acum javascript în afara rețelei, probabil, și în serverul

00:00:28.730 --> 00:00:29.840
backend.

00:00:29.840 --> 00:00:37.510
Lumea mai are multe limbi diferite care sunt potrivite pentru propriul domeniu și abilitate.

00:00:37.660 --> 00:00:44.380
Și dacă ar fi trebuit să clasificăm toate aceste limbi de programare cumva, vom face probabil așa

00:00:44.380 --> 00:00:44.970
ceva.

00:00:48.470 --> 00:00:54.500
În acest videoclip vom vorbi despre spectrul principal aici dinamic și static al modului în care limbile de

00:00:54.500 --> 00:00:56.080
programare pot fi diferite.

00:00:57.160 --> 00:01:06.600
În mod dinamic tastat și static tastat vedem aici că javascript este un tip dinamic la limba și la

00:01:07.610 --> 00:01:15.830
fel sunt alte limbi de programare populare, cum ar fi PH BE Ruby Python de închidere.

00:01:16.000 --> 00:01:26.480
Pe de altă parte, limbile precum Java Javascript scalar C ++ sunt limbi statice sau statice.

00:01:26.580 --> 00:01:28.550
Dar ce înseamnă asta.

00:01:30.650 --> 00:01:33.140
Ei bine, lasă-mă să-ți demonstrez asta.

00:01:35.060 --> 00:01:40.250
Dacă deschid consola aici și Oh, asta e un fundal frumos astăzi.

00:01:40.280 --> 00:01:46.430
Oricum, înapoi la consolă, astfel încât să putem scrie niște javascript în javascript, deoarece este tastat dinamic.

00:01:46.430 --> 00:01:48.140
Putem face ceva de genul asta.

00:01:48.140 --> 00:01:54.650
Variabila A este egală cu 100.

00:01:54.710 --> 00:01:55.300
In regula.

00:01:55.410 --> 00:01:57.270
E destul de așteptat.

00:01:57.270 --> 00:02:00.080
Știm cum funcționează javascriptul și că este bine.

00:02:00.960 --> 00:02:04.600
Dar, în unele limbi, acest lucru nu ar funcționa.

00:02:04.680 --> 00:02:14.340
Vedeți că un limbaj dinamic tipizat ne permite să nu trebuie să spunem ce tip de variabilă va fi

00:02:14.440 --> 00:02:16.030
această variabilă.

00:02:16.230 --> 00:02:17.160
Ce inseamna asta.

00:02:17.340 --> 00:02:19.490
Ei bine, într-un limbaj static.

00:02:19.530 --> 00:02:24.350
Să presupunem că scriem C ++ care este un limbaj static.

00:02:24.560 --> 00:02:26.760
Va trebui să facem ceva de genul asta.

00:02:26.990 --> 00:02:33.980
Și nu voi sublinia faptul că, în timp ce acest browser nu va recunoaște C ++, dar dacă aveam de gând să fac același

00:02:33.980 --> 00:02:36.710
lucru, aș fi trebuit să spun int a.

00:02:36.770 --> 00:02:42.670
Și înseamnă un număr întreg și apoi o linie nouă.

00:02:43.010 --> 00:02:54.420
Voi spune că mă lași să adaug o punct și virgulă aici și pe linia nouă aș spune că A este egală cu 100 pe care

00:02:54.420 --> 00:03:01.490
o vedeți cu o limbă statică, trebuie să spun ce tip de variabilă va fi.

00:03:01.560 --> 00:03:03.930
În acest caz este un număr întreg.

00:03:03.930 --> 00:03:10.770
Dacă ar fi fost un șir ca un halo, aș fi nevoit să spun șir și așa mai departe și așa mai departe.

00:03:10.770 --> 00:03:18.260
Deci, cu o limbă statică, trebuie să declare explicit variabilele înainte de a le folosi.

00:03:19.240 --> 00:03:23.850
Limbajele tipărite dinamic nu sunt legate de această constrângere.

00:03:24.640 --> 00:03:27.160
Nu sunt legate de un anumit tip.

00:03:27.160 --> 00:03:32.690
Javascript-ul este suficient de inteligent și va spune oh da da da variabil.

00:03:32.710 --> 00:03:33.500
Este 100.

00:03:33.520 --> 00:03:33.830
Oh da.

00:03:33.880 --> 00:03:34.880
E un număr întreg.

00:03:34.990 --> 00:03:36.560
Este un tip întreg.

00:03:36.820 --> 00:03:38.230
Sunt atât de inteligent.

00:03:38.230 --> 00:03:39.640
Asta e ceea ce este javascriptul.

00:03:40.880 --> 00:03:46.390
În limbajul tastat dinamic, verificarea tipului se face în timpul rulării.

00:03:46.460 --> 00:03:47.380
Ce inseamna asta.

00:03:47.600 --> 00:03:55.490
Ei bine, dacă vă amintiți în discuția noastră despre performanța browserului, javascript se execută pe browser în timpul

00:03:56.750 --> 00:04:05.110
rulării sau în jet sau chiar în timp ce compilarea în timp ce utilizatorul navighează de fapt prin site-ul

00:04:05.110 --> 00:04:05.790
Web.

00:04:05.820 --> 00:04:09.720
Javascript rulează și este compilat în fundal.

00:04:09.870 --> 00:04:15.660
Dacă vă aduceți aminte de fila noastră de performanță, am avut metrica de performanță a scripturilor,

00:04:15.660 --> 00:04:21.950
care a fost acea grafică de plăcintă galbenă sau piesa plăcii galbene care a inclus și compilarea javascript-ului.

00:04:22.290 --> 00:04:29.520
Și din acest motiv, putem utiliza limbi dinamice care pot să atribuie orice variabilă și nu

00:04:29.760 --> 00:04:31.550
veți fi prinși.

00:04:31.590 --> 00:04:38.880
S-ar putea să apară erori în timpul rulării în timp ce utilizatorii navighează pe un site web, dar din acest motiv nu

00:04:38.880 --> 00:04:42.680
putem să ne facem griji în legătură cu acest lucru.

00:04:42.800 --> 00:04:44.300
Se pare destul de bine.

00:04:44.300 --> 00:04:46.550
De ce am vrea vreodată să facem asta?

00:04:46.550 --> 00:04:53.510
Este mult mai curat și mai ușor pentru noi să scriem ce vom vedea de ce ar putea să nu fie

00:04:53.510 --> 00:04:56.870
întotdeauna ideal și de ce ar putea provoca o problemă.

00:04:58.170 --> 00:05:04.260
Dar înainte de a ajunge la acest lucru sa întâmplat un război sfânt în limbajele de programare, oamenii

00:05:04.530 --> 00:05:11.520
care cred că limbajele tipărite în mod static sunt calea de mers și cred că limbajele tipărite dinamic sunt oribile și

00:05:11.520 --> 00:05:12.150
invers.

00:05:12.150 --> 00:05:18.090
Oamenii de acolo spun că limbile statice tipărite sunt o pierdere de timp și limbajele de programare dinamice sunt

00:05:18.240 --> 00:05:19.530
calea de parcurs.

00:05:19.770 --> 00:05:25.410
Din acest motiv m-am trezit ușor pe acest subiect, deoarece oamenii sunt atât de conștienți că au opinii atât

00:05:25.410 --> 00:05:27.120
de puternice despre acest lucru.

00:05:27.210 --> 00:05:33.150
Dar, din nou, un dezvoltator senior să nu ne concentrăm asupra a ceea ce este bine ce este greșit Klyce se concentreze

00:05:33.150 --> 00:05:38.530
pe argumente pro și contra atunci când unul este bun peste celălalt, astfel încât să putem lua decizii inteligente.

00:05:38.550 --> 00:05:41.850
Să vorbim despre profesioniști.

00:05:41.960 --> 00:05:51.740
Cel mai important lucru cu un limbaj static tipizat este faptul că obținem documentație.

00:05:52.130 --> 00:05:56.340
Poate că o modalitate mai bună de a demonstra acest lucru este de a scrie o funcție.

00:05:56.480 --> 00:06:05.200
Dacă spunem că am de gând să o șterg și să spun că funcționează ceva, iar în unele aici o să folosesc o

00:06:05.200 --> 00:06:08.540
sintaxă care ar putea să nu-ți fie cunoscută.

00:06:08.560 --> 00:06:10.270
Dar pentru moment este bine.

00:06:10.270 --> 00:06:23.690
Vom presupune pur și simplu că acest lucru funcționează vom spune că a este un număr și B este de asemenea un număr și aici putem

00:06:23.900 --> 00:06:27.070
să întoarcem doar un plus

00:06:29.790 --> 00:06:33.030
b și să închidem funcția noastră.

00:06:33.030 --> 00:06:37.040
Nu este javascript dacă am pornit războiul pentru a obține o eroare.

00:06:37.380 --> 00:06:42.910
Dar acest lucru demonstrează ce ar putea face o limbă statică.

00:06:42.990 --> 00:06:50.550
Vedeți dacă un nou dezvoltator a venit și a pornit funcția SUM cu altceva

00:06:50.550 --> 00:06:59.110
decât un număr să spunem că au executat funcția sumă cu un salut și poate ceva.

00:06:59.130 --> 00:07:08.950
Nu e bine înainte de a ajunge vreodată în codul browserului sau în producție.

00:07:09.010 --> 00:07:12.050
Pentru că va spune că faci ceva greșit aici.

00:07:12.100 --> 00:07:18.160
Aștept un număr dintr-un număr aici și nu-mi dați niciunul din ele.

00:07:18.280 --> 00:07:24.170
În acest sens, limbile statice tipărite se auto-documentează.

00:07:24.190 --> 00:07:27.390
Asta e că pot să vin la un proiect și să văd imediat asta.

00:07:27.580 --> 00:07:33.460
Chiar dacă acest lucru a fost numit rău și aceasta a fost o funcție complicată pot

00:07:33.520 --> 00:07:41.750
vedea ce fel de parametri se așteaptă și evit să fac această eroare al doilea pro de un limbaj static scris este faptul că,

00:07:41.750 --> 00:07:49.890
din cauza acestei caracteristici cu ID-urile noastre sau editorii de text cum ar fi sublim sau codul vizual sau orice editor de text preferat.

00:07:50.360 --> 00:07:53.900
Acest lucru ajută la completarea automată în editorii dvs.

00:07:54.050 --> 00:08:00.470
Puteți descărca plug-ins care spun hei chiar înainte de a rula acest lucru ar trebui să fie un număr care este, de

00:08:00.470 --> 00:08:02.690
asemenea, foarte frumos atunci când vă dezvoltați.

00:08:02.690 --> 00:08:08.840
În cele din urmă, cel mai important lucru și da există mult mai mulți profesioniști, dar ne concentrăm doar pe

00:08:08.840 --> 00:08:09.860
cei principali aici.

00:08:09.920 --> 00:08:15.140
Principalul lucru al limbajelor tipărite static este că veți obține mai puține bug-uri.

00:08:15.140 --> 00:08:19.750
Veți obține mai puține bug-uri în producție, deoarece acest lucru nu va ajunge niciodată în producție.

00:08:19.760 --> 00:08:28.670
Dacă acest lucru nu reușește la ceea ce numim timpul de compilare înainte de a-l trimite chiar pe un browser, atunci am cache-ul că, devreme, le-am

00:08:28.680 --> 00:08:34.100
aruncat aceste bug-uri devreme, astfel încât în ​​producție de cele mai multe ori vor fi mai

00:08:34.100 --> 00:08:36.830
puține bug-uri cu un limbaj static scris.

00:08:36.890 --> 00:08:40.080
Și nu vă faceți griji că vom vorbi despre compilație și cum funcționează mai târziu.

00:08:41.370 --> 00:08:42.950
Acum sună destul de grozav.

00:08:42.960 --> 00:08:44.040
Bus bug-uri.

00:08:44.040 --> 00:08:49.120
Documentație ușoară finalizată și editoare sănătoase.

00:08:49.140 --> 00:08:52.150
Deci, de ce nu facem doar o limbă statică.

00:08:53.150 --> 00:08:55.420
Ei bine, sunt unele contra.

00:08:55.490 --> 00:09:01.490
Numărul unu este că, evident, tocmai am făcut din codul nostru ceva mai greu de citit.

00:09:01.580 --> 00:09:02.420
E mai complexă.

00:09:02.420 --> 00:09:06.360
Acum adăugăm un alt strat programelor noastre.

00:09:06.620 --> 00:09:12.590
Iar acest lucru durează ceva timp pentru a afla dacă avem un proiect și avem oameni noi care se alătură companiei noastre.

00:09:12.620 --> 00:09:18.200
Va trebui să îi învățăm cum să scrie mai multe coduri și cum să scrie acest lucru în mod corespunzător este

00:09:18.200 --> 00:09:19.730
un strat suplimentar de complexitate.

00:09:20.820 --> 00:09:24.110
Și asta este întotdeauna o preocupare cu programarea corectă.

00:09:24.210 --> 00:09:28.790
Adăugarea unui strat suplimentar de complexitate este că într-adevăr va beneficia de proiect.

00:09:29.720 --> 00:09:37.160
Celelalte argumente sau argumente împotriva limbajelor tipărite static sunt bine de ce nu puteți scrie mai bine teste

00:09:37.250 --> 00:09:38.440
mai bune.

00:09:38.450 --> 00:09:46.430
Un subiect pe care îl acoperim într-o altă secțiune, mulți oameni sunt foarte entuziasmați de textarea statică și uită

00:09:46.520 --> 00:09:50.480
să scrie teste bune pentru testele de unitate.

00:09:51.120 --> 00:09:55.550
Înainte de a scrie în mod static, mai ales într-o limbă precum javascript.

00:09:55.560 --> 00:10:01.320
Asigurați-vă că aveți teste bune de unitate și că nu uitați să scrieți testele unităților și să vă asumați da, doar

00:10:01.320 --> 00:10:06.240
pentru că am tastat static. Nu voi primi nicio eroare care pur și simplu nu este adevărată.

00:10:07.210 --> 00:10:14.230
În cele din urmă, cu un limbaj static, veți avea un proces de dezvoltare mai lent, deoarece acum aveți un pas

00:10:14.260 --> 00:10:20.650
în plus în care în timp ce codificați de-a lungul există și un alt control pentru a vedea că

00:10:20.650 --> 00:10:22.820
nu faceți nicio eroare de tip.

00:10:23.820 --> 00:10:30.480
Și acest lucru încetinește, de fapt, procesul de dezvoltare și cât de repede puteți crea codul și rulați codul

00:10:30.510 --> 00:10:32.290
și îl expediați la producție.

00:10:33.700 --> 00:10:38.980
Vedeți cu limbi dinamic tipizate și de aceea javascript a fost atât de popular fiind

00:10:38.980 --> 00:10:46.660
faptul că vă petreceți mai puțin timp sincronizare de eroare și erori semantice ca aceasta și în schimb cea mai mare parte a

00:10:46.660 --> 00:10:52.980
timpului de depanare este cheltuit exclusiv pe logică și erori care ca dezvoltator sunt mult mai interesante .

00:10:55.330 --> 00:10:57.650
În regulă, să ne întoarcem la asta.

00:10:57.700 --> 00:11:05.620
Există câteva alte argumente pro și contra și toată lumea are mereu opinii atunci când vine vorba de aceste două subiecte, dar

00:11:05.920 --> 00:11:07.750
punctul principal este acesta.

00:11:07.750 --> 00:11:11.980
Tipurile statice prevină de obicei erorile și contribuie la menținerea erorilor.

00:11:12.040 --> 00:11:20.710
Tastarea dinamică vă permite să fiți mai flexibili și să scrieți mai repede un program tipcript ne permite să

00:11:21.010 --> 00:11:26.000
facem javascript să se comporte ca un limbaj static tipizat.

00:11:26.020 --> 00:11:36.940
Acesta adaugă tipuri de javascript, astfel încât face javascript mai sigur, dar înainte de a merge mai departe și să vă arate o demonstrație

00:11:37.030 --> 00:11:38.890
a funcționării tipcript.

00:11:39.070 --> 00:11:47.030
Să vorbim despre celelalte două părți ale acestui grafic, care adesea se confundă cu tastarea dinamică și statică.

00:11:47.060 --> 00:11:48.570
Voi vedea în următorul.

00:11:48.710 --> 00:11:48.960
De.