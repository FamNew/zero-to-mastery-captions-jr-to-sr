WEBVTT

00:00:02.490 --> 00:00:03.430
Bine ai revenit.

00:00:03.430 --> 00:00:08.720
Am vrut să adaug o notă rapidă despre divizarea codului când vine vorba de divizarea codului.

00:00:08.740 --> 00:00:11.270
Există câteva opțiuni.

00:00:11.350 --> 00:00:18.360
Există ceva numit Chungking pe bază de roți sau împărțirea fișierelor javascript pe baza rutelor.

00:00:18.370 --> 00:00:24.500
Ca și cum am făcut-o și exemplul și aceasta este o modalitate foarte bună de a merge.

00:00:24.520 --> 00:00:27.380
De cele mai multe ori, de aceea vrei să faci.

00:00:27.600 --> 00:00:36.020
Dar există și un lucru numit Chongqing bazat pe componente, în cazul în care sunteți capabil să codificați împărțit nu numai la

00:00:36.040 --> 00:00:39.560
nivelul drumului, ci la un nivel de component.

00:00:39.560 --> 00:00:42.070
Acum când vrei să faci asta.

00:00:42.070 --> 00:00:48.910
De exemplu, dacă pagina dvs. de pornire devine într-adevăr într-adevăr într-adevăr foarte mare, poate că nu doriți să încărcați în

00:00:48.910 --> 00:00:50.300
mod necesar toate javascript-ul.

00:00:50.380 --> 00:00:56.890
Poate că aveți o mică bara laterală aici în care faceți clic și apare o bară de meniu.

00:00:56.890 --> 00:00:59.320
Poate că nu vrem ca asta să fie încărcată.

00:00:59.680 --> 00:01:07.980
În acest caz aveți posibilitatea să divizați codul de nivel de componentă în cazul în care eliminați javascript pentru această bara de meniu laterală și activați-l

00:01:08.070 --> 00:01:15.510
numai atunci când un utilizator face clic pe buton și pentru că javascript pentru că ar trebui să fie mic ar trebui să

00:01:15.510 --> 00:01:22.580
încărcați destul de repede, astfel încât aplicațiile mai mare și mai mare pe care doriți să vă gândiți la despărțirea codului

00:01:22.640 --> 00:01:28.100
de bază Rob și, de asemenea, la divizarea codului bazat pe componente, indiferent de necesitățile dvs.

00:01:28.100 --> 00:01:30.520
Fiecare proiect este diferit dacă vrei să te gândești la asta.

00:01:31.300 --> 00:01:39.320
În cele din urmă re-act are o documentație foarte bună despre împărțirea codului și cum se face.

00:01:39.550 --> 00:01:46.330
Și chiar vă arată o modalitate excelentă de a face împărțirea codului cu un router re-act care din nou îl puteți

00:01:46.330 --> 00:01:51.670
folosi pentru divizarea codului și ceva numit re-act loadable, care este o bibliotecă excelentă pentru tine.

00:01:51.670 --> 00:01:52.420
Divizarea codului.

00:01:52.680 --> 00:01:59.870
Îmi place linia de tag-uri de aici, dar Riak loadable face foarte ușor să faci divizarea codului, astfel încât nici măcar

00:01:59.870 --> 00:02:03.690
nu trebuie să implementezi acea componentă asincronă ca și noi.

00:02:05.060 --> 00:02:11.670
Vă recomandăm să le verificați, precum și să re-acționați ruterul și documentația pe site-ul Web

00:02:11.670 --> 00:02:12.560
re-act.

00:02:12.590 --> 00:02:14.050
Există multe modalități de a face acest lucru.

00:02:14.150 --> 00:02:20.410
În final, ideea este aceeași cum putem trimite cel mai mic număr de javascript utilizatorilor.

00:02:20.420 --> 00:02:23.740
Bine, daca vrei sa mergi cu siguranta, verifica asta.

00:02:23.740 --> 00:02:28.150
În caz contrar, este trecut la următorul videoclip Alcyone.