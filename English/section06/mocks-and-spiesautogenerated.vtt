WEBVTT

00:00.780 --> 00:02.310
Welcome back.

00:02.310 --> 00:09.120
Now one thing you may have noticed if you're really paying attention is that these tests are fine for

00:09.120 --> 00:17.490
now because the Swaby API is fairly fast and we're getting the data back fairly soon.

00:17.490 --> 00:20.470
But imagine if we had many of these tests.

00:20.490 --> 00:28.940
Imagine if we had a prize that return lots of data that takes a long time to actually get to you can

00:28.940 --> 00:33.590
imagine this growing bigger and bigger until it takes forever for our tests to run.

00:33.590 --> 00:40.580
I mean it only took 2.5 five seven seconds but with more and more tests worth more and more asynchronous

00:40.580 --> 00:46.950
tests that we wait to actually get a data response it's going to take longer and longer.

00:47.030 --> 00:50.740
And if we're developers and working and saving our We're costly.

00:51.020 --> 00:57.650
If we have to wait a couple minutes for our tests every time that's really going to slow us down how

00:57.650 --> 01:06.200
can we improve this so that we're not always doing this fiscal Well we can use something called Mock's

01:06.590 --> 01:17.820
with a mark we can fake a function and just pretend to have it running so that we can use this money

01:17.880 --> 01:21.260
to let us spy on the behavior of a function.

01:22.160 --> 01:28.820
That is called indirectly by some other code rather than just testing the output and waiting for the

01:28.820 --> 01:31.340
asynchronous code to complete.

01:31.480 --> 01:35.550
And you can create Mock's and just really really easily.

01:35.640 --> 01:37.420
So let's do that.

01:37.620 --> 01:41.060
Let's create a mark here to speed up our asynchronous tests.

01:42.440 --> 01:45.860
The first thing we're going to do let's create more space here.

01:45.980 --> 01:52.610
I'm going to again create a new test we'll just call this get people

01:55.420 --> 02:01.990
returns count and results and end here.

02:02.880 --> 02:04.070
We'll do the same thing.

02:04.260 --> 02:07.080
Second parameter is a function.

02:07.110 --> 02:09.520
Now we're going to create something interesting.

02:09.720 --> 02:18.560
We're going to mock this fetch because first of all note fetch a third party library.

02:18.570 --> 02:26.040
And if we've really tested out the library code and we checked the get Haab repo and they have tests

02:26.430 --> 02:29.460
we don't need to test that it works.

02:29.460 --> 02:34.660
We can assume that the fetch function works as intended.

02:35.010 --> 02:42.140
So let's just do a mock fetch and mock fetch.

02:42.470 --> 02:44.780
And this is going to be a variable.

02:44.810 --> 02:49.760
So let's just say cost we can mock the fetch and the way we can do that in jest.

02:49.760 --> 02:55.200
Again if you remember this is something that comes with just mock spies and stuffs.

02:55.250 --> 03:02.990
Otherwise if you using something like Moka you'd use sign on but with just it we can just do jest dot

03:05.530 --> 03:10.400
four function and we can do something called again.

03:10.450 --> 03:12.630
This is all in their documentation.

03:12.670 --> 03:23.530
We can do something called mock return value and we can just return something as if this fecche function

03:23.530 --> 03:24.180
was called.

03:24.370 --> 03:30.270
So what does a fetch function usually return well.

03:30.380 --> 03:33.090
We know that returns a promise.

03:33.110 --> 03:36.050
And let's just for now say that it's always going to resolve.

03:36.140 --> 03:40.880
So that is a resolved promise and inside of this resolve.

03:41.060 --> 03:45.930
Let me make this on a new line just so we can see it better and better.

03:46.010 --> 03:47.000
Here.

03:47.000 --> 03:49.590
Man let's make this a little bit smaller.

03:49.670 --> 04:01.150
We want to resolve to an object that is Jason because if you remember we always have to do the dust

04:01.180 --> 04:07.490
then response dot Jaison so we can just mock this whole thing out.

04:08.570 --> 04:10.120
We can say that Jason.

04:10.280 --> 04:14.150
So the object that we return is going to be a promise.

04:14.180 --> 04:22.790
So we're going to resolve a promise with the Jaison method and this method again is a

04:25.640 --> 04:26.600
promise.

04:26.930 --> 04:37.620
So again promise and resolve and this promise again this part we're doing this the Don J song and then

04:37.620 --> 04:52.000
we get the data so we can say that within the resolve we'll have count equals 87 and the results will

04:52.000 --> 05:04.720
be let's just create an array that says 0 1 2 3 4 5 let's say this and get a bit of a syntax error let's

05:04.720 --> 05:05.650
fix that.

05:07.090 --> 05:11.270
We have an unexpected token and I forgot to come over here

05:14.290 --> 05:17.130
classic commas they always get me.

05:17.280 --> 05:17.630
All right.

05:17.650 --> 05:20.370
So now we just marked the fetch call.

05:20.500 --> 05:27.670
Instead of calling this get people promise and wait for the data and get the data or the data.

05:27.670 --> 05:34.010
Their results were actually just doing that automatically assuming that the API works.

05:34.030 --> 05:37.690
So we can just test our other parts of the function.

05:38.380 --> 05:47.130
Again because this is still asynchronous we're returning a promise remember we'll want to do a return

05:48.660 --> 05:59.700
Swaby dot get people to get people promise and and here we can instead of the fecche do the walk fetch

06:00.180 --> 06:10.120
we're mocking the function that is fetch and this is how when we test we can use dependency injection

06:10.390 --> 06:14.790
to make sure that we're testing different functionality.

06:14.800 --> 06:21.880
And you might remember this from integration tests but without actually using up all these resources

06:21.880 --> 06:24.130
we're trying to be as smart as possible.

06:25.070 --> 06:31.350
Now we can have the dot then and we're going to see the data just like we did up above where we hear

06:34.500 --> 06:35.350
now within here.

06:35.370 --> 06:37.380
Let's do a few tests.

06:37.530 --> 06:44.260
We want to expect the maake fetch.

06:44.310 --> 06:52.080
That's right because we used just to dot F-ed and we now have an ability to listen in because in just

06:52.110 --> 06:58.170
this is also a spy we can spy on this and see what this function did inside of this function.

06:58.170 --> 07:01.530
So what didn't Mark fetched do inside of get people promise.

07:01.560 --> 07:06.310
I can't say I expect mock fetch doc mock.

07:06.330 --> 07:11.180
Again this is in the documentation to have a cause.

07:11.220 --> 07:14.330
So how many times has this been called.

07:15.450 --> 07:16.440
I'm going to say lenth.

07:16.560 --> 07:24.920
So the number of times it's been called to be one let's safe

07:28.320 --> 07:30.000
and this is passing.

07:30.000 --> 07:41.120
But remember with asynchronous tests we want to always do the expect dot assertions to make sure that

07:41.120 --> 07:42.290
they're being called.

07:42.290 --> 07:47.330
So in this case we only have one everything works.

07:47.340 --> 07:48.720
If I changed this to zero

07:52.740 --> 07:59.150
that fails because we actually did call the Mach fish this function called the maake fetch once.

07:59.190 --> 08:00.450
Very cool.

08:01.080 --> 08:04.620
What else can we do well.

08:04.650 --> 08:06.030
Another thing we can do.

08:06.100 --> 08:08.740
Well let me just copy this.

08:08.780 --> 08:19.710
We can expect maake fetch have another method called to be called with and we can test to see what this

08:19.710 --> 08:20.770
was called with.

08:20.970 --> 08:25.580
In our case it should be called with this yourself.

08:25.950 --> 08:29.010
So again let's put it in here.

08:29.220 --> 08:30.410
Let's test this out.

08:30.480 --> 08:31.230
I'm going to save

08:35.290 --> 08:43.680
Oh and I actually did make a mistake and we want to do expect again the mock fetch to I've been called

08:43.680 --> 08:53.660
with the u r l the save o and remove the bracket.

08:53.690 --> 08:54.270
All right.

08:54.320 --> 08:59.270
It's actually passing by Remember our assertions is now expecting two things.

08:59.300 --> 09:00.170
So I'm going to save

09:04.240 --> 09:07.260
you see how it took a little bit more time this time.

09:07.630 --> 09:14.100
Again because we're repeatedly calling this API it's taking a little bit more time this time 3.9 81

09:14.110 --> 09:15.010
seconds.

09:15.280 --> 09:20.330
But with the mark because we're returning we're doing to resolve right away.

09:20.500 --> 09:23.830
It's a lot faster and that's passing.

09:23.950 --> 09:29.600
If for some reason I changed this to and a call we expected to call planets and said

09:32.760 --> 09:41.730
we see that it fails because we expect the get people to actually get the people not the planet's very

09:41.730 --> 09:42.890
cool.

09:42.900 --> 09:43.140
All right.

09:43.170 --> 09:44.850
Let's do a few more.

09:45.180 --> 09:46.650
Well let's just add again.

09:46.650 --> 09:49.410
Copy and pasting in testing is not bad.

09:49.470 --> 09:57.990
Let's just copy and paste this and expect that things work the exact same as they did in the above with

09:57.990 --> 09:58.760
the regular fish.

09:58.770 --> 10:03.110
But this time with our Mach. so we can save go back

10:05.860 --> 10:09.760
and I have a test failing because now our assertion number is four

10:13.650 --> 10:14.500
woohoo.

10:14.600 --> 10:15.840
Everything is passing.

10:15.980 --> 10:24.600
And if I change this count to eighty nine and I change this to eighty nine but let's say to be greater

10:24.600 --> 10:27.730
than 10 it should fail

10:30.320 --> 10:34.520
because our results only have six items.

10:34.520 --> 10:35.130
There you go.

10:36.220 --> 10:38.130
But if I change this to greater than 5

10:42.520 --> 10:47.580
our tests are passing very very cool.

10:48.960 --> 10:53.030
And there you have it other than learning a few methods.

10:54.040 --> 11:00.010
Such as to be greater than are two equal which you can always check and the documentation when you write

11:00.010 --> 11:03.670
a test everything is pretty simple right.

11:03.670 --> 11:09.520
Once you get the hang of it we have a synchronous tests that are very very easy and we just haven't

11:09.520 --> 11:12.110
expect assertion.

11:12.260 --> 11:18.470
And then we have a synchronous test that we just have to remember to return and make sure that we have

11:18.470 --> 11:22.020
access to the promise whatever returns.

11:22.430 --> 11:29.240
And then we can also to avoid long running a synchronous code such as API calls or maybe even a database

11:29.240 --> 11:34.830
call to mock and mock functions also known US spies.

11:34.850 --> 11:44.580
And just because they let you spy on the behavior of the function is called by our test and it's going

11:44.580 --> 11:47.570
to spy on what is happening.

11:47.730 --> 11:52.550
And you saw that give people promise actually runs this mock fish that we created.

11:52.650 --> 11:56.140
And all you need is this syntax.

11:56.310 --> 12:03.240
And here we just added extra things because we wanted a certain behavior but even just doing this we

12:03.240 --> 12:14.390
could have seen that Mach fetch would have been called with this you URL just an awesome awesome tool.

12:14.500 --> 12:19.090
If you work with other libraries you'll see a lot of the similarities.

12:19.090 --> 12:25.710
Like I said Mock's Stobbs and spice can also be seen in sign on especially if you work with moka.

12:25.780 --> 12:32.140
But overall the principles are the same and you can see that tests can be fun because we're just testing

12:32.380 --> 12:37.800
logic and nothing feels better than getting all these green passes.

12:39.250 --> 12:41.450
All right that's it for now.

12:41.470 --> 12:47.000
I think it's time for us to get into some re-act testing and testing our robo friends up.

12:47.110 --> 12:48.500
I'll see in the next one.

12:48.510 --> 12:48.990
Bye bye.
