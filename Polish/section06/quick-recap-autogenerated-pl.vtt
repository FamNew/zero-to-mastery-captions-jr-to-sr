WEBVTT

00:00:01.140 --> 00:00:02.580
Witamy spowrotem.

00:00:02.580 --> 00:00:09.510
Chciałem zająć chwilę tutaj, zanim zaczniemy testować naszych przyjaciół robo, aby po prostu przejrzeć to, czego nauczyliśmy się na

00:00:09.510 --> 00:00:13.250
naszych slajdach i jak to wszystko ma teraz sens.

00:00:14.140 --> 00:00:20.530
Dowiedzieliśmy się, że teraz mamy tylko to, co możemy zainstalować, co zapewnia nam strukturę

00:00:20.530 --> 00:00:29.650
testową, w której możemy uruchamiać testy, a to po prostu przychodzi z biblioteką asercji, w której możemy użyć xpect dot,

00:00:30.100 --> 00:00:38.860
aby być równym lub mieć lub wszystkie te rzeczy możemy to zrobić, co zobaczyliśmy w naszym arkuszu oszukiwania, aby upewnić

00:00:38.950 --> 00:00:41.640
się, że to się równa.

00:00:41.890 --> 00:00:49.030
A potem zobaczyliśmy, że po prostu przychodzi z testującym biegaczem coś, w czym jesteśmy w stanie uruchomić test i zobaczył

00:00:49.180 --> 00:00:50.920
to w moim terminalu.

00:00:50.980 --> 00:00:58.110
Zawsze mam uruchomione te testy i sprawdzam, upewniam się, że rzeczy zawsze przemijają.

00:00:58.120 --> 00:01:04.210
Widzieliśmy także, że mamy funkcje szydercze, z których możemy korzystać.

00:01:04.290 --> 00:01:12.630
Zauważyliśmy, że w naszym przykładzie zbudowaliśmy interfejs API dla wojen, w którym mamy wszystkich tych ludzi, z którymi moglibyśmy sfałszować

00:01:12.930 --> 00:01:19.660
funkcję pobierania i upewnić się, że została ona ponownie nazwana czymś, co pochodzi od samego wpisania

00:01:19.660 --> 00:01:24.110
się, jest popularna, że działa bardzo podobnie które również zobaczysz.

00:01:24.130 --> 00:01:31.950
A potem w końcu zobaczyliśmy, że możemy zrobić pokrycia kodu, uruchamiając test NPM na desce rozdzielczej, a następnie daje

00:01:32.470 --> 00:01:36.940
nam informacje o tym, gdzie mamy testy, a gdzie nie.

00:01:36.940 --> 00:01:38.730
Abyśmy mogli poprawić naszą aplikację.

00:01:38.980 --> 00:01:43.010
Mówiłem ci, że to ma sens, a my jeszcze nie skończyliśmy.

00:01:43.030 --> 00:01:53.440
Widzieliśmy, że możemy przetestować naszą aplikację programowo, ale jeśli potrzebujemy czasu, aby użyć jakiegoś interfejsu API, mamy te trzy

00:01:53.440 --> 00:01:59.920
opcje, możemy użyć rzeczywistego Daun'a, możemy użyć czegoś takiego jak lalkarz

00:02:00.190 --> 00:02:08.540
do przeglądarki bez głowy lub coś w stylu jazz dom, używając Mount'a, możemy stworzyć również enzym.

00:02:08.540 --> 00:02:09.340
Znowu tam.

00:02:09.400 --> 00:02:17.320
Ta konfiguracja jest dość prosta i możesz to sprawdzić na dokumentacji enzymu. Tak, a także nauczyliśmy się tego

00:02:17.320 --> 00:02:18.480
i reagujemy.

00:02:18.490 --> 00:02:23.280
Możemy użyć testów enzymatycznych i migawkowych, aby nasze testy były super-łatwe.

00:02:23.330 --> 00:02:30.390
Znowu kolejny powód, który uwielbiam wykorzystywać, szczególnie w przypadku projektów typu re-act, który jest szybkim powrotem do

00:02:30.390 --> 00:02:30.810
kodowania.

00:02:30.810 --> 00:02:33.870
Idziemy do następnego wideo i tego prawdopodobnie.