WEBVTT

00:00:01.430 --> 00:00:02.550
Selamat datang kembali.

00:00:02.900 --> 00:00:07.850
Mari kita bicara tentang sesuatu yang akan kita bahas di bagian ini dan mungkin hal-hal yang

00:00:07.850 --> 00:00:10.090
paling menarik bagi saya ketika menyangkut Ada

00:00:10.130 --> 00:00:10.790
Iya nih.

00:00:10.820 --> 00:00:17.180
Dan itu adalah fungsi lambda yang Anda lihat secara tradisional kami telah membangun dan menyebarkan

00:00:17.180 --> 00:00:23.940
aplikasi web di mana kami memiliki kontrol atas permintaan domba seperti kami telah membangun aplikasi otak pintar kami.

00:00:24.010 --> 00:00:25.680
Kami agak mengendalikan segalanya.

00:00:25.690 --> 00:00:34.210
Setiap bagian kecil kami bertanggung jawab untuk server yang menggunakan server ekspres itu dan memastikan bahwa

00:00:34.210 --> 00:00:36.710
sumber daya kami ditetapkan.

00:00:36.820 --> 00:00:41.440
Bertanggung jawab atas apa yang kami sebut penyediaan dan pengelolaan sumber daya

00:00:41.440 --> 00:00:47.380
yang memastikan bahwa kami menerapkan ke mesin yang tepat, ia dapat menskalakan dan semua item konfigurasi ini.

00:00:47.410 --> 00:00:54.860
Sekarang ada beberapa masalah dengan metode ini hanya melakukan semua yang Anda lakukan satu dibebankan untuk menjaga server

00:00:54.860 --> 00:01:01.760
bahkan ketika kita tidak benar-benar menggunakan atau melayani dan Anda meminta misalnya jika tidak ada yang

00:01:01.790 --> 00:01:07.490
memeriksa situs web kami pintar otak dan server masih berjalan dan berjalan.

00:01:07.490 --> 00:01:14.740
Mendengarkan koneksi sementara kami membayar uang agar server itu berjalan tidak terlalu efisien.

00:01:15.950 --> 00:01:21.560
Kami juga bertanggung jawab untuk memastikan bahwa server berjalan bahwa ada pemeliharaan yang dilakukan di atasnya bahwa kami

00:01:21.740 --> 00:01:25.910
melakukan peningkatan kapan pun perlu ada peningkatan dan semua sumber daya ini.

00:01:25.910 --> 00:01:33.800
Sekali lagi lapisan sakit kepala lainnya dan kemudian kita juga harus khawatir tentang keamanan memastikan bahwa semua yang

00:01:33.800 --> 00:01:40.260
kita lakukan dengan server aman dan kita tidak akan memiliki orang jahat dapat mengaksesnya.

00:01:42.180 --> 00:01:44.410
Jadi Azara menggunakan keterampilan.

00:01:44.520 --> 00:01:50.700
Dan akhirnya ketika semakin banyak pengguna mulai menggunakan layanan kami, kami harus memastikan bahwa server kami

00:01:50.700 --> 00:01:52.090
dapat beradaptasi dengannya.

00:01:52.290 --> 00:01:58.260
Tetapi pada saat yang sama ketika tidak digunakan, itu tidak membebani kita begitu banyak uang karena kita harus

00:01:58.260 --> 00:01:58.980
tetap berjalan.

00:02:00.450 --> 00:02:05.810
Dan terutama untuk perusahaan yang lebih kecil dan pengembang individu ini bisa menjadi sakit kepala besar.

00:02:06.000 --> 00:02:11.370
Anda mulai terganggu dengan semua pengelolaan sumber daya Anda dari hal-hal lain yang

00:02:11.370 --> 00:02:17.150
lebih penting seperti benar-benar membangun aplikasi Anda dan menulis kode sekarang di perusahaan besar.

00:02:17.190 --> 00:02:22.840
Infrastruktur yang kita sebut ini biasanya memiliki tim sendiri yang disebut tim infrastruktur.

00:02:23.010 --> 00:02:29.430
Jadi apa yang bisa dilakukan perusahaan besar ini dengan keahlian dan tim mereka sehingga kami bisa fokus pada kode dan

00:02:29.460 --> 00:02:31.100
menyerahkan semuanya kepada mereka.

00:02:32.360 --> 00:02:38.080
Dan sebagai pengembang, kami telah mencari solusi seperti ini untuk masalah ini untuk waktu

00:02:38.930 --> 00:02:45.830
yang lama dan di sinilah gagasan server kurang hadir di Servilius memungkinkan kami untuk membangun aplikasi

00:02:45.830 --> 00:02:49.260
di mana kami hanya menyerahkan penyedia cloud.

00:02:49.370 --> 00:02:52.360
Jadi Google Amazon atau Microsoft kode kita.

00:02:52.400 --> 00:02:57.140
Dan itu berjalan untuk kita, katakan saja, katakan padaku apa yang harus aku jalankan dan aku akan mengurus

00:02:57.140 --> 00:02:57.760
semuanya untukmu.

00:02:57.770 --> 00:03:03.770
Mereka juga memastikan bahwa kami hanya dikenai biaya untuk apa yang sebenarnya kami gunakan karena mereka

00:03:03.770 --> 00:03:08.850
dapat memantau kode apa yang dieksekusi dan sumber daya apa yang sebenarnya dikonsumsi.

00:03:08.870 --> 00:03:13.900
Misalnya untuk hal-hal musiman seperti belanja Natal.

00:03:14.080 --> 00:03:19.910
Yah penyedia cloud hanya dapat menambahkan server lebih banyak daya untuk permintaan.

00:03:20.960 --> 00:03:27.080
Dan ketika mati, ia dapat menghapus server itu dan karena mereka dapat menggunakan server itu untuk perusahaan lain, mereka

00:03:27.500 --> 00:03:29.850
tidak peduli bahwa kita tidak menggunakannya lagi.

00:03:29.870 --> 00:03:35.360
Dan akhirnya kode kita berjalan di lingkungan yang aman di mana penyedia cloud hanya mengurus semuanya

00:03:35.360 --> 00:03:36.220
untuk kita.

00:03:36.230 --> 00:03:38.730
Mereka memastikan bahwa semuanya terkini dan aman.

00:03:39.770 --> 00:03:41.630
Baiklah kedengarannya hebat.

00:03:41.630 --> 00:03:42.350
Aku terjual.

00:03:42.410 --> 00:03:43.570
Mari kita mulai melakukan ini.

00:03:43.680 --> 00:03:47.230
Baiklah mari kita gunakan Amazon Lamda dan LAMDA.

00:03:47.230 --> 00:03:52.270
Seperti yang saya katakan memungkinkan Anda menjalankan fungsi dan ini adalah cara kerjanya dan

00:03:52.270 --> 00:03:55.650
kami akan mengimplementasikannya dalam kursus saat pengguna mengajukan permintaan.

00:03:55.710 --> 00:03:58.030
Katakanlah kita hanya memiliki fungsi yang menghibur log

00:03:58.140 --> 00:04:00.320
AKU SANGAT FANCY.

00:04:00.480 --> 00:04:08.400
Yang perlu kita lakukan adalah katakanlah Ambil panggilan dari aplikasi kami ke aturan Anda bahwa Amazon Lamda menyediakan bagi kami dan

00:04:08.400 --> 00:04:15.880
kami hanya mengunggah kode ini ke Amazon Lamda dan segera setelah kami melakukan panggilan fecche hari ini Anda Arel

00:04:16.200 --> 00:04:17.110
akan log.

00:04:17.190 --> 00:04:18.480
Saya sangat mewah.

00:04:18.620 --> 00:04:19.860
Sekarang bagaimana cara kerjanya.

00:04:19.860 --> 00:04:26.220
Di bawah tenda Anda melihat penyedia cloud membuat wadah sesuatu yang kami tahu dan kami telah pelajari

00:04:26.220 --> 00:04:30.060
di buruh pelabuhan dan menjalankan fungsi ini di dalamnya.

00:04:31.280 --> 00:04:36.230
Dan apa yang terjadi jika lima pengguna secara bersamaan meminta fungsi ini.

00:04:36.440 --> 00:04:43.220
Yah mereka akan membuat lima wadah terpisah untuk setiap pengguna dan merespons dengan dialog konsol.

00:04:43.300 --> 00:04:45.680
Saya sangat mewah.

00:04:45.850 --> 00:04:52.900
Yang mereka lakukan hanyalah menyimpan fungsi yang kami berikan di basis data mereka dan kapan pun itu dipanggil,

00:04:53.200 --> 00:04:57.340
ia akan mengambilnya dari basis data dan benar-benar menjalankannya.

00:04:57.340 --> 00:05:02.240
Sekarang Anda mungkin melihat masalah dengan ini dan ini sebenarnya disebut masalah mulai dingin.

00:05:02.290 --> 00:05:07.600
Itu adalah mereka harus mengambil fungsi ini dari database yang baru saja disimpan sebagai string dan kemudian

00:05:07.630 --> 00:05:09.220
menjalankannya di dalam sebuah wadah.

00:05:09.300 --> 00:05:17.770
Itu membutuhkan waktu dan itu adalah satu-satunya kelemahan dengan Amazon Lamda ketika pertama kali menjalankan fungsi itu membutuhkan sedikit

00:05:17.770 --> 00:05:18.630
waktu.

00:05:18.640 --> 00:05:22.900
Maksud saya ketika kita mengatakan sedikit waktu, itu masih Amazon jadi cepat.

00:05:23.230 --> 00:05:28.750
Tetapi begitu fungsi telah dijalankan dan sekarang semakin banyak pengguna menggunakannya maka itu baik-baik saja karena itu

00:05:28.750 --> 00:05:30.310
ada dalam sebuah wadah.

00:05:30.310 --> 00:05:31.800
Jadi itu satu hal yang perlu diingat.

00:05:32.680 --> 00:05:38.650
Tetapi keindahan dari ini adalah bahwa fungsi ini hanya akan berjalan ketika kita memicunya dan ketika

00:05:38.650 --> 00:05:42.180
tidak dijalankan Amazon tidak membebani kita sama sekali.

00:05:42.190 --> 00:05:48.640
Jadi ini bagus jika Anda memiliki kelahiran musiman di perusahaan Anda atau Anda ingin melakukan

00:05:48.640 --> 00:05:53.540
sesuatu yang tidak berjalan terus-menerus sesuatu yang hanya berjalan sesekali.

00:05:53.550 --> 00:05:54.150
Baiklah.

00:05:54.150 --> 00:05:57.750
Cukup bicara kita perlu kode untuk benar-benar memahami konsep ini.

00:05:57.810 --> 00:06:01.410
Jadi di video berikutnya kita akan memulai dengan Amazon Lamda.