WEBVTT

00:00:01.330 --> 00:00:02.080
Selamat datang kembali.

00:00:02.230 --> 00:00:07.190
Mari kita mulai menulis beberapa tes untuk kode asinkron.

00:00:07.640 --> 00:00:20.800
Jika kita kembali ke skrip untuk menguji Ya, kita dapat memulai pengujian pertama dengan mengatakan itu

00:00:21.160 --> 00:00:27.110
memanggil API starwars Swaby untuk mendapatkan orang.

00:00:27.300 --> 00:00:31.790
Dan lagi sintaksanya sama seperti yang telah kita lihat sebelumnya dalam tes pertama kami.

00:00:31.830 --> 00:00:47.450
Apa yang bisa kita lakukan dengan baik kita tidak bisa mengatakan bertukar Daut membuat orang akan memberikannya API ambil atau fungsi ambil.

00:00:48.590 --> 00:00:56.430
Dan kemudian lakukan DOD lalu dan seperti saya katakan Anda bisa menurunkan Anda atau yang lain di sini dan kami bisa melakukan sesuatu yang disebut

00:00:56.430 --> 00:00:58.620
mengejek yang akan kita bicarakan nanti.

00:00:58.650 --> 00:01:02.480
Untuk saat ini kami hanya bertahan dengan metode ini.

00:01:03.700 --> 00:01:05.200
Tapi mari kita lihat apa yang bisa kita uji.

00:01:06.070 --> 00:01:09.790
Kami memiliki API yang kami panggil lagi.

00:01:09.820 --> 00:01:14.020
Ini akan mengembalikan kami satu ton data.

00:01:14.020 --> 00:01:22.430
Jadi sekali lagi kita melakukan DOT dari sekadar javascript dan ini akan mengembalikan kita beberapa data.

00:01:24.120 --> 00:01:32.570
Ingat itu akan mengembalikan data kami atau akan mengembalikan jumlah dan hasil kami.

00:01:32.610 --> 00:01:42.400
Jadi di sini di dalam DOD maka blok kita bisa melakukan pernyataan kita berharap data tidak

00:01:46.320 --> 00:01:47.190
sama

00:01:50.120 --> 00:01:57.990
dengan 7 karena ingat jika kita kembali ke situs Web hitungannya 87.

00:01:58.120 --> 00:02:02.980
Jadi semoga penghitungan data cocok dengan 87.

00:02:03.000 --> 00:02:09.600
Mari kita lihat apakah itu masalahnya saya akan menyimpan dan kembali menjalankan tes kami.

00:02:09.600 --> 00:02:12.450
Biarkan saya menghapus ini dan menjalankan tes

00:02:17.080 --> 00:02:21.560
NPM dan kita semua harus menekan untuk menjalankan semua tes untuk itu

00:02:21.560 --> 00:02:28.120
Jadi itu berfungsi tetapi tidak terlalu sulit kita tidak melakukan hal yang terlalu gila.

00:02:28.120 --> 00:02:30.580
Bagaimana jika kita menambahkan tes nother.

00:02:30.650 --> 00:02:37.010
Kami akan menambahkan tes lain di sini dan itu akan mengatakan itu panggilan dingin Swaby

00:02:37.010 --> 00:02:39.310
untuk membuat orang dengan janji.

00:02:39.360 --> 00:02:49.410
Sekarang kali ini kita akan menggunakan janji orang mari kita simpan.

00:02:49.530 --> 00:02:50.520
Kanan.

00:02:50.550 --> 00:02:53.840
Apakah itu benar-benar berfungsi?

00:02:53.850 --> 00:02:54.900
Tampaknya berfungsi.

00:02:54.900 --> 00:02:59.620
Maksud saya kita mendapatkan tes enam dari mereka yang telah lulus.

00:02:59.800 --> 00:03:07.150
Tapi ingat apa yang saya katakan kami selalu ingin memastikan bahwa kami gagal dalam tes kami dan

00:03:07.270 --> 00:03:11.320
memeriksa apakah tes benar-benar memeriksa sementara kami ingin memeriksa.

00:03:11.430 --> 00:03:25.950
Salah satu alat yang dapat kita gunakan dengan geste adalah sesuatu yang disebut xpect dot asertions dan assertions adalah Remember assertion

00:03:25.980 --> 00:03:27.390
library.

00:03:27.450 --> 00:03:31.610
Apakah hal-hal ini adalah pernyataan.

00:03:31.640 --> 00:03:40.200
Jadi, dengan menggunakan pernyataan harapan, kami tidak bisa mengatakan dalam blok ini kami mengharapkan satu atau pernyataan.

00:03:40.460 --> 00:03:49.460
Jika kita harus maka kita harus mengatakan kita harapkan dan ini adalah cara yang baik untuk menguji bahwa hal-hal ini

00:03:49.460 --> 00:03:52.630
benar-benar berjalan terutama dengan kode sinkron.

00:03:52.670 --> 00:03:54.180
Biarkan saya lakukan di sini.

00:03:54.320 --> 00:03:55.130
Aku akan

00:03:57.780 --> 00:03:59.410
menyelamatkan siapa yang baru saja terjadi.

00:04:00.770 --> 00:04:06.960
Xpect dot kami menegaskan satu bidang.

00:04:07.110 --> 00:04:09.920
Tidak ada panggilan asersi.

00:04:10.080 --> 00:04:14.110
Jadi ada sesuatu yang terjadi di sini di mana tes ini berlalu

00:04:14.220 --> 00:04:22.870
Tapi ini tidak pernah dipanggil dan ini sedikit getcha dengan tes asinkron.

00:04:23.830 --> 00:04:31.930
Anda tahu ketika ini terjadi selama pengujian, sangat sulit untuk melakukan debug karena sangat mudah untuk tidak memeriksa

00:04:31.960 --> 00:04:34.470
apakah itu berfungsi dengan baik.

00:04:34.480 --> 00:04:43.600
Masalahnya adalah bahwa tes benar-benar selesai begitu mendapatkan orang dipanggil.

00:04:43.780 --> 00:04:47.560
Dan ingat janji mengembalikan keadaan tertunda.

00:04:47.580 --> 00:04:52.940
Jadi ini akan dikembalikan sebelum kita benar-benar menerima data.

00:04:52.960 --> 00:04:54.780
Bagaimana kita menyiasati ini.

00:04:54.880 --> 00:05:01.420
Bagaimana kita bisa tahu tesnya, jangan hanya lulus tes ini karena tidak ada yang terjadi dan kami hanya

00:05:01.450 --> 00:05:03.440
mengembalikan janji dengan status tertunda.

00:05:03.700 --> 00:05:08.070
Tunggu sampai ini benar-benar selesai dan kemudian lanjutkan

00:05:09.690 --> 00:05:11.360
Ada beberapa cara untuk melakukan ini.

00:05:11.400 --> 00:05:21.780
Cara pertama untuk melakukannya adalah dengan menggunakan argumen tunggal yang disebut selesai sehingga alih-alih memiliki parameter kosong

00:05:21.780 --> 00:05:31.680
di sini untuk fungsi yang dapat kita lakukan sehingga dapat secara otomatis diteruskan ke pengujian.

00:05:31.940 --> 00:05:41.460
Dan ini mengatakan hei, tunggu saja sampai callback yang dilakukan dipanggil sebelum Anda benar-benar mengatakan tes ini

00:05:41.460 --> 00:05:42.630
selesai.

00:05:42.630 --> 00:05:50.170
Dan Anda biasanya meletakkannya tepat setelah panggilan jadi katakanlah ini sudah selesai.

00:05:50.220 --> 00:05:51.300
Jadi biarkan saya menyimpan

00:05:54.710 --> 00:05:55.390
operasi itu.

00:05:55.530 --> 00:05:56.460
Itu berlalu.

00:05:56.460 --> 00:06:00.100
Sekarang kami mengatakan hei jangan lulus tes ini sampai ini selesai.

00:06:01.100 --> 00:06:10.840
Hanya untuk menguji apakah saya berubah sama dengan nol. Ini gagal karena kami memiliki satu panggilan pernyataan yang luar biasa.

00:06:10.850 --> 00:06:14.150
Sekarang ini adalah salah satu cara untuk melakukannya.

00:06:14.480 --> 00:06:22.460
Dan hal yang rapi dengan ini adalah bahwa jika karena alasan tertentu pemikiran ini jika

00:06:22.460 --> 00:06:30.340
testis ini gagal katakanlah dalam script untuk kita ini sebenarnya adalah parameter yang salah.

00:06:30.410 --> 00:06:33.250
Ada yang Mungkin kita salah eja orang.

00:06:33.250 --> 00:06:43.290
Jika saya mengatakan ini, Anda melihat bahwa saya mendapatkan panggilan udara melihat B untuk mendapatkan orang dan saya mendapatkan kesalahan di sini

00:06:43.290 --> 00:06:46.800
sehingga tes menunggu sampai saya benar-benar selesai.

00:06:46.800 --> 00:06:47.820
Sangat bagus.

00:06:50.720 --> 00:06:51.960
Sekarang mari kita perbaiki ini.

00:06:52.010 --> 00:06:59.030
Bawa ini kembali ke Juan dan bicarakan cara lain untuk melakukan ini dan ini sangat mudah.

00:06:59.030 --> 00:07:04.820
Jika kode Anda menggunakan janji-janji seperti yang kami miliki ada cara yang lebih

00:07:04.820 --> 00:07:12.640
sederhana yang mungkin kurang membingungkan bagi kebanyakan orang untuk menangani tes asinkron dan ini adalah hal lain yang

00:07:12.730 --> 00:07:15.430
sangat saya sukai, kami hanya

00:07:17.950 --> 00:07:26.200
dapat melakukan ini alih-alih mengembalikan janji dan cukup pintar ini untuk mengatakan oh karena kami mengembalikan ini saya

00:07:26.200 --> 00:07:29.200
akan menunggu sampai janji ini kembali.

00:07:29.200 --> 00:07:35.410
Dan jika janji itu ditolak, tes secara otomatis akan gagal yang sangat bagus.

00:07:35.410 --> 00:07:46.510
Sekali lagi katakanlah ini semua melampaui jika saya salah mengeja API Anda lagi Anda melihat bahwa tes

00:07:47.110 --> 00:07:49.300
secara otomatis gagal.

00:07:55.420 --> 00:07:56.910
Sekarang ini sedikit rumit.

00:07:56.910 --> 00:08:02.280
Anda harus selalu memastikan bahwa Anda mengembalikan janji jika Anda mengakui ini

00:08:02.320 --> 00:08:09.660
mengembalikan pernyataan Simien karena Anda kami melihat tes Anda akan selesai sebelum janji benar-benar diselesaikan atau ditolak.

00:08:09.670 --> 00:08:18.030
Jadi inilah tip ketika menjalankan tes Synchronoss selalu melakukan ini selalu lakukan pernyataan harapan.

00:08:18.190 --> 00:08:23.660
Selalu uji bahwa pernyataan Anda sedang diuji.

00:08:24.040 --> 00:08:25.290
Jadi mari kita selesaikan ini.

00:08:25.510 --> 00:08:27.450
Mari kita tambahkan beberapa baris lagi.

00:08:27.550 --> 00:08:30.880
Kami akan mengatakan itu di sini.

00:08:32.290 --> 00:08:34.540
Kami akan menambahkan dua pernyataan.

00:08:34.840 --> 00:08:37.740
Dan lagi kami ingin kami kembali ke sini.

00:08:38.710 --> 00:08:44.650
Dan kami akan menambahkan pernyataan lain yang mengatakan bahwa kami mengharapkan hasil

00:08:48.910 --> 00:08:52.340
data memiliki mimbar dan apa yang dapat

00:08:56.800 --> 00:08:59.060
kami gunakan di sini.

00:08:59.110 --> 00:09:05.800
Kami ingin memeriksa mungkin bahwa hasil yang kami peroleh setidaknya lima orang adalah bahwa

00:09:05.830 --> 00:09:08.950
panjangnya lebih besar daripada katakanlah lima.

00:09:09.090 --> 00:09:14.510
Untungnya bagi kami ada lembar contekan yang adil dan lembar contekan yang adil ini.

00:09:14.620 --> 00:09:16.560
Nah coba katakan secepat itu lima kali.

00:09:16.560 --> 00:09:23.400
Itu cukup sulit sebenarnya memiliki semua hal yang dapat Anda gunakan untuk ujian di sini.

00:09:23.400 --> 00:09:25.310
Sangat berguna.

00:09:25.380 --> 00:09:30.120
Ini adalah semua yang Anda butuhkan untuk menulis tes yang sempurna.

00:09:30.120 --> 00:09:34.070
Dan kita lihat di sini bahwa kita harus lebih hebat daripada metode.

00:09:34.140 --> 00:09:35.220
Jadi mari kita gunakan itu.

00:09:35.310 --> 00:09:45.170
Saya akan mengatakan untuk menjadi lebih besar lagi dan lagi ini sebabnya saya suka justin kebanyakan perpustakaan pernyataan.

00:09:45.180 --> 00:09:49.840
Mereka hanya membuat semuanya dibaca dengan baik dalam bahasa Inggris sehingga Anda mengerti persis apa yang terjadi.

00:09:49.860 --> 00:09:52.130
Jadi saya akan mengatakan lebih dari lima.

00:09:52.260 --> 00:09:56.610
Mari selamatkan.

00:09:56.770 --> 00:09:57.200
Baiklah.

00:09:57.210 --> 00:10:02.820
Kami memiliki beberapa kesalahan jadi mari kita perbaiki tes ini dua pernyataan untuk dipanggil tetapi kami hanya punya satu.

00:10:03.150 --> 00:10:04.980
Mengapa demikian.

00:10:04.980 --> 00:10:12.900
Dan saya tidak menayangkan data undefined dan logout lebih sedikit untuk melihat apa yang kita dapatkan di sini,

00:10:12.930 --> 00:10:16.060
mari kita lihat hasil dialog ayah dot

00:10:20.930 --> 00:10:23.040
dan saya mendapatkan undefined.

00:10:23.090 --> 00:10:26.210
Jadi sepertinya di sini.

00:10:26.240 --> 00:10:28.380
Oh, di sana Anda akan melihat kesalahan saya.

00:10:28.600 --> 00:10:31.390
Saya salah mengeja hasil di sini.

00:10:31.460 --> 00:10:32.980
Anda mungkin menertawakan saya sekarang.

00:10:32.990 --> 00:10:35.830
Tetapi ini terjadi jauh lebih banyak daripada yang Anda pikirkan.

00:10:35.950 --> 00:10:37.040
Kanan.

00:10:37.130 --> 00:10:39.530
Jadi mari kita lihat itu.

00:10:39.530 --> 00:10:40.520
Baiklah itu bagus.

00:10:40.520 --> 00:10:45.820
Kami mendapat beberapa tanggapan, mari kita hapus konsol log hit save.

00:10:45.980 --> 00:10:51.110
Dan lagi ini adalah alasan bagus untuk menulis tes karena saya tidak akan menangkap

00:10:51.140 --> 00:10:53.770
kesalahan itu sampai saya benar-benar menjalankan aplikasi.

00:10:53.910 --> 00:11:04.700
Jadi saya melihat di sini bahwa saya hanya memiliki kesalahan tipe sederhana untuk menjadi lebih besar daripada lagi bahasa Inggris yang mengerikan.

00:11:04.760 --> 00:11:10.190
Ini haknya.

00:11:10.260 --> 00:11:16.510
Semuanya berlalu dan apa yang baru saja Anda saksikan adalah bagaimana tes biasanya bekerja.

00:11:16.560 --> 00:11:21.050
Mereka terus-menerus melanggar mereka terus-menerus melanggar dan Anda mencoba untuk mencapai kondisi hijau ini.

00:11:21.060 --> 00:11:27.450
Dan ketika Anda mencapai kondisi hijau ini seperti haleluya ini sangat menyenangkan rasanya baik

00:11:27.450 --> 00:11:30.380
untuk semuanya hijau dan semuanya berfungsi.

00:11:30.410 --> 00:11:31.830
Luar biasa.

00:11:31.840 --> 00:11:32.470
Baiklah.

00:11:32.470 --> 00:11:35.440
Saya pikir itu bagus untuk saat ini di video berikutnya.

00:11:35.440 --> 00:11:38.670
Saya ingin berbicara dengan Anda sedikit tentang mengejek.

00:11:38.760 --> 00:11:39.850
Sampai jumpa di situ.

00:11:40.140 --> 00:11:40.600
Sampai jumpa.