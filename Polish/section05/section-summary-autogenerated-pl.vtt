WEBVTT

00:00:01.130 --> 00:00:02.890
Hej, znowu jest Bruno.

00:00:03.170 --> 00:00:05.780
O rany, to niewiarygodne.

00:00:05.930 --> 00:00:09.950
Uwielbiam tę możliwość, a wszystko wygląda tak prężnie i szybko.

00:00:09.950 --> 00:00:14.930
Dzięki tej nowej progresywnej aplikacji internetowej ludzie naprawdę polubią naszych nowych

00:00:14.930 --> 00:00:15.710
przyjaciół-robotów.

00:00:15.770 --> 00:00:16.540
Wielkie dzięki.

00:00:16.550 --> 00:00:21.010
Szczerze mówiąc byłeś tak dobry, że cieszę się na kolejne projekty z tobą.

00:00:23.240 --> 00:00:23.540
W porządku.

00:00:23.540 --> 00:00:25.580
Brunos zadowolony z naszej pracy.

00:00:25.580 --> 00:00:30.260
Mam nadzieję, że w tej sekcji dobrze się bawiłeś, poznając niektóre z rzeczy, które możemy

00:00:30.260 --> 00:00:32.600
zrobić, aby nasze aplikacje internetowe były szybsze.

00:00:33.760 --> 00:00:40.330
Po raz pierwszy rozmawialiśmy o optymalizacji kodu i idei ładowania tylko tego, czego

00:00:40.330 --> 00:00:45.620
faktycznie potrzebujemy dla użytkownika i niepotrzebnego dostarczania javascriptu do klienta.

00:00:46.540 --> 00:00:52.060
Rozmawialiśmy o tym, jak możemy to zrobić z podziałem na kody i korzystaniem z

00:00:52.060 --> 00:00:56.670
umiejętności, i wróciliśmy do potrząsania drzewem oraz pustki na użytek kodowania.

00:00:56.710 --> 00:01:04.810
Rozmawialiśmy także o unikaniu blokowania głównego wątku, czy to poprzez animacje, czy długotrwałe działania Javascriptu, mówiliśmy

00:01:05.020 --> 00:01:11.880
trochę o przeciekach pamięci i upewniamy się, że oczyszczamy się po zmianie stron,

00:01:11.880 --> 00:01:19.140
a następnie mówiliśmy o unikaniu wielokrotnego renderowania za pomocą reagowania być tak wydajnym, jak

00:01:19.140 --> 00:01:23.380
to tylko możliwe, w renderowaniu naszych komponentów.

00:01:23.390 --> 00:01:29.240
Następnie rozmawialiśmy o progresywnych aplikacjach internetowych, tym nowym pomysle, aby nasze aplikacje internetowe były jak

00:01:29.240 --> 00:01:34.000
najbliżej natywnych aplikacji, tak aby działały naprawdę dobrze z urządzeniami mobilnymi.

00:01:34.040 --> 00:01:41.650
Rozmawialiśmy o tym, jak potrzebowaliśmy HEG B. S. i coś, co nazywa się plikiem manifestu, aby wypełnić tę lukę.

00:01:42.080 --> 00:01:49.810
I w końcu rozmawialiśmy o pracownikach serwisowych i o tym, jak fajnie jest, że mamy teraz sposób, aby dostarczać strony

00:01:49.810 --> 00:01:55.490
internetowe w trybie offline dzięki mocy pracownika usługi i interfejsu API pamięci podręcznej.

00:01:55.990 --> 00:02:03.770
Teraz ukończyliśmy naszą wiedzę na temat tego, co możemy zrobić, aby poprawić wydajność.

00:02:04.060 --> 00:02:12.280
A ponieważ już omówiliśmy nasze optymalizacje sieci, mamy teraz ostatnią część optymalizacji zaplecza i jeden

00:02:13.620 --> 00:02:15.840
z moich ulubionych tematów.

00:02:15.880 --> 00:02:19.740
Kolejny świetny temat, który moim zdaniem naprawdę Ci się spodoba.

00:02:19.770 --> 00:02:23.390
Nie martw się, dotrzemy do tego później w trakcie kursu.

00:02:23.580 --> 00:02:26.460
To są naprawdę zabawne ekscytujące tematy.

00:02:26.750 --> 00:02:29.440
Ale na razie wszyscy potrzebujemy przerwy.

00:02:29.460 --> 00:02:31.530
Dobra robota do tej pory.

00:02:31.530 --> 00:02:32.920
Jest o wiele więcej do pokrycia.

00:02:33.180 --> 00:02:34.080
Zobaczę w następnym.