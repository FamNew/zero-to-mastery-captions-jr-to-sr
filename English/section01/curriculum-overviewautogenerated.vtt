WEBVTT

00:00.770 --> 00:04.980
Hellooo! Let's walk through the course curriculum.

00:05.070 --> 00:09.330
So you have an idea of what to expect in this course.

00:09.330 --> 00:16.410
Now some of these topics may seem intimidating at first, but they're all connected and they are all key

00:16.410 --> 00:20.220
components that make you a top level developer.

00:20.230 --> 00:27.780
We're going to go step by step, working on real life problems, writing code, practicing so that we can

00:27.780 --> 00:31.790
feel confident with each one of these topics.

00:31.800 --> 00:39.030
Now the first part of the course is going to cover SSH. And in this SSH section, we're going to learn

00:39.030 --> 00:47.760
about the SSH command. How to access remote computers how to connect to a server that is in another

00:47.760 --> 00:49.200
part of the world.

00:49.500 --> 00:55.680
We're going to learn about encryption about symmetrical and asymmetrical encryption as well as hashing.

00:56.490 --> 01:03.630
And we're also going to learn about SSH keys about generating SSH keys, what public and private keys

01:03.630 --> 01:06.690
are, and how to manage them on the server.

01:06.690 --> 01:12.420
We're going to have some fun exercises where your app was just deleted off of a server in the middle

01:12.420 --> 01:18.980
of the night and you have to move all your project falls back onto the server using SSH.

01:19.170 --> 01:25.390
And we're also going to set up GitHub with SSH, after a nice short section to start us off.

01:25.440 --> 01:32.850
We're then going to dive into a big big topic of performance optimization. And this is so big that I've

01:32.850 --> 01:34.930
divided this into three parts.

01:35.280 --> 01:38.450
The first part will be network optimizations.

01:38.730 --> 01:45.420
We're going to talk about how we can minimize our files and improve delivery of our application. And

01:45.420 --> 01:51.390
then we're going to learn about optimizations about the critical render path how to improve it.

01:51.420 --> 01:54.120
So our Web site can load fast.

01:54.120 --> 01:59.370
We're going to learn about progressive webapps, and about optimizing code, and we're going to help Kaiko

01:59.370 --> 02:04.440
Corp. actually improve their company website as well as their robofriends app.

02:04.650 --> 02:10.500
We're going to make a progressive webapp that works offline and can even be submitted to the App Store

02:10.800 --> 02:14.160
using just javascript, HTML and CSS.

02:14.250 --> 02:20.370
But we're also going to learn about interesting topics like code splitting and making reactive/redux

02:20.370 --> 02:23.490
applications fast through smart rendering.

02:23.580 --> 02:29.750
We'll then finish our complete understanding of performance optimizations by working on the back end

02:29.870 --> 02:30.950
optimizations.

02:31.020 --> 02:39.510
Talking about content delivery networks, scaling databases, compressing our responses, caching, and finally

02:39.570 --> 02:46.500
load balancing where we'll implement a load balancer and actually do some load testing on our project.

02:46.500 --> 02:50.360
By the end of it you're going to be a performance guru.

02:50.850 --> 02:53.740
We are then going to get into react and redux.

02:54.030 --> 03:00.960
The most popular content libraries to build single page applications. We'll first have a nice introduction

03:00.960 --> 03:01.590
to react

03:01.590 --> 03:07.560
if this is your first time learning it. And then we're going to quickly dive into redux talking about

03:07.560 --> 03:12.530
state management and how to structure your apps so that they can grow.

03:12.540 --> 03:18.930
And we also add a nice small section on bundling, on using the latest webapp, as well as an up and

03:18.930 --> 03:26.410
comer like parcel to bundle our files and make our production bundle optimized. By the end of it,

03:26.550 --> 03:32.730
you're going to feel comfortable with react/redux as well as setting up your projects with things like

03:32.930 --> 03:33.810
that.

03:34.260 --> 03:39.970
We then get into a topic that is so important but also often forgotten

03:40.080 --> 03:47.160
when you first starting out, testing. Companies love testing, and if you know how to test, how to write

03:47.160 --> 03:51.950
unit tests, integration tests you write better software.

03:52.080 --> 03:56.850
We're going to start off by learning about the testing landscape in the current web developer world.

03:57.210 --> 04:02.730
What tools to use, what libraries there are, how to set everything up, and then we're going to work with

04:02.790 --> 04:06.240
just one of the top libraries to use for testing to.

04:06.270 --> 04:08.850
Synchronous as well as asynchronous tests.

04:09.000 --> 04:09.420
Right.

04:09.440 --> 04:17.940
Mock's and have coverage reports. We're then going to dive into writing tests for our react app and making

04:17.940 --> 04:25.350
sure that we use things like snapshot testing, an enzyme to write smart tests that avoid bugs in our

04:25.350 --> 04:26.810
application.

04:27.000 --> 04:33.420
By the end of it you can know the entire testing landscape, and feel comfortable reading any tests that

04:33.420 --> 04:34.500
come your way.

04:36.360 --> 04:43.500
We then dive into one of the hottest topics coming out of last year's web developer environment, typescript.

04:43.510 --> 04:49.450
We're going to learn about static typing and why javascript didn't have static typing, and instead is

04:49.450 --> 04:55.120
dynamically typed, and then we're going to learn how to use typescript, what types there are, and how to

04:55.120 --> 04:56.980
add them to your project.

04:56.980 --> 05:03.310
We're then going to finally add typescript into our react project and see how to add it to your own

05:03.310 --> 05:04.060
projects.

05:04.210 --> 05:07.770
By the end, once again, you'll master this topic.

05:10.060 --> 05:14.800
From there we dive into a short section on single page applications.

05:14.800 --> 05:19.890
We're going to talk about server side rendering the original way to display web sites.

05:19.960 --> 05:25.020
Why it was useful and why it still may be useful in some companies still need it.

05:25.510 --> 05:30.500
We're going to talk about single page applications and client side rendering.

05:30.500 --> 05:35.380
Again the benefits impose when you want to implement one over the other.

05:35.410 --> 05:38.560
I'm going to show you how to implement server side rendering and react.

05:38.560 --> 05:42.220
And again, what the pros and cons are of each one.

05:42.220 --> 05:44.920
We're going to dive in quickly into next.js

05:45.010 --> 05:51.600
Yes a library that allows us to write server side dynamic applications very nicely.

05:51.740 --> 05:57.730
By the end you'll be ready to make decisions on whether you want a single page app or a server side

05:57.820 --> 06:02.070
rendered application for your project.

06:02.110 --> 06:06.120
From there we dive into one of my favorite topics, security.

06:06.130 --> 06:12.130
We're going to cover a diverse range of topics including front end security where we talk about cross

06:12.130 --> 06:18.340
sites cryptic, injection attacks like SQL injections and will actually practice those to see how they

06:18.340 --> 06:19.300
work.

06:19.390 --> 06:25.660
We can talk about back end security and what the best practices are in order for us to manage sensitive data.

06:26.110 --> 06:26.800
From there

06:26.800 --> 06:31.960
we learn also a few ethical hacking techniques so that we can protect ourselves when we're building

06:31.960 --> 06:38.350
our up so that you feel confident by the end that you're building secure applications using the latest

06:38.470 --> 06:40.230
tips and tricks.

06:40.390 --> 06:45.830
And then we get into docker, a tool that's going to absolutely amaze you.

06:46.150 --> 06:52.600
We're going to learn about containers and how containers now revolutionized how companies structure

06:52.600 --> 06:57.510
their applications. We're actually going to write docker files and create our own containers and then

06:57.520 --> 07:05.950
we're going to use docker compose to compose a ready server a postgres database and an API server all into

07:05.950 --> 07:09.920
one so that they all run from one connect. By the end of it

07:10.000 --> 07:14.570
we're going to feel very comfortable with docker whenever we deploy our applications.

07:17.500 --> 07:21.040
We then start learning about a new database.

07:21.060 --> 07:24.540
Redis is one of the most popular and often used databases

07:24.650 --> 07:30.560
that is a key value storage. We'll first dive into the topic of databases and the type of databases that we

07:30.560 --> 07:31.160
have.

07:31.330 --> 07:39.290
From there we'll spin up our own redis server learn how to use redis how to use the Redis CLI so that

07:39.380 --> 07:46.400
we're able to use Redis now for caching to make our web sites faster, as well as for session management. Something

07:46.400 --> 07:52.380
that will cover in the next topic. Using our smart brain app,

07:52.490 --> 07:58.120
we're going to create an entire dynamic part of the Web site that is user management.

07:58.160 --> 08:03.890
We're going to start off by creating a new profile page, and using this profile page we're going to learn

08:03.890 --> 08:11.030
about session based authentication where cookies would be used and also about token authentication such

08:11.030 --> 08:13.790
as using JWT tokens.

08:13.940 --> 08:18.140
We're going to learn about each one of those what the pros and cons are of each.

08:18.140 --> 08:23.080
And then we're actually going to implement a secure authentication flow that you can implement and any

08:23.090 --> 08:24.310
app that you choose.

08:24.420 --> 08:29.610
We're going to use Redis for session management so that we have protected routes.

08:29.660 --> 08:35.450
And this way any time we have a sign in functionality, we have members we can use this system knowing

08:35.450 --> 08:40.600
that it's secure and it follows best practices. Yes!

08:40.640 --> 08:41.990
We still have more topics.

08:41.990 --> 08:44.670
This course is quite extensive.

08:44.690 --> 08:52.250
We then are going to talk about AWS. What Amazon Web Services is and also what infrastructure as a service

08:52.380 --> 08:59.960
and platform as a service has done in terms of allowing companies to really scale or work as efficiently

09:00.050 --> 09:03.290
as Google or Amazon or Microsoft.

09:03.560 --> 09:09.890
And then we're going to learn about this exciting serverless technology called AWS Lambda which allows

09:09.890 --> 09:16.190
us to run just simple functions in the cloud and we're going to use the serverless framework to actually

09:16.190 --> 09:20.290
implement AWS Lambda into our smart brain application.

09:20.300 --> 09:26.030
By the end of it you're going to feel confident working with AWS and creating functions that live in

09:26.030 --> 09:35.080
the cloud. After we've tried everything together and created the overall picture of how to write good

09:35.260 --> 09:42.220
software, good applications, we're then going to talk about how to actually create good processes. How

09:42.220 --> 09:44.860
to actually deploy to production.

09:44.860 --> 09:49.930
We're going to talk about good continuous integration practices and then also about continuous delivery

09:49.990 --> 09:56.320
and continuous deployment so that when you are put on a project you know how to implement good practices

09:56.710 --> 10:03.700
and good tools like Circle CI to make sure that from the start. Your developer team has the right

10:03.700 --> 10:10.120
tools and the right processes in place to be successful to write applications with less bugs and cleaner

10:10.120 --> 10:10.620
code.

10:12.500 --> 10:20.160
And then a little extra bits area where I talk about some of my personal experiences and opinion.

10:20.180 --> 10:26.060
I talk about code analysis and what to do when you first start off on a project where you have a ton

10:26.060 --> 10:28.850
of files and you didn't write the code yourself.

10:28.880 --> 10:33.240
We're going to talk about tips and tricks to really optimize that.

10:33.470 --> 10:38.270
I'm going to talk a bit about best practices things that we couldn't include in the other sections.

10:38.270 --> 10:45.590
And then a couple other little extra bits so that by the end of it by the end of the entire course all

10:45.590 --> 10:48.190
of these things will make sense to you.

10:48.380 --> 10:53.390
You'll be able to implement all of these sayings into your own projects into your own company and you'll

10:53.390 --> 10:55.940
know how each and every one of them are connected.

10:56.030 --> 11:02.080
But most of all by the end of it you're going to learn things that took me years and years to learn.

11:02.600 --> 11:07.030
And the next video your first day of work is finally going to start a Kaiko Corp.

11:07.340 --> 11:10.320
Enjoy the projects, enjoy the exercises.

11:10.340 --> 11:15.300
We're going to be building a lot of fun things have fun and enjoy the ride.
