WEBVTT

00:01.740 --> 00:06.360
Andre more slides can you just get to coding and I know what you're thinking.

00:06.480 --> 00:12.810
I know the easiest thing to do is for me to just go to my sublime tax and start coding so he can follow

00:12.810 --> 00:13.570
along.

00:13.680 --> 00:21.730
But I really want this course to build the foundation because I can do all the coding in the world.

00:21.870 --> 00:27.780
But if you have these fundamentals and we talk about them first and as you code along with me or you

00:27.780 --> 00:36.010
do the exercises you truly understand them from the basics then you're going to retain a lot more information.

00:36.090 --> 00:42.300
So bear with me this is going to help you develop into a better developer.

00:42.390 --> 00:45.220
This is the last slide before we get into some coding.

00:45.480 --> 00:47.880
I just want to show you one last part.

00:48.590 --> 00:55.220
And that is our unified picture of testing now that we've talked about everything we're going to be

00:55.220 --> 00:57.340
writing tests for our robo friends app.

00:57.460 --> 01:00.600
And if you remember we have our main file app dog.

01:00.650 --> 01:01.820
Yes.

01:01.910 --> 01:08.720
And the way we're going to write tests for it and other subcomponents and maybe even reducers and other

01:08.720 --> 01:11.440
parts of the redux environment.

01:11.810 --> 01:15.600
Well we're simply going to do the dot test Dot.

01:15.740 --> 01:16.330
Yes.

01:17.350 --> 01:22.590
Which with our create react up set up is going to say that this is a test file.

01:22.630 --> 01:24.090
Let me run it through.

01:24.160 --> 01:32.940
Just keep in mind that tests are meant for devolvement you're never going to ship your test libraries

01:32.940 --> 01:35.140
or your test code into production.

01:36.470 --> 01:43.430
Most of the time you're saving these libraries with the flag dash dash saved Dev and NPM because they're

01:43.520 --> 01:49.730
only used for development in development as you're writing your tests are as you're writing your code.

01:49.850 --> 01:56.960
You have something like just running in the background that has the scaffolding the assertion library

01:57.230 --> 02:08.210
the test runner the spies Moxon stubs that we need to read the tests run the tests see which tests pass

02:08.210 --> 02:09.060
or fail.

02:09.140 --> 02:17.000
And also I'll put a code coverage so that we can work on our project and when it's ready it passes all

02:17.000 --> 02:17.840
the tests.

02:17.900 --> 02:20.210
It has all the nice tests we need.

02:20.210 --> 02:23.090
We can then send it to production.

02:23.090 --> 02:27.280
Without all this stuff that production doesn't need.

02:27.830 --> 02:31.300
And remember that we're running these tests.

02:31.400 --> 02:39.330
We can't run them in the DOM we can run them in a headless browser or we can just run them in a desktop

02:39.770 --> 02:41.430
which we are going to do.

02:41.480 --> 02:46.400
We're going to use just because it's the fastest and the simplest to run our tests.

02:47.070 --> 02:48.020
All right.

02:48.300 --> 02:50.270
Time to get to coding.

02:50.580 --> 02:52.290
It's going to be a lot of fun.

02:52.380 --> 02:53.430
I'll see in the next video.
