WEBVTT

00:00:01.540 --> 00:00:06.550
Porozmawiajmy o ostatecznym typie testów automatyzacji testów.

00:00:06.820 --> 00:00:10.370
Teraz możesz również usłyszeć termin "test od końca do końca".

00:00:10.570 --> 00:00:12.330
Jeśli chodzi o testy automatyzacji.

00:00:12.550 --> 00:00:15.130
Pamiętaj więc o testach automatyzacji.

00:00:15.280 --> 00:00:22.730
Tak jak powiedziałem wcześniej, testy interfejsu użytkownika są zawsze uruchamiane w przeglądarce lub

00:00:23.670 --> 00:00:31.280
środowisku podobnym do przeglądarki, ponieważ symulują zachowanie użytkowników w takich środowiskach, na przykład przewijanie pisania.

00:00:31.440 --> 00:00:38.460
I wreszcie potrzeba upewnienia się, że te scenariusze rzeczywiście działają z punktu widzenia

00:00:38.460 --> 00:00:39.650
użytkownika końcowego.

00:00:39.660 --> 00:00:41.040
To ważny test Ray.

00:00:41.220 --> 00:00:48.850
Jeśli Twój proces kasowania zawiera błąd, najlepszym sposobem na prawdopodobnie przetestowane jest przejście przez ten proces i

00:00:48.870 --> 00:00:53.400
upewnienie się, że użytkownicy mogą kupić to, co sprzedajesz.

00:00:53.830 --> 00:01:00.450
Teraz w idealnym świecie mamy testy automatyzacji wszędzie, a jeśli którekolwiek z nich zawiodą, wiemy, że nasza aplikacja internetowa

00:01:00.450 --> 00:01:01.350
nie działa.

00:01:02.490 --> 00:01:08.880
Należy jednak pamiętać, że te testy są najtrudniejsze do skonfigurowania.

00:01:08.910 --> 00:01:16.770
Wyobraź sobie, że tworzysz środowisko do uruchamiania testu na różnych komputerach, ponieważ użytkownicy mają

00:01:16.890 --> 00:01:23.860
różne komputery, różne urządzenia, różne telefony, różne typy przeglądarek, różne wersje.

00:01:23.910 --> 00:01:25.980
Jak naprawdę możesz to sprawdzić?

00:01:25.980 --> 00:01:30.550
Chodzi mi o to, że możesz, ale to naprawdę bardzo trudne.

00:01:30.840 --> 00:01:36.650
I dlatego jest tak wiele usług, które zapewniają ci testowanie automatyzacji.

00:01:36.680 --> 00:01:38.330
Oto przykład kilku z nich.

00:01:40.100 --> 00:01:40.570
Tak.

00:01:40.660 --> 00:01:47.880
To tylko kilka z nich, takich jak internetowy tester Nightwatch I O test cafe koszmar Cypress.

00:01:47.890 --> 00:01:54.760
Lista naprawdę idzie na testowanie automatyzacji to coś, co zwykle znajduje się tylko w większych firmach, które

00:01:54.760 --> 00:02:00.910
mają budżet naprawdę wydawać pieniądze na to, ponieważ jest tak wiele przypadków i są

00:02:00.910 --> 00:02:07.320
one tak drogie w implementacji, że niektórzy deweloperzy idą całą swoją karierę bez pisania test automatyzacji.

00:02:07.360 --> 00:02:10.380
Ale nadal chcę to uwzględnić, ponieważ jest to ważny temat.

00:02:10.690 --> 00:02:12.210
Oto krótki podskok.

00:02:12.430 --> 00:02:20.120
Jeśli chcesz tylko zacząć i nie martwić się o przeglądarkę i mieć wszystkie narzędzia w jednym prawdopodobnie teście,

00:02:20.450 --> 00:02:22.480
Skeff jest najlepszym wyborem.

00:02:22.720 --> 00:02:30.160
Lub jeśli chcesz ten, który ma najlepszą dokumentację online, wszystkie sterowniki internetowe IO są naprawdę świetne i

00:02:30.160 --> 00:02:38.320
jeśli chcesz naprawdę proste sposoby zautomatyzować działania użytkowników lub zrobić coś fajnego, jak skrobanie w Internecie, podczas gdy koszmar

00:02:38.410 --> 00:02:40.560
Deji jest całkiem niezły.

00:02:40.850 --> 00:02:47.980
Teraz ważna sprawa z testowaniem automatyzacji polega na tym, że tak jak sugeruje inna nazwa

00:02:48.220 --> 00:02:56.800
i chcesz testować, chcesz przetestować cały proces swojego interfejsu i możesz zastanowić się, dlaczego dostaniemy maszynę, aby to zrobić.

00:02:56.810 --> 00:03:01.430
Dlaczego nie możemy po prostu zatrudnić ludzi do testowania i testowania automatyzacji.

00:03:01.670 --> 00:03:09.380
A tak się dzieje, że wiele firm zamiast pisać te skrypty, po prostu zatrudnia ludzi do testowania automatyzacji, aw

00:03:09.380 --> 00:03:16.310
niektórych firmach masz ludzi takich jak testerzy, którzy robią to za Ciebie i upewniają się, że aplikacja

00:03:16.310 --> 00:03:18.440
działa zgodnie z przeznaczeniem.

00:03:19.400 --> 00:03:24.880
Są też plusy i minusy obu tych rzeczy, a to naprawdę zależy

00:03:25.120 --> 00:03:27.430
od firmy i środowiska pracy.

00:03:27.430 --> 00:03:34.360
Najważniejszą rzeczą, którą chciałbym zasugerować, jest to, że chcemy stworzyć dwa różne

00:03:34.750 --> 00:03:42.330
procesy testowania dla testów jednostkowych i testów integracyjnych oraz całkowicie odrębny dla tych testów.

00:03:42.340 --> 00:03:44.200
Testy automatyzacji.

00:03:44.440 --> 00:03:51.700
Dzieje się tak dlatego, że testy interfejsu użytkownika trwają dłużej, zwłaszcza jeśli martwimy się o różne przeglądarki i

00:03:51.700 --> 00:03:57.200
różne urządzenia, a także o wiele więcej pieniędzy, aby uruchomić je wielokrotnie.

00:03:57.310 --> 00:04:04.870
Więc chcesz często uruchamiać testy jednostkowe i testy integracyjne prawdopodobnie w terminalu, ponieważ zapisujesz zmiany w

00:04:05.170 --> 00:04:12.380
kodzie w lokalnym środowisku i możesz uruchamiać testy interfejsu użytkownika raz dziennie lub kilka

00:04:12.380 --> 00:04:20.730
razy w tygodniu lub może tuż przed łączysz się z główną gałęzią, zanim ją udostępnisz do produkcji.

00:04:20.740 --> 00:04:24.370
Na razie jednak do testowania automatyki.

00:04:24.480 --> 00:04:25.960
Zobaczę w następnym.

00:04:26.120 --> 00:04:26.310
Prawdopodobnie.