WEBVTT

00:01.920 --> 00:02.840
Welcome back.

00:03.090 --> 00:08.950
In this video let's talk about all the tools we can use to actually run our tests.

00:09.210 --> 00:17.800
Remember heart tests are just javascript so we could just write simple javascript files with maybe if

00:17.820 --> 00:25.880
statements that says you know if some function as these two numbers together then return success.

00:25.890 --> 00:28.270
Otherwise return tests fail.

00:28.410 --> 00:36.150
So we could do that but that's tedious and as developers we want to use existing tools to make our experience

00:36.300 --> 00:39.980
or speed of development faster.

00:39.980 --> 00:41.390
So this is going to get overwhelming.

00:41.390 --> 00:42.960
But let's look at testing tools.

00:44.430 --> 00:52.110
I tried to organize for you a way to think about tests and the testing environment and the web development.

00:52.380 --> 00:58.290
So I'm going to explain this and if this is a little complicated at first door you were going to come

00:58.290 --> 01:02.500
back to this and go over this at the end of the section and it's all going to make sense.

01:03.310 --> 01:09.550
So the very first thing we need in a testing tool is something called a testing library.

01:09.550 --> 01:11.310
Pretty self-explanatory.

01:11.350 --> 01:18.880
This is the scaffolding giving us the ability to use some function calls and some new methods for us

01:18.880 --> 01:21.320
to actually write our tests.

01:21.550 --> 01:26.620
Again think of this as scaffolding or building this structure around our tests.

01:27.500 --> 01:31.340
Probably the top three libraries for that is jazzmen.

01:31.640 --> 01:36.290
There's just and then there's something called moka.

01:36.460 --> 01:43.330
And like I said these are just NPM install libraries so they're available on NPM and you can add them

01:43.510 --> 01:46.350
to build to your scaffolding.

01:46.410 --> 01:53.830
The next thing that you need right over here is something called the nurse section library and in here

01:53.830 --> 01:58.420
we have again Jasmine that comes with its own assertion library.

01:58.420 --> 02:04.990
We have just once again that comes with its own assertion library and then Chye here that usually gets

02:04.990 --> 02:14.790
paired with Moka in order to have an assertion library an assertion library for provides functions that

02:14.800 --> 02:16.280
our assertion functions.

02:16.320 --> 02:17.670
I know that's confusing.

02:17.670 --> 02:25.580
It's essentially a tool to allow you to test that the variables contain the expected value.

02:25.590 --> 02:33.140
Now that still sounds confusing so let me show you where on the Chye assertion library here.

02:33.280 --> 02:40.690
And you can see over here that they use something called BDD or behaviorial driven devolvement and by

02:40.840 --> 02:49.730
installing this library we can use all these words and they just look like basic English what an assertion

02:49.730 --> 02:59.220
in library does is says expect that this object just contains a equals one and then it Cheyne's all

02:59.220 --> 03:02.670
these words together to test our assumption.

03:02.670 --> 03:11.530
So let's say expect that this object to not have property be a breeze like English right.

03:11.640 --> 03:15.500
It simply tests condition one against condition two.

03:15.780 --> 03:23.240
So this is going to return false because you're right this object won't have property be and they have

03:23.270 --> 03:28.940
a lot of things that we can't add.

03:28.960 --> 03:36.670
We see that another one is expect this object to have all keys a and b it kind of reads like English

03:36.880 --> 03:41.880
and this makes our tests really easy to read and understand.

03:42.000 --> 03:49.470
The next thing we need for our tests is something called a test runner and a test runner is something

03:49.470 --> 03:52.330
that allows us to run our tests.

03:52.500 --> 03:59.910
Remember if we go back to our app we had to do NPM run

04:03.190 --> 04:12.470
and this runs our test let's press a to run all the tests and something is magically running all these

04:12.490 --> 04:12.910
tests.

04:12.910 --> 04:14.930
That's what a test runner does.

04:16.140 --> 04:23.010
Going back to our slide again we now see that jazzmen and just include a test runner in their library

04:23.430 --> 04:26.560
and then Moka also has its own test runner.

04:26.670 --> 04:30.210
And then I've added another one over here which is called karma.

04:30.370 --> 04:31.220
Yes.

04:31.440 --> 04:36.990
And this allows you to run tests in the browser.

04:38.900 --> 04:40.020
What does that mean.

04:40.870 --> 04:45.310
Well a test runner can run tests in different environment.

04:45.310 --> 04:46.830
Let's have a look.

04:46.910 --> 04:54.960
You see usually our javascript works with the Dom to make our webapp what it is.

04:56.220 --> 05:04.010
But when we're running tests and and this is what karma does allows you to run your tests on the browser.

05:05.140 --> 05:09.870
But why wouldn't we just always run our tests on the browser.

05:09.880 --> 05:12.730
Well that is because it takes a lot of time.

05:12.730 --> 05:17.380
We have to run every single test through the browser using the browser API.

05:18.700 --> 05:20.150
Ideally when we run tests.

05:20.170 --> 05:27.280
It's super super quick because most tests are set up so that if a developer hits save on their terminal

05:27.490 --> 05:28.860
it's going to run to the test.

05:29.020 --> 05:33.410
If every time they needed to start up the browser and run through everything.

05:33.670 --> 05:36.070
Well that would be really really slow.

05:36.460 --> 05:44.290
So other options exist such as puppeteer by Google which is what we call a headless browser.

05:44.380 --> 05:52.640
It's a node library which provides a high level API to control the headless version of their browser.

05:52.660 --> 05:58.690
So think of it as a stripped down browser that makes your tests a little bit faster.

05:58.900 --> 06:05.870
But it can also be configured to do things such as generate screenshots PDSA of pages.

06:06.130 --> 06:08.580
It can automate form submissions.

06:08.620 --> 06:10.930
You can do UI testing with it.

06:10.930 --> 06:13.420
You can monitor keyboard input.

06:13.450 --> 06:15.710
You can do a lot of cool things with it.

06:15.820 --> 06:18.290
And then finally we have something called japes dong.

06:18.550 --> 06:24.390
And just as the name suggests is an in javascript implementation of the DOM.

06:24.460 --> 06:29.130
So it's not the real Dom but AFAIK javascript version of it.

06:29.940 --> 06:37.950
I remember the DOM is that tree like structure that shows the nodes on our webpage and that's what makes

06:37.950 --> 06:39.220
up our UI.

06:39.450 --> 06:46.170
So just dumb implements this in javascript so we can have a dom like API to work without actually needing

06:46.170 --> 06:47.890
the browser.

06:48.010 --> 06:57.480
If we go back to our tests and let's run this again I'm going to run NPM run test you'll see over here

06:57.480 --> 07:05.200
that rÃ­os scripts test dash dash and head went by quickly but you saw that we are using japes Dom there

07:07.240 --> 07:11.400
so that our test run really really quick.

07:11.410 --> 07:11.940
All right.

07:13.910 --> 07:16.200
So that's a test runner.

07:16.250 --> 07:21.470
Next we have something called mock spies and Stubb's.

07:21.570 --> 07:25.800
And here again Jasmine and just come with their own version.

07:26.640 --> 07:32.730
And then if you're using something like Mocha just like you had to add an assertion on library you'll

07:32.730 --> 07:35.610
have to add something called Sign on God.

07:35.660 --> 07:39.780
Yes there are obviously other libraries but this is the most popular.

07:39.920 --> 07:47.900
Now what's all this mock spies and Stob business what spies provide for us.

07:47.900 --> 07:50.360
Information about functions.

07:50.360 --> 07:54.650
How many times they were called in what cases and by who.

07:54.650 --> 08:03.710
Stubbing replaces selected functions with a function to ensure that the expected behavior happens and

08:03.710 --> 08:11.380
then Mock's is kind of like faking a function or a behavior to test different parts of a process.

08:11.390 --> 08:14.870
So this might be really really good for integration tests.

08:14.870 --> 08:21.950
Now I know that can get a little bit confusing so let's take a look at sign on sign on over here if

08:21.950 --> 08:28.050
you go to their documentation let's click on Stubb's free scroll down we see that.

08:28.250 --> 08:30.850
What does a stub doing.

08:30.890 --> 08:36.260
We're simply using the library sign on Dot stub which is a function.

08:36.290 --> 08:45.920
Now we can use it in a way where this function can be called with arguments 42 and make return one so

08:45.920 --> 08:51.680
that when we run callback 42 it returns 1.

08:51.940 --> 08:57.120
And when we do callback dot with arx it throws an error.

08:57.220 --> 09:00.950
Again this is something that will go over later in the videos.

09:01.090 --> 09:06.830
But you see here that stub is a weekend fake functions and make them do what they expect.

09:08.840 --> 09:13.950
For example sign on can be used to fake a server during our test.

09:14.060 --> 09:18.890
We don't necessarily want to send requests to the server every time we're running tests.

09:18.890 --> 09:26.540
But ideally if a function is using a server we can fake it with a stub so that the function still runs

09:26.540 --> 09:30.660
and we can just test that one piece of code.

09:30.710 --> 09:36.430
Like I said this is really hard to explain without a little bit of a demo but don't worry we're going

09:36.430 --> 09:39.670
to get there and then the final piece of the puzzle.

09:39.740 --> 09:45.960
We've talked about scaffolding about assertion libraries we talked about tests runners we talked about

09:45.980 --> 09:48.820
these Stobbs Moxon's spies.

09:48.830 --> 09:55.670
Finally we have something called code coverage and code coverage is provided by libraries like Istanbul

09:55.880 --> 10:02.410
just has code coverage already included but has actually Istanbul running underneath the hood.

10:04.010 --> 10:07.230
And let me show you what a code coverage might look like.

10:09.450 --> 10:15.690
Luckily for us we can just do NPM test dash dash dash dash coverage and don't worry we'll talk about

10:15.930 --> 10:18.550
how we can do this in our apps.

10:18.630 --> 10:21.730
But if I run this you see the just Dom here.

10:23.630 --> 10:31.670
I get an output file of the coverage and you see over here that I have my Roble friends up and I have

10:31.670 --> 10:38.600
some green some red some yellows and this is a test coverage that shows me what percentage of the statements

10:38.660 --> 10:44.300
the branches the functions are covered with tests you see here that I've written some tests for the

10:44.330 --> 10:51.860
Constans thought file some actions that just file and also for some of our components of our card list

10:51.860 --> 10:55.640
components and that we have 100 percent coverage for those.

10:55.640 --> 11:02.840
But then we also have things like the heterogeneous file that is missing some test and it even shows

11:02.840 --> 11:05.350
us which lines were missing.

11:05.930 --> 11:14.600
And that is Istanbul underneath the hood giving us a report of where we're missing tests now.

11:14.810 --> 11:21.740
Although these are a lot of libraries they all have the same goal in mind and they all actually are

11:21.740 --> 11:24.640
written in very similar fashion.

11:24.680 --> 11:30.190
So once you know one it is really really easy to pick up another one.

11:30.200 --> 11:31.970
Don't get overwhelmed by this.

11:32.060 --> 11:36.950
Just like with anything there's a lot of tools for the job but we'll come back to this so it all makes

11:36.950 --> 11:37.740
sense in the end.

11:37.820 --> 11:41.330
And just keep in mind that the syntax is very similar.

11:41.570 --> 11:42.750
So you'll be just fine.

11:43.640 --> 11:49.370
And I also want to let you know that probably the most popular Jasmine needs to be very popular but

11:49.430 --> 11:52.280
it has now been overtaken by two things.

11:52.280 --> 11:58.280
One is just as you can see just as nice because it has everything in one place.

11:58.310 --> 12:04.530
You can just install this library and have all these little features that you need in a testing framework.

12:04.880 --> 12:14.170
Another popular one is Moka combined with Chye and sign on and this is again probably the most popular

12:14.170 --> 12:17.690
set up but that's also because just as a lot newer.

12:17.710 --> 12:24.460
Most of these libraries follow the idea of behavioral driven development which is we describe what a

12:24.460 --> 12:28.340
function does and say what behavior we expect out of them.

12:28.350 --> 12:31.390
You remember the Chye assertion right.

12:31.660 --> 12:40.200
If object has this properties we expect it to have this property a.

12:40.440 --> 12:42.610
All right does your head hurt yet.

12:43.870 --> 12:51.130
Luckily for us if it wasn't for react up we'd have to NPM install all of these again set them up and

12:51.130 --> 12:56.940
add them to our NPM scripts to run all these tests and test coverages.

12:56.960 --> 13:02.940
But as you can see with create re-act up we have everything out of the box.

13:04.120 --> 13:09.790
Again the best minds in the community are working on maintaining CCRI react up to always keep it up

13:09.790 --> 13:13.330
to date as all of these libraries update as well.

13:14.360 --> 13:18.650
Don't worry though I'll show you in the outcoming videos how to actually set this up yourself as well.

13:19.800 --> 13:25.400
One other note in our tests over here CCRI react up.

13:25.400 --> 13:32.950
Use is just and that's because just was created by Facebook and if you remember re-act was also default

13:32.950 --> 13:40.450
by Facebook which is kind of nice because they use it in their own production environment and these

13:40.450 --> 13:45.030
tools are used together to work really really nicely.

13:45.210 --> 13:52.650
And by the way there is other testing libraries we have Eva that does parallelism really really well

13:52.650 --> 13:55.720
which means it ran tests run tests really really fast.

13:55.860 --> 14:00.660
And then you have something like tape that is really low level simple light library.

14:00.660 --> 14:03.400
But as I said before don't get overrun.

14:03.570 --> 14:10.290
In short if you get anything from this video is that if you just want to get started and looking for

14:10.290 --> 14:17.690
a fast framework that can handle everything and has everything in one wall just use just if you want

14:17.700 --> 14:27.290
a very flexible extendable configuration where you can plug in some things then use Moka Moka is a little

14:27.290 --> 14:33.590
harder to set up because of all these things that we need to add on but it's more flexible.

14:33.740 --> 14:36.560
And like I said open two extensions.

14:36.590 --> 14:43.180
One last note in our tests we're going to use two things that are sort of unique to react.

14:43.220 --> 14:49.190
One is something called snapshot testing that comes with just which allows us to do some really cool

14:49.190 --> 14:52.110
things that are going to show you later on.

14:52.550 --> 14:59.810
And then another library called enzyme which was created by air BMB and helps us write tests better

14:59.810 --> 15:01.220
for Riak components.

15:01.520 --> 15:07.840
Don't worry I'm not just showing you these things because I think they're cool and trendy these were

15:07.930 --> 15:13.260
implemented and most Riak projects that you're encounter and it's pretty much become the standard in

15:13.300 --> 15:16.000
the re-act ecosystem to use these libraries.

15:16.000 --> 15:17.270
So we're going to use them too.

15:17.520 --> 15:21.500
At the end of the day though we can agree on one thing.

15:21.550 --> 15:26.020
All these libraries have really cool logos Hosie and the next one.

15:26.350 --> 15:26.620
But by.
