WEBVTT

00:00:01.970 --> 00:00:06.420
Dan selamat datang kembali saatnya untuk akhirnya menerapkan beberapa pemecahan kode.

00:00:06.830 --> 00:00:08.480
Mari kita lihat file-file kita.

00:00:09.560 --> 00:00:16.870
Untuk menggunakan pemisahan kode Kita perlu mempelajari sintaks baru walaupun sebenarnya bukan sintaks baru.

00:00:16.970 --> 00:00:19.730
Tapi ini kata kunci impor ini.

00:00:19.730 --> 00:00:24.050
Biasanya itu di bagian paling atas file dengan membuat aplikasi aksi ulang.

00:00:24.110 --> 00:00:30.680
Jika kita meletakkan impor di mana saja di dalam kode kita sehingga tidak di bagian

00:00:31.550 --> 00:00:40.280
atas file itu akan tahu bahwa NIE ini adalah impor dinamis dan apa artinya bahwa saya hanya akan mengimpornya ketika sepotong

00:00:40.280 --> 00:00:45.480
kode diminta dan ini terjadi di bawah kap dengan jalan apa.

00:00:45.560 --> 00:00:53.700
Jadi dengan menggunakan impor kita secara otomatis kirim ke kode split yang super bagus kali ini.

00:00:54.170 --> 00:00:55.430
Ayo pergi ke Doug.

00:00:55.460 --> 00:00:56.600
Iya nih.

00:00:56.600 --> 00:01:03.870
Dan untuk memulai dengan pemecahan kode sekarang di sini di Brender dengan pemecahan kode.

00:01:03.990 --> 00:01:05.430
Mari kita komentari ini.

00:01:05.490 --> 00:01:17.920
Kami menginginkan sesuatu yang berbeda dengan pemecahan kode, idealnya kami dapat melakukan ini jika data ini merutekannya

00:01:19.690 --> 00:01:22.170
memanggil halaman 1.

00:01:22.360 --> 00:01:32.520
Kita akan mengembalikan halaman 1 pada perubahan rute sama dengan Daut ini pada perubahan rute.

00:01:32.530 --> 00:01:33.160
Baiklah.

00:01:33.160 --> 00:01:39.580
Itu tidak terlihat berbeda dan itu karena persis sama tetapi karena ini adalah halaman

00:01:39.580 --> 00:01:40.200
default.

00:01:40.330 --> 00:01:41.710
Tidak apa-apa.

00:01:41.710 --> 00:01:43.910
Bagian selanjutnya berbeda.

00:01:43.990 --> 00:01:45.250
Kita

00:01:47.600 --> 00:02:06.040
dapat mengatakan lagi mengembalikan komponen dot state DOT ini pada kendaraan pergantian jalan untuk memulai pro-perubahan Holy Moly apa yang baru saja terjadi.

00:02:06.140 --> 00:02:09.170
Apakah ini diizinkan?

00:02:09.640 --> 00:02:17.230
Saya akan kembali ke sini, tetapi untuk sekarang perlu diingat bahwa semua yang kita lakukan hanya mengatakan Rander

00:02:17.230 --> 00:02:25.080
halaman satu jika rute adalah apa pun kecuali Page 1 maka kita perlu melakukan semacam bisnis lucu di sini.

00:02:25.400 --> 00:02:26.970
Dan biarkan saya menutup ini.

00:02:27.720 --> 00:02:34.200
Sekarang pertama-tama kita melihat bahwa ada komponen DOT negara dari mana datangnya.

00:02:34.500 --> 00:02:36.160
Yah kami membuatnya.

00:02:36.300 --> 00:02:46.690
Kami mengatakan bahwa sekarang kami memiliki komponen yang disebut state dan komponen ini sekarang akan memberikan ph 2 atau Page 3 untuk

00:02:46.710 --> 00:02:55.290
kami dan untuk saat ini kami dapat membiarkannya sebagai string kosong karena kami belum benar-benar memuat halaman 2

00:02:55.290 --> 00:02:56.620
atau pastry.

00:02:57.090 --> 00:03:06.440
Sekarang pada perubahan baris ini adalah di mana kita melakukan sesuatu yang sedikit berbeda tanpa pemisahan kode.

00:03:06.550 --> 00:03:11.110
Kami baru saja mengalami ini tetapi dengan pemisahan kode kami

00:03:16.390 --> 00:03:19.270
mulai menggunakan impor dinamis ini.

00:03:19.300 --> 00:03:32.070
Saya mengatakan kepada Anda tentang kita akan memiliki logika yang sama jika rute sama dengan halaman 1 van negara ini ditetapkan dengan baik hanya

00:03:32.070 --> 00:03:42.550
memiliki rute yang sama dengan diulang karena untuk Halaman 1 kami hanya ingin menjaga semuanya tetap sama seperti yang

00:03:42.700 --> 00:03:50.000
kami miliki sebelumnya untuk dua lainnya meskipun yang akan kita impor secara dinamis.

00:03:50.320 --> 00:04:05.240
Kita akan memiliki rute yang memanggil panggilan ph ke dan di sini karena kita tidak akan memiliki ph yang terlalu mudah diakses karena kita

00:04:05.240 --> 00:04:12.050
tidak akan memuatnya karena faktanya kita tidak akan mengimpor apa

00:04:12.050 --> 00:04:13.600
pun. ini.

00:04:13.690 --> 00:04:20.920
Kita akan mengimpornya di sini secara dinamis ketika kita benar-benar mendapatkan javascript ini saat aplikasi kita berjalan di

00:04:20.920 --> 00:04:22.050
browser kita.

00:04:22.060 --> 00:04:26.340
Saat itulah kami ingin mengimpor atau memuatnya.

00:04:26.420 --> 00:04:29.120
Kita akan mengatakan impor

00:04:32.780 --> 00:04:38.660
dan omong-omong ini hanya berfungsi karena paket basah dan cara mengaturnya.

00:04:38.660 --> 00:04:44.750
Jika Anda mencoba melakukan ini hanya dalam javascript lama, itu akan menimbulkan kesalahan karena mereka tidak mengerti apa

00:04:44.750 --> 00:04:46.180
yang Anda coba lakukan.

00:04:46.190 --> 00:04:54.660
Kita akan mengatakan baik kita akan memuat halaman komponen.

00:04:54.820 --> 00:04:59.680
Jadi Anda tahu bahwa kami berubah dari mengimpor di sini ke mengimpor di sini.

00:05:01.910 --> 00:05:05.770
Dan ini tidak sinkron.

00:05:05.880 --> 00:05:10.320
Itu berarti itu mengembalikan janji.

00:05:10.320 --> 00:05:20.440
Jadi kita dapat menggunakan titik lalu untuk mengatakan apa halaman ini telah diimpor itu telah diunduh.

00:05:20.640 --> 00:05:33.480
Kemudian kita menerima halaman ke komponen dan dengan halaman yang diterima ini ke komponen kita sekarang dapat mengatur negara

00:05:33.930 --> 00:05:46.650
set titik ini untuk memiliki rute rute karena hanya halaman 2 tetapi juga memperbarui keadaan komponen yang kita miliki

00:05:46.650 --> 00:05:51.330
di sini untuk halaman yang sama.

00:05:51.330 --> 00:05:58.130
Jadi sekarang kita memiliki akses ke halaman ke komponen melalui status awal.

00:05:58.170 --> 00:06:02.240
Saya tahu ini terlihat sedikit aneh tapi itu hanya sesuatu yang harus Anda biasakan.

00:06:02.550 --> 00:06:04.600
Omong-omong, ini juga bisa menjadi nol.

00:06:04.620 --> 00:06:06.450
Tetapi untuk sekarang string kosong baik-baik saja.

00:06:06.450 --> 00:06:09.230
Kami tidak akan terlalu khawatir tentang hal itu.

00:06:09.330 --> 00:06:16.140
Sekarang kami memiliki halaman yang terlalu dapat diakses oleh kami karena jika rute tersebut adalah halaman dua

00:06:16.140 --> 00:06:25.480
kami akan mengimpor dan mengunduh komponen yang ditempelkan maka kami akan menerima komponen itu dan memperbaruinya ke keadaan kami saat ini sekarang di

00:06:25.510 --> 00:06:26.140
sini.

00:06:26.140 --> 00:06:27.460
Ini masuk akal, benar.

00:06:27.460 --> 00:06:34.990
Kami hanya mengatakan bahwa kami sedang mengakses komponen dot state DOT ini dan

00:06:34.990 --> 00:06:46.290
kami dapat melakukan sintaks lucu ini yang menggunakan GSX karena komponen dot state ini adalah komponen Riak yang merupakan halaman.

00:06:46.550 --> 00:06:49.520
Saya tahu ketika orang melihat ini lebih dulu, mereka benar-benar kesulitan melakukannya.

00:06:49.520 --> 00:06:52.370
Saya akan menunjukkan kepada Anda bagaimana Anda benar-benar bisa membuatnya lebih bersih nanti.

00:06:52.370 --> 00:06:56.850
Tetapi saya ingin benar-benar menunjukkan kepada Anda poin ini bahwa kami hanya memberikan komponen ini.

00:06:57.290 --> 00:06:59.410
Mari kita selesaikan ini.

00:06:59.560 --> 00:07:05.590
Mari kita buat pernyataan LCF lain dan kali ini saya hanya akan menyalin dan menempel di sini.

00:07:08.520 --> 00:07:13.580
Dan kami akan melakukan halaman 3 dan ini akan berakhir untuk halaman 3.

00:07:13.620 --> 00:07:17.630
Kita akan mendapatkan komponen pastry dan memuatnya di sini.

00:07:18.630 --> 00:07:21.110
Sekarang apakah ini akan berhasil?

00:07:21.150 --> 00:07:26.180
Baiklah mari kita lihat saya tidak mendapatkan kesalahan di sini.

00:07:26.310 --> 00:07:30.570
Jika saya kembali ke browser dan keluar.

00:07:30.640 --> 00:07:35.950
Sebenarnya mari kita tetap konsol dan saya klik.

00:07:36.550 --> 00:07:42.910
Saya mendapatkan kesalahan dan kami gagal mengeksekusi membuat dokumen pada dokumen.

00:07:42.960 --> 00:07:47.900
Itu kesalahan yang benar-benar membingungkan, bukan.

00:07:48.180 --> 00:07:54.920
Baiklah mari kita menghibur hukum di sini untuk melihat apa yang terjadi apa yang sebenarnya terjadi pada apa yang halaman 2

00:07:55.050 --> 00:07:56.650
Apakah ini komponen seperti yang saya katakan.

00:07:57.000 --> 00:07:58.450
Maksud saya itu harus benar.

00:07:58.830 --> 00:08:09.420
Baiklah mari kita konsol halaman log untuk pergi menyimpan klik pada halaman 2 dan baiklah saya mendapatkan kesalahan ini.

00:08:09.440 --> 00:08:18.500
Tapi Anda lihat di sini saya keluar log komponen tetapi Anda melihat itu terlihat agak aneh.

00:08:18.600 --> 00:08:26.890
Komponen sebenarnya di bawah properti default dan ini adalah tempat halaman kami berada.

00:08:26.890 --> 00:08:34.730
Ini adalah anak baptis kecil yang Anda harus terbiasa tetapi cara Anda benar-benar mengakses komponen untuk

00:08:35.750 --> 00:08:43.790
dapat mengaksesnya sebagai komponen keadaan ini dan bereaksi adalah dengan mengatakan Dot default dan kemudian miliki

00:08:43.820 --> 00:08:46.130
di sini Dot default.

00:08:46.130 --> 00:08:47.300
Sekarang mari kita coba.

00:08:50.820 --> 00:08:59.620
Kembali ke halaman ke 0 dan saya masih mendapatkan kesalahan karena kita harus menghapus baris

00:08:59.690 --> 00:09:03.310
pertama yang menggunakan pemecahan kode.

00:09:03.320 --> 00:09:10.620
Jadi biarkan saya menyimpan halaman kembali itu untuk melihat itu.

00:09:10.720 --> 00:09:12.690
Semuanya berfungsi.

00:09:13.850 --> 00:09:16.630
Tetapi apakah kita sebenarnya memisahkan kode.

00:09:16.640 --> 00:09:18.920
Apakah kita hanya menerapkan pemecahan kode.

00:09:19.190 --> 00:09:20.550
Mari kita periksa.

00:09:20.570 --> 00:09:22.510
Saya akan pergi ke tab Network.

00:09:22.580 --> 00:09:26.710
Saya akan menghapus ini dan saya akan menyegarkan.

00:09:26.740 --> 00:09:27.070
Baiklah.

00:09:27.090 --> 00:09:29.490
Jadi tidak ada yang berubah sejauh ini.

00:09:29.490 --> 00:09:31.330
Biarkan saya membuat ini sedikit lebih besar.

00:09:31.350 --> 00:09:33.880
Kami melihat file js yang dibundel.

00:09:34.110 --> 00:09:37.320
Ketika saya mengklik pada halaman 2 saya melihat ini

00:09:41.950 --> 00:09:43.540
di bagian bawah.

00:09:43.540 --> 00:09:44.350
Biarkan saya coba lagi.

00:09:44.350 --> 00:09:45.950
Saya akan menyegarkan kembali.

00:09:46.300 --> 00:09:47.780
Dan kita melihat Bondel.

00:09:48.430 --> 00:09:53.560
Saya akan menghapus ini dan melihat apa yang terjadi ketika saya mengklik halaman 2.

00:09:53.790 --> 00:09:59.720
Saya mendapatkan satu Choctaw Jesus dan jika saya klik pada tiga saya mendapatkan nol Belanda.

00:09:59.820 --> 00:10:04.280
J. S. Itu keren sekali.

00:10:04.280 --> 00:10:11.790
Dan kita lihat di sini jika kita klik di atasnya kita memiliki potongan kita dengan banyak pekerjaan

00:10:12.390 --> 00:10:18.220
tetapi kita juga melihat bahwa dalam file ini kita memiliki halaman untuk komponen.

00:10:18.430 --> 00:10:21.600
Kami baru saja menerapkan pemisahan kode.

00:10:21.970 --> 00:10:28.720
Jika kita benar-benar kembali sekarang dan kembali ke halaman ke halaman 1 itu tidak akan

00:10:28.720 --> 00:10:38.410
dimuat ulang karena mereka sudah memuat skrip tetapi sebaliknya ketika kita memuat halaman aplikasi awal kita ke halaman 3 komponen bukan

00:10:38.410 --> 00:10:41.730
bagian dari file database bundel .

00:10:41.860 --> 00:10:42.860
Betapa kerennya itu.

00:10:45.080 --> 00:10:50.180
Kami baru saja menerapkan pemisahan kode pada kami sendiri dan cukup sederhana.

00:10:50.180 --> 00:10:51.250
Itu sangat masuk akal.

00:10:51.260 --> 00:10:57.590
Kami hanya menghapus impor dari atas dan mengimpornya hanya ketika

00:10:57.590 --> 00:11:03.960
kami membutuhkannya hanya ketika pengguna mengklik rute halaman menjadi sangat rapi.

00:11:03.960 --> 00:11:07.860
Sekarang ada satu hal yang mungkin menarik perhatian Anda.

00:11:08.330 --> 00:11:09.870
Biarkan aku menunjukkanmu sesuatu.

00:11:10.220 --> 00:11:17.030
Saya akan menutup ini dan menjalankan NPM run build.

00:11:17.640 --> 00:11:24.090
Dan yang dilakukan adalah membuat aktifkan kembali, membuat folder yang dibuat siap untuk produksi yang dioptimalkan untuk

00:11:24.330 --> 00:11:28.540
Anda sehingga Anda dapat memasangnya secara daring untuk dikunjungi orang.

00:11:28.680 --> 00:11:36.540
Anda dapat melihat di sini bahwa itu benar-benar menunjukkan ukuran file setelahnya yang dengan cara itu adalah sesuatu yang

00:11:36.540 --> 00:11:37.800
akan kita bicarakan.

00:11:37.800 --> 00:11:45.580
Dan bagian terakhir dari bagian kinerja kita melihat bahwa kita memiliki utama menghindari kita yang memiliki javascript

00:11:45.660 --> 00:11:55.140
Kami memiliki file CSSA utama tetapi kemudian kami juga memiliki dua hal ini zero chunk dan satu chunk dan wetback

00:11:56.310 --> 00:12:01.320
build secara otomatis untuk Anda berdasarkan tempat dia melihat impor.

00:12:01.660 --> 00:12:13.130
Jadi kami benar-benar dapat mengambil banyak byte atau data dari file utama kami karena jika pengguna tidak pernah mengunjungi kue Pashtoon kami tidak

00:12:13.130 --> 00:12:17.070
perlu mengirim javascript itu dengan cara mereka.

00:12:18.410 --> 00:12:21.320
Sangat sangat keren.

00:12:21.330 --> 00:12:26.510
Sekarang itu pemecahan kode tetapi sebenarnya ada cara yang lebih baik untuk melakukannya.

00:12:26.580 --> 00:12:30.760
Dan di video berikutnya saya akan menunjukkan kepada Anda bagaimana saya akan melihatnya.

00:12:31.070 --> 00:12:31.340
Namun oleh.