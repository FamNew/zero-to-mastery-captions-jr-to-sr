WEBVTT

00:00:01.700 --> 00:00:03.920
Aici e Bruno aici.

00:00:03.920 --> 00:00:06.170
Acest lucru este absolut fantastic.

00:00:06.170 --> 00:00:11.420
Am raportat câteva dintre constatările dvs. CEO-ului nostru și suntem foarte siguri că vom putea să scarăm această

00:00:11.420 --> 00:00:16.770
companie și să gestionăm toți utilizatorii pe care îi vom avea în timp ce creștem și creștem mai mult.

00:00:16.790 --> 00:00:20.450
Într-adevăr apreciați că faceți o treabă fantastică.

00:00:20.450 --> 00:00:22.010
Ia o pauză.

00:00:22.010 --> 00:00:22.970
Ne vedem maine.

00:00:25.050 --> 00:00:25.840
In regula.

00:00:25.920 --> 00:00:31.250
Tocmai am completat întreaga imagine a optimizării performanței.

00:00:31.260 --> 00:00:38.190
Vreau să utilizați acest diapozitiv ca referință ori de câte ori sunteți întrebat sau căutați să

00:00:38.370 --> 00:00:39.710
îmbunătățiți performanța aplicației.

00:00:39.810 --> 00:00:43.790
Uită-te la asta și vezi unde vei avea cel mai mare impact.

00:00:43.800 --> 00:00:51.060
Începeți cu cea mai ușoară atunci când minimizați fișierele sau folosiți-le și apoi treceți la sarcini mai complicate, cum

00:00:51.060 --> 00:00:58.500
ar fi găsirea celui mai bun mod de a vă îmbunătăți calea critică de redare pentru a încărca chiar și echilibrarea.

00:00:58.570 --> 00:01:08.220
Și sper să vă distrați până acum, deoarece vedeți că ați învățat cum să faceți mai bine proiectele și

00:01:08.280 --> 00:01:09.050
aplicațiile.

00:01:09.300 --> 00:01:16.330
Ați învățat să re-acționați-l redux cum funcționează aceste biblioteci Front-End făcând ca aplicațiile de tip Front-End rapid

00:01:16.380 --> 00:01:18.640
scalabile să funcționeze foarte bine.

00:01:19.360 --> 00:01:24.520
De asemenea, am învățat despre securizarea aplicațiilor noastre, indiferent dacă ar trebui să folosim randarea de la Kline sau redarea pe

00:01:24.520 --> 00:01:25.520
partea de server.

00:01:25.540 --> 00:01:31.480
Am aflat, evident, despre verificarea tipului de performanță și cum să scriem teste unitare

00:01:31.480 --> 00:01:39.100
toate lucrurile care ne fac mai buni dezvoltatori de software lucruri care îmbunătățesc software-ul și care fac clienții

00:01:39.130 --> 00:01:41.450
noștri clienți șefii clienților fericiți.

00:01:41.670 --> 00:01:48.990
Și am învățat de asemenea cum să se ocupe de întreaga arhitectură a unei aplicații, de exemplu, cu ajutorul aplicației inteligente pentru

00:01:48.990 --> 00:01:49.340
creier.

00:01:49.410 --> 00:01:53.540
Putem crea o aplicație pentru o singură pagină utilizând reacția.

00:01:53.610 --> 00:01:56.600
Am servit un CSSA shemale și fișiere javascript.

00:01:56.850 --> 00:02:05.220
Am folosit Ada Publius lambda pentru a face niște sarcini care rulează funcții simple pentru noi prin intermediul serverelor Amazon.

00:02:05.220 --> 00:02:14.070
Am folosit un server API de nod folosind Express pentru a vorbi pentru a clarifica API-ul și pentru a obține răspunsul imaginilor noastre.

00:02:14.370 --> 00:02:20.680
Utilizăm postscript-uri pentru a gestiona baza de date a utilizatorilor și pentru a vă conecta la informații.

00:02:20.700 --> 00:02:28.410
De asemenea, am folosit Pretis pentru stocarea rapidă a memoriei pentru a gestiona sesiunile și pentru a ne asigura

00:02:28.410 --> 00:02:34.090
că avem rute protejate, astfel încât numai utilizatorii autentificați pot accesa informații private.

00:02:34.410 --> 00:02:40.290
Am învățat cum să adăugăm containerele de docare în întregul sistem pentru a ne ușura viața și chiar am

00:02:40.290 --> 00:02:45.940
învățat cum să S-sh în aceste servicii, astfel încât să le putem depana și să le verificăm jurnalele.

00:02:45.990 --> 00:02:53.520
Și acum aveți o imagine mai bună a modului în care ați dori să măriți sau să vă îmbunătățiți aplicațiile în timp ce acestea

00:02:53.520 --> 00:02:55.840
cresc și cresc la milioane de utilizatori.

00:02:55.980 --> 00:03:02.130
Putem adăuga orice funcții care sunt scumpe sau nu vrem să ne deranjeze pe serverul nostru la

00:03:02.130 --> 00:03:10.830
ceva de genul slamdunk având o arhitectură de servicii în care executăm aceste funcții în containere pe Amazon ori de câte ori au

00:03:10.830 --> 00:03:11.580
nevoie.

00:03:11.640 --> 00:03:14.540
Dacă avem ceva sezonier care are vârfuri înalte.

00:03:14.620 --> 00:03:17.550
Ei bine, Amazon va avea grijă de asta pentru noi.

00:03:17.580 --> 00:03:23.940
Putem folosi ceva de genul echilibrare a încărcării pentru a avea mai multe servere API pentru a gestiona toate solicitările

00:03:24.030 --> 00:03:26.490
pe care le utilizează jumătate de utilizatori.

00:03:26.640 --> 00:03:32.940
Putem rula aceste servere în containere Dakar, astfel încât să le putem implementa și să le replicăm în orice mașină

00:03:33.390 --> 00:03:33.970
găzduită.

00:03:35.150 --> 00:03:41.870
Ne putem îmbunătăți bazele de date prin faptul că avem informații cache și ne citiți sau chiar duplicând baze

00:03:42.110 --> 00:03:45.200
de date pentru a avea mai multă putere.

00:03:45.500 --> 00:03:51.590
Și apoi avem de asemenea arestări și cum putem crea din nou mai multe instanțe de ratt pentru

00:03:51.590 --> 00:03:58.470
a gestiona datele noastre de stocare a informațiilor despre sesiune sau poate chiar să stocheze unele informații cache din baze de date.

00:03:59.380 --> 00:04:05.800
Și dacă te uiți la această diagramă și are sens pentru tine și tu vezi cum pot fi îmbunătățite bucăți și

00:04:05.800 --> 00:04:09.120
bucăți pe și adăugat la fel cum sunt cererea crește.

00:04:09.340 --> 00:04:10.870
Felicitări.

00:04:11.020 --> 00:04:15.320
Este ceva cu adevărat ceea ce face un dezvoltator senior.

00:04:15.460 --> 00:04:21.150
Imaginând fluxul arhitecturii unui sistem și văzând cum îl putem îmbunătăți.

00:04:21.460 --> 00:04:28.390
Dacă sunteți capabil să faceți acest lucru, atunci oamenii pot avea încredere în tine să crească cererea lor de a gestiona scară și de

00:04:28.390 --> 00:04:30.130
a gestiona creșterea de proiect.

00:04:31.380 --> 00:04:32.540
Dar iată ce e.

00:04:32.610 --> 00:04:36.870
Este o ultimă piesă pe care trebuie să o adăugăm pentru a completa cunoștințele noastre.

00:04:36.870 --> 00:04:44.040
Am învățat toate elementele de bază despre toți pașii de care avem nevoie pentru a deveni dezvoltatori de vârf și tehnologii moderne pe care

00:04:44.040 --> 00:04:45.770
dezvoltatorii săi să le utilizeze.

00:04:46.020 --> 00:04:53.340
Dar pentru a face acest proces du-te pentru a crea acest întreg sistem pentru a vă asigura că suntem în măsură să trimită acest

00:04:53.340 --> 00:04:55.030
lucru la producție în direct.

00:04:55.050 --> 00:05:02.010
Avem nevoie de ceva numit livrare continuă de integrare continuă și desfășurare continuă.

00:05:02.040 --> 00:05:07.050
Ceva despre care vom învăța în următoarea secțiune pentru a conecta în final

00:05:07.530 --> 00:05:12.880
totul și pentru a completa întreaga imagine a unui dezvoltator senior în era modernă.

00:05:12.960 --> 00:05:13.950
Voi vedea în următoarea secțiune.