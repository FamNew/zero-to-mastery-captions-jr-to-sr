WEBVTT

00:00:02.400 --> 00:00:08.550
Baiklah sekarang kita sudah menginstal kompiler. Mari kita lihat bagaimana kita bisa mulai menggunakannya.

00:00:08.580 --> 00:00:14.760
Saya akan menghapus ini dan membuat ini sedikit lebih besar sehingga Anda dapat melihat semua

00:00:14.790 --> 00:00:23.280
yang perlu kita lakukan untuk membuat file naskah adalah memiliki titik ts pada akhir file seperti kita memiliki dodgiest untuk javascript.

00:00:23.310 --> 00:00:28.440
Yang kita butuhkan hanyalah file TS dan itu adalah file jenis script.

00:00:28.620 --> 00:00:32.730
Jadi mari kita lakukan itu mari kita membuat direktori terlebih dahulu.

00:00:32.800 --> 00:00:35.540
Kami akan memanggil tipe itu.

00:00:35.650 --> 00:00:35.990
Baiklah.

00:00:35.990 --> 00:00:40.010
Saya sudah membuatnya membuat CD ke folder itu.

00:00:41.310 --> 00:00:50.450
Jadi bukan untuk membuat teritori, kami menginginkan CD dan mengetik dan di sini kami dapat melakukan script tipe sentuh dot TS

00:00:50.450 --> 00:00:51.810
untuk file skrip.

00:00:52.400 --> 00:00:53.720
Mari kita

00:00:57.160 --> 00:01:07.590
buka di subline dan kita punya file naskah kita dan sekali lagi saya punya plug kecil yang bagus dan itu memberi saya jenis

00:01:07.590 --> 00:01:11.820
atau ikon jenis script di sini dan sudah mendeteksi itu.

00:01:11.920 --> 00:01:18.850
Sekarang untuk mengatur editor Anda untuk memahami naskah Anda mungkin harus google sekitar dan mengatakan bagaimana kita bisa menambahkan naskah

00:01:18.850 --> 00:01:23.980
ke editor Anda dan saya akan meninggalkan sumber daya bagi Anda untuk melakukannya juga.

00:01:24.190 --> 00:01:28.010
Untuk Sublime Text Yang perlu Anda lakukan adalah melakukan perintah shift.

00:01:28.150 --> 00:01:32.020
Pada Mac Anda mungkin harus melakukan kontrol shift P pada Windows.

00:01:32.020 --> 00:01:39.590
Anda menginstal paket dan kemudian menginstal paket hanya cukup mengetikkan.

00:01:40.190 --> 00:01:43.150
Dan saya sudah menginstal paket.

00:01:43.150 --> 00:01:47.950
Jadi Anda melihat bahwa itu tidak muncul di sini tetapi seharusnya hanya paket naskah sederhana ini.

00:01:47.950 --> 00:01:53.840
Ada beberapa yang lain yang dapat Anda unduh tetapi jenis yang sederhana sebaiknya dilakukan dengan baik.

00:01:54.780 --> 00:02:02.340
Setelah Anda melakukannya jika Anda pergi ke bawah di sini Anda akan melihat bahwa editor saya mengenali file

00:02:02.400 --> 00:02:09.580
TS sebagai naskah dan itulah bagaimana Anda dapat memeriksa bahwa editor Anda memiliki penyorotan sintaks untuk itu.

00:02:09.700 --> 00:02:12.740
Sekali lagi Anda dapat melihat bahwa semua skrip

00:02:15.980 --> 00:02:19.870
jenis Tuhan disiapkan, mari kita tuliskan sebuah baris skrip sederhana di sini.

00:02:19.880 --> 00:02:29.520
Kita akan kembali ke contoh sederhana kita dari suatu fungsi yang mengambil a dan b dan

00:02:29.520 --> 00:02:31.960
itu akan kembali.

00:02:32.170 --> 00:02:33.670
Katakanlah

00:02:36.820 --> 00:02:38.540
nilai tambah b.

00:02:38.770 --> 00:02:41.740
Fungsi yang sangat sederhana.

00:02:41.740 --> 00:02:47.000
Saya akan menyimpan ini dan mari kita jalankan ini melalui kompiler.

00:02:47.230 --> 00:02:49.230
Mari kita naikkan terminal.

00:02:49.370 --> 00:02:58.670
Aku akan benar-benar hanya meletakkan ini pada satu file supaya terlihat bagus dan di sini kita dapat menjalankan TS C

00:02:58.760 --> 00:03:01.520
untuk compiler naskah dan file.

00:03:01.520 --> 00:03:03.420
Kami ingin menjalankan kompiler.

00:03:03.500 --> 00:03:07.690
Dalam kasus kami, naskah titik TS Jadi

00:03:10.940 --> 00:03:18.900
naskah skrip katakanlah set enter ketika saya sudah banyak coding Anda mungkin telah memperhatikan itu.

00:03:19.140 --> 00:03:26.220
Mengapa tidak Anda tulis saja fungsi kesalahan dan ketik lagi script mendeteksi kesalahan ini setiap kali Anda memasukkan

00:03:26.250 --> 00:03:27.870
javascript yang tidak valid.

00:03:28.050 --> 00:03:34.580
Ini akan menjadi online ketika Anda melakukan sesuatu yang lucu jika Anda mencoba melakukannya lagi.

00:03:34.610 --> 00:03:41.930
Mari kita menulis javascript yang tepat jadi ini hanya deklarasi fungsi jadi mari kita simpan dan jalankan

00:03:41.930 --> 00:03:42.530
lagi.

00:03:45.190 --> 00:03:47.950
Baiklah itu saja.

00:03:48.030 --> 00:03:57.090
Tidak ada kesalahan tetapi Anda lihat di sini bahwa file dot js naskah dibuat dan jika saya pergi ke naskah Ya benar

00:03:58.260 --> 00:04:01.510
semua saya memiliki output yang sama persis.

00:04:01.680 --> 00:04:02.680
Fungsi ini.

00:04:02.820 --> 00:04:08.900
Fungsi ini melewati kompiler dan dikompilasi ke javascript.

00:04:08.940 --> 00:04:15.510
Yah tidak ada yang benar-benar berbeda karena kami tidak melakukan sesuatu yang berbeda di sini.

00:04:15.510 --> 00:04:18.840
Baiklah jadi mari kita ubah ini menjadi fungsi Erol.

00:04:18.900 --> 00:04:22.390
Anggap saja consomme sama dengan fungsinya

00:04:27.490 --> 00:04:36.190
dan berjalan ke kompiler lagi dan sepertinya tidak ada kesalahan jadi mari kita kembali ke file

00:04:36.190 --> 00:04:38.390
jazz kita dan.

00:04:38.490 --> 00:04:39.040
Wah

00:04:39.150 --> 00:04:39.820
Lihat itu.

00:04:40.700 --> 00:04:49.760
Ini mengubah javascript atau naskah kami menjadi file javascript tetapi menggunakan sintaks Ya 5 sehingga tidak ada

00:04:49.760 --> 00:04:51.950
fungsi kesalahan di sini.

00:04:52.170 --> 00:04:57.630
Dan Anda mungkin bertanya-tanya pada diri sendiri bukankah ini yang dilakukan Babel.

00:04:58.080 --> 00:05:02.540
Baiklah mari kita pergi ke Babbel.

00:05:02.690 --> 00:05:08.770
Buka browser dan ucapkan Babel dan buka kompiler Alkitab.

00:05:10.150 --> 00:05:14.740
Dan mereka memiliki alat kecil yang bagus di sini yang mengatakan Coba saja.

00:05:16.420 --> 00:05:24.870
Dan di sini kita dapat menjalankan apa yang telah kita lakukan di sini, jadi mari kita salin dan tempel fungsi kita dan lihat apa yang

00:05:28.300 --> 00:05:29.220
kita dapatkan.

00:05:34.920 --> 00:05:41.350
Jika kita klik dan preset kita melihat bahwa kita mendapatkan hal yang sama.

00:05:41.610 --> 00:05:46.260
Ini mengkompilasi kode ESX baru kami juga.

00:05:46.430 --> 00:05:48.810
Ya lima

00:05:48.860 --> 00:05:53.510
Jadi ya itu melakukan hal yang persis sama dengan celoteh.

00:05:54.010 --> 00:06:01.640
Dan ini adalah cara lain untuk mencoba fitur-fitur baru javascript dan masih mengompilasinya ke sesuatu yang

00:06:01.640 --> 00:06:03.620
dimengerti oleh browser.

00:06:03.620 --> 00:06:10.970
Dan sekarang mungkin masuk akal mengapa skrip adalah superset dari skrip javascript memungkinkan kita untuk menggunakan

00:06:10.970 --> 00:06:16.030
fitur baru yang tidak dimiliki javascript dan kita hanya perlu mengompilasinya.

00:06:16.960 --> 00:06:23.500
Typescript juga mencoba untuk tetap sejalan dengan fitur javascript modern sehingga mereka benar-benar

00:06:23.500 --> 00:06:27.820
diimplementasikan sehingga kompiler memahami bagaimana fungsi kita juga.

00:06:27.860 --> 00:06:28.910
Sangat keren.

00:06:28.970 --> 00:06:31.400
Sekarang mari kita tulis tipe pertama kami.

00:06:31.750 --> 00:06:33.710
Sintaks untuk naskah lagi.

00:06:33.770 --> 00:06:40.100
Mereka memiliki dokumentasi yang sangat bagus tentang hal ini dan kita akan pergi selangkah

00:06:40.100 --> 00:06:48.380
demi selangkah untuk melakukan sesuatu seperti pelatihan atau dalam kasus kami ini adalah angka dan B juga harus berupa angka.

00:06:48.510 --> 00:06:53.670
Ketika dua out basis di sini hanya untuk membuatnya lebih bersih.

00:06:53.820 --> 00:07:03.160
Jika saya menyimpan ini sekarang dan menonton ini karena saya sudah selesai, Anda melihat bagaimana editor saya memberi saya sedikit petunjuk.

00:07:03.180 --> 00:07:04.770
Itu manfaat lain dari naskah.

00:07:04.770 --> 00:07:09.350
Ini akan membantu saya dengan celana karena saya sedang mengerjakan kode

00:07:11.260 --> 00:07:14.120
Tetapi untuk sekarang mari kita lihat apa yang dikompilasi.

00:07:14.360 --> 00:07:23.500
Saya ingin menjalankannya lagi dan pergi ke file javascript saya dan ya kami tidak punya barang nomor ini.

00:07:23.600 --> 00:07:29.060
Compiler mengeluarkannya karena ini adalah kode yang akan diproduksi dan kami tidak ingin X

00:07:29.090 --> 00:07:34.950
ini pasti byte dalam kode kami yang akan membuat kode kami lebih berat untuk dikirim ke klien.

00:07:35.670 --> 00:07:38.850
Jadi kompiler melakukan ini secara otomatis untuk kita.

00:07:38.850 --> 00:07:40.140
Sangat keren.

00:07:40.140 --> 00:07:41.510
Tapi lihat ini.

00:07:41.730 --> 00:07:50.970
Jika saya melakukan empat ditambah lima dengan baik apa yang baru saja saya lakukan.

00:07:52.280 --> 00:07:53.390
Editor saya.

00:07:53.450 --> 00:07:58.020
Secara otomatis saya tidak melakukan apa pun selain mengatur naskah saya dengan editor saya.

00:07:58.130 --> 00:08:03.260
Saya diharapkan untuk berdebat tetapi ada satu karena saya melakukan empat ditambah lima.

00:08:03.300 --> 00:08:08.330
Sekali lagi jika kita melakukan empat datang lima sekarang semuanya harus bekerja.

00:08:08.670 --> 00:08:10.170
Dan saya tidak mendapatkan kesalahan.

00:08:10.200 --> 00:08:17.340
Jika saya menyimpan dan menjalankan TMC semuanya berfungsi.

00:08:17.440 --> 00:08:19.120
Kode kami masih berfungsi.

00:08:19.120 --> 00:08:29.090
Jika saya menghibur dialog dan mari kita berikan jawaban yang konstan.

00:08:30.040 --> 00:08:31.250
Dan apa log konsol ini.

00:08:31.250 --> 00:08:36.980
Jawabannya

00:08:37.060 --> 00:08:38.930
Dan mari kita jalankan ini lagi.

00:08:40.600 --> 00:08:40.940
Baiklah.

00:08:40.950 --> 00:08:51.720
Semuanya berfungsi tetapi jika saya tahu apa jenis skip dodgy us, saya mendapatkan jawaban 9.

00:08:51.800 --> 00:08:52.640
Sangat keren.

00:08:53.570 --> 00:09:04.140
Bagaimana jika saya melakukan string yang menyapa Anda melihat bahwa editor saya memiliki garis bawah merah.

00:09:04.140 --> 00:09:11.810
Sekarang dan jika saya mengarahkan kursor ke jenis garis bawah ini seperti pemeriksa ejaan pada kata atau

00:09:12.230 --> 00:09:20.930
dokumen teks Anda mengatakan argumen kesalahan ketik tidak dapat ditetapkan ke parameter nomor jenis karena saya telah mengatakan bahwa a

00:09:20.990 --> 00:09:22.630
memiliki jenis nomor.

00:09:22.750 --> 00:09:31.010
Bahkan jika saya mencoba menjalankan TSC sekarang oh saya tidak menyimpannya Anda menyimpannya bahkan jika saya menjalankan TSC sekarang.

00:09:33.530 --> 00:09:39.440
Ini sebenarnya akan melempar kesalahan dengan mengatakan apa yang dikatakan di editor saya.

00:09:39.440 --> 00:09:43.550
Jenis string itu tidak akan bekerja dengan tipe angka.

00:09:43.550 --> 00:09:45.070
Betapa kerennya itu.

00:09:45.080 --> 00:09:52.820
Inilah yang kami maksud di mana kami mengatakan bahwa ia menangkap kesalahan pada waktu kompilasi karena kode ini tidak akan

00:09:52.820 --> 00:09:59.090
pernah membuatnya menjadi produksi karena agar kami dapat mengirim kode ke produksi, kami harus terlebih dahulu

00:09:59.090 --> 00:10:00.410
mengubahnya menjadi Javascript.

00:10:00.650 --> 00:10:08.240
Dan ketika kita mengonversi ke javascript kita menangkap kesalahan-kesalahan itu di kompiler kita dan jika ia melontarkan kesalahan

00:10:08.270 --> 00:10:15.410
apa pun yang kita tahu kita harus memperbaikinya versus Javascript cara kerjanya adalah javascript ini dikirim ke

00:10:15.410 --> 00:10:21.920
browser dan browser melakukan apa yang disebut sebagai dalam waktu kompilasi dan kompilasi kode di

00:10:21.920 --> 00:10:22.520
tempat.

00:10:22.670 --> 00:10:28.280
Untuk setiap pengguna mereka dan ini kemungkinan besar akan menimbulkan kesalahan dan pengguna mungkin melihat layar kosong atau

00:10:28.280 --> 00:10:31.410
roti dan kami tidak akan tahu harus berbuat apa.

00:10:31.880 --> 00:10:34.520
Jadi itu cukup bagus.

00:10:35.000 --> 00:10:42.640
Dan omong-omong Anda mungkin telah memperhatikan bahwa itu masih mengkompilasi javascript kami ke parameter halo string.

00:10:42.710 --> 00:10:44.090
Itu hanya sesuatu yang dilakukannya.

00:10:44.090 --> 00:10:49.360
Tetapi Anda dapat melihat di sini bahwa kesalahan memang keluar sehingga Anda tidak akan benar-benar mengirim ini

00:10:49.370 --> 00:10:54.180
ke produksi Anda akan melihat bahwa ada kesalahan dan bahwa Anda perlu memperbaiki beberapa hal.

00:10:54.200 --> 00:10:55.100
Baiklah.

00:10:55.400 --> 00:10:58.250
Ini terlihat sangat menarik dan menjanjikan.

00:10:58.340 --> 00:11:06.500
Kami baru saja menambahkan fitur hebat ini untuk memastikan bahwa kode kami lebih rentan terhadap kesalahan.

00:11:06.500 --> 00:11:07.730
Cobalah sendiri.

00:11:07.730 --> 00:11:14.890
Pastikan editor teks Anda memiliki semua pengaturan ini dan perlu diingat.

00:11:15.190 --> 00:11:18.310
Jika Anda mengalami masalah dengan editor Anda, Google adalah teman Anda di sini.

00:11:18.400 --> 00:11:24.160
Ada banyak sumber daya online untuk editor apa pun yang Anda harus mengaturnya dengan naskah, tetapi seharusnya

00:11:24.160 --> 00:11:26.580
tidak membawa Anda lebih dari beberapa menit.

00:11:26.620 --> 00:11:29.380
Mungkin Max satu jam.

00:11:29.550 --> 00:11:31.490
Baiklah, sampai jumpa di video berikutnya.

00:11:31.730 --> 00:11:32.010
Sampai jumpa.