WEBVTT

00:02.350 --> 00:08.950
All right let's start learning some of the different types that typescript comes with and we're going

00:08.950 --> 00:10.450
to take it one by one.

00:10.690 --> 00:13.020
And don't worry you're going to have access to this fall.

00:13.170 --> 00:16.070
The end of this video so you can use it as a reference.

00:17.460 --> 00:23.760
The first thing is a Boolean type A true or false.

00:24.000 --> 00:25.260
And that's very easy to do.

00:25.260 --> 00:27.780
We can just say a lot is cool.

00:30.000 --> 00:32.550
Be a Boolean type.

00:32.580 --> 00:38.100
So you always see the syntax the semi-colon and then the type that we want it to be.

00:38.100 --> 00:44.190
So in our case we can just say true and everything is working fine.

00:44.250 --> 00:48.390
We have a bully and type again just to prove that that it works.

00:48.390 --> 00:49.440
You see that we get an error.

00:49.440 --> 00:57.180
Now every time we do something other than Boolean right now it's easy what's next.

00:58.510 --> 01:02.260
Well we've seen this one before let's do a number type.

01:02.440 --> 01:06.920
And by the way you notice that because this is a TS file a top secret file.

01:06.970 --> 01:10.090
Let me close this because this is a typescript file.

01:11.070 --> 01:12.800
We see that we get some highlighting.

01:12.810 --> 01:18.120
If this was in java script it wouldn't work but because this is a typescript file and my editor set

01:18.120 --> 01:22.560
up with typescript syntax it has nice highlighting for me.

01:22.680 --> 01:24.220
All right number.

01:24.520 --> 01:26.350
This one again is fairly easy.

01:26.490 --> 01:28.770
I can say that let h.

01:31.150 --> 01:34.830
Which is a number equals 56.

01:34.900 --> 01:36.800
Nice and simple save.

01:37.270 --> 01:45.470
And just to double check if we go to our javascript file we see the output.

01:45.490 --> 01:49.800
All right I'm going to close the config file here because we don't need it.

01:50.020 --> 01:53.050
The next one is obviously a string type.

01:53.050 --> 02:01.710
Another one that we see and this string type lets say is let all color be a string.

02:02.620 --> 02:05.590
And we'll say that this equals Brown

02:09.550 --> 02:11.690
and we save and everything works.

02:11.710 --> 02:15.130
And by the way this works with yes six template strings as well.

02:15.130 --> 02:18.090
Let me show you I can do that.

02:18.100 --> 02:21.400
Favorite quote for example.

02:23.080 --> 02:28.300
B a string and this string is going to say

02:31.170 --> 02:34.680
I'm not bald.

02:34.840 --> 02:36.950
I'm only

02:40.880 --> 02:43.490
and the age that we defined appear.

02:43.920 --> 02:48.840
So if we save that you see that that still works.

02:48.880 --> 02:53.230
No whereas with our compiler and we have everything.

02:53.470 --> 02:55.270
I'll put it correctly.

02:55.330 --> 02:58.430
So it detects Templi strings strings as well.

03:00.210 --> 03:00.620
All right.

03:00.640 --> 03:03.840
Not too bad so far fairly easy.

03:03.860 --> 03:06.930
What about arrays.

03:07.640 --> 03:10.650
Well with a race we can do lot.

03:10.710 --> 03:17.490
Pat's and let's say it's a it's an array of strings.

03:17.550 --> 03:20.640
What we can do strings.

03:20.690 --> 03:30.850
And then the array symbol and we simply do equals and we'll just give it an array nice simple array

03:31.000 --> 03:33.340
of words.

03:33.750 --> 03:34.890
Ken Antipyrine now.

03:34.900 --> 03:44.380
Kat dog and lost to pig save and you get her.

03:44.380 --> 03:44.740
Never.

03:44.760 --> 03:49.070
I said that says cannot find name strings.

03:49.200 --> 03:54.750
And again a little bit of a Miss you see that I have the underlying here cannot find names strings.

03:54.780 --> 03:56.000
Thank you typescript.

03:56.010 --> 03:57.590
This should have been string.

03:57.780 --> 04:01.970
Save perfect again.

04:02.070 --> 04:08.130
Another great thing that I keep mentioning with typescript is this ability to constantly tell you whenever

04:08.130 --> 04:10.870
you're making the mistake before you even run the code.

04:11.890 --> 04:17.740
There's actually another way that you can declare arrays with typescript and let me show you let's two

04:17.740 --> 04:22.810
paths too and I can do it this way as well.

04:22.900 --> 04:24.680
Which is actually my preferred method.

04:24.970 --> 04:25.650
Array.

04:27.610 --> 04:30.970
String like this.

04:31.390 --> 04:33.490
And that's the same thing as the above.

04:33.730 --> 04:42.450
So in here I can say that this is a line dragon.

04:42.470 --> 04:49.630
Some scary pets in here and a lizard save and everything still works.

04:49.640 --> 04:51.960
Sorry to all the natural progression.

04:52.080 --> 04:59.240
My guess is maybe to test objects so let's say lot

05:01.920 --> 05:05.780
wizard equal an object.

05:05.830 --> 05:09.430
So let's say in here is just going to have a

05:12.550 --> 05:13.440
I save.

05:13.450 --> 05:22.910
I get no errors because I haven't declared any types but and here I say object and save all right.

05:22.910 --> 05:28.000
Everything still works if I make wizard

05:30.880 --> 05:34.400
equal to 5 I get in there.

05:34.430 --> 05:37.860
We're expecting a type of object.

05:37.950 --> 05:46.130
All right that's working and you notice here that it's lower case object because uppercase object you

05:46.130 --> 05:50.520
can use in javascript Brey you can do object dot key and so on and so forth.

05:50.570 --> 05:55.700
So you've got to make sure that this is lowercase object and we're going to get a little bit deeper

05:55.700 --> 05:57.560
in objects and later videos.

05:57.560 --> 06:02.500
Don't worry because with objects types do get a little bit more complicated.

06:03.760 --> 06:04.170
All right.

06:04.240 --> 06:05.290
I think that's good for now.

06:05.290 --> 06:06.880
These are basics.

06:06.880 --> 06:09.410
There are a few others that I want to cover.

06:09.430 --> 06:15.960
Actually you don't want to just to cover our basics list to Noal and undefined as well.

06:16.180 --> 06:19.020
And Noland undefined again.

06:19.030 --> 06:25.010
So far it's been pretty easy because they're named exactly like they are in javascript.

06:25.070 --> 06:37.350
We can't say let more you call undefined and that's going to equal actual javascript undefined again.

06:37.350 --> 06:39.300
Everything is compiling perfectly.

06:39.540 --> 06:46.530
And if I go ahead and do all that no call no

06:49.060 --> 06:51.350
and that equals actual javascript no.

06:51.370 --> 06:54.540
Because remember this is a type script type.

06:54.550 --> 06:56.950
This is the actual javascript value.

06:57.020 --> 07:01.220
If I save everything still works all right.

07:01.270 --> 07:03.100
So that was extremely easy.

07:03.160 --> 07:09.730
Super easy because we've just used everything that we already knew in javascript but the power of typescript

07:09.730 --> 07:14.070
is that we get a few x share features that javascript doesn't have.

07:14.260 --> 07:16.800
Remember it's a superset of Javascript.

07:17.140 --> 07:21.640
So in the next video we're going to learn some of these new types.

07:21.640 --> 07:22.930
I'll see in that one.

07:22.940 --> 07:23.280
Bye bye.
