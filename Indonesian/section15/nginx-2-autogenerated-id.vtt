WEBVTT

00:00:01.310 --> 00:00:06.020
Sekarang saya akan meninggalkan sumber bagaimana file konfigurasi di mesin X bekerja.

00:00:06.020 --> 00:00:11.290
Ada dokumentasi online yang bagus dan karena dengan semua konfigurasi Anda tidak perlu menghafal sinkronisasi.

00:00:11.300 --> 00:00:16.250
Ini hanya hal-hal yang akan Anda cari ketika Anda benar-benar menerapkan load balancer.

00:00:16.250 --> 00:00:20.030
Jadi saya akan memulai dengan beberapa pengaturan dasar terlebih dahulu.

00:00:20.090 --> 00:00:27.130
Saya akan mengatakan bahwa proses pekerja akan menjadi sesuatu di mana saya tidak perlu menelepon.

00:00:27.540 --> 00:00:28.770
Sekarang apa artinya itu.

00:00:28.890 --> 00:00:35.170
Nah jumlah proses pekerja ditentukan oleh file ini dan bisa apa pun yang kita inginkan kita dapat menambahkan 2

00:00:35.170 --> 00:00:36.140
3 empat.

00:00:36.150 --> 00:00:37.850
Ini adalah proses pekerja.

00:00:39.560 --> 00:00:43.100
Dan biasanya cocok dengan jumlah penggunaan C-p yang ingin Anda gunakan.

00:00:43.100 --> 00:00:46.910
Jadi misalnya jika Anda memiliki untuk digunakan pada mesin Anda yang mungkin Anda gunakan.

00:00:46.910 --> 00:00:48.880
Untuk saat ini saya hanya akan meninggalkan atau satu.

00:00:48.980 --> 00:00:51.020
Selanjutnya kita mendefinisikan

00:00:53.620 --> 00:01:02.320
acara dan acara ini akan memiliki sesuatu yang disebut koneksi Pekerja dan saya akan mengatakan

00:01:02.320 --> 00:01:04.790
itu akan memiliki 1024.

00:01:05.070 --> 00:01:08.870
Dan Anda melihat seribu dua puluh empat atau lima 16 sebagai default di sini.

00:01:08.880 --> 00:01:09.900
Cukup banyak.

00:01:09.900 --> 00:01:17.010
Sekali lagi ini menetapkan jumlah maksimum koneksi simultan yang dapat dibuka oleh proses pekerja.

00:01:17.010 --> 00:01:23.070
Jadi kita memiliki satu proses pekerja dan koneksi simultan max yang bisa kita miliki.

00:01:23.200 --> 00:01:25.180
Dan akhirnya kita sampai pada bagian yang menyenangkan.

00:01:25.180 --> 00:01:26.670
Kami mendefinisikan

00:01:29.710 --> 00:01:31.600
HP dan TTP ini.

00:01:31.810 --> 00:01:38.950
Kita harus mengatakan bahwa kita ingin load balancer dan Gen X untuk meneruskan ke server

00:01:38.950 --> 00:01:40.840
yang kita miliki.

00:01:40.860 --> 00:01:48.660
Jadi dalam kasus kami, saya akan mengatakan server web yang akan berada di port tiga ribu.

00:01:48.860 --> 00:01:56.500
Dan ini akan mencocokkan nama-nama yang kita miliki di sini dan port yang terkait dengannya.

00:01:57.310 --> 00:02:03.760
Jadi saya akan mengatakan server satu akan baik-baik saja tiga ribu.

00:02:03.930 --> 00:02:08.510
Yang berikutnya adalah dua tiga ribu satu.

00:02:08.700 --> 00:02:20.220
Dan akhirnya server web 3 akan berada di port tiga ribu dua.

00:02:20.300 --> 00:02:27.380
Dan sekarang kita berpikir tentang kemungkinan besar server web ini akan membuka ke port yang sama karena

00:02:27.440 --> 00:02:30.930
kita hanya mereplikasi mereka mereplikasi mereka mereplikasi mereka.

00:02:31.130 --> 00:02:36.340
Jadi sebagian besar waktu ini akan memiliki port katakanlah 3000 terbuka secara konsisten.

00:02:36.440 --> 00:02:41.030
Jadi saya akan mengubahnya kembali menjadi 3000 3000 dan melakukan hal yang sama.

00:02:41.030 --> 00:02:41.750
Dan

00:02:46.630 --> 00:02:52.700
dokumen saya, Rafal, akan kembali ke sini. Sekarang saya harus memastikan bahwa kami dapat menggunakan dan mereferensikannya.

00:02:53.170 --> 00:02:59.340
Dan cara standar kita melakukan ini adalah kita menggunakan hulu dan hulu kita bisa menyebutnya apa saja

00:02:59.470 --> 00:03:08.480
yang kita inginkan, sebut saja itu aplikasi saya 1 dan kita akan membungkusnya di sini dan saya akan menunjukkan kepada Anda apa yang dilakukan di

00:03:08.590 --> 00:03:09.510
selanjutnya kehidupan.

00:03:10.090 --> 00:03:16.180
Jadi kami telah mengatakan bahwa hulu akan menjadi aplikasi saya yang akan mengandung

00:03:16.180 --> 00:03:20.030
tiga server ini dan bukan server server.

00:03:20.080 --> 00:03:25.390
Kita sekarang dapat mengatakan bahwa server akan mendengarkan port

00:03:28.500 --> 00:03:33.770
80 dan saya harus memastikan saya tidak melupakan titik

00:03:38.150 --> 00:03:49.770
koma di sini dan kemudian saya akan mengatakan bahwa lokasi rute default akan mengarahkan kita untuk apa yang kita sebut

00:03:49.770 --> 00:03:50.990
Proxy Pass.

00:03:51.010 --> 00:03:58.620
Jadi ingat bagaimana dia mengatakan itu akan menjadi proxy reverse Proxy Pass hanya mengatakan saya ingin Anda

00:04:01.190 --> 00:04:02.890
mengakses aplikasi saya.

00:04:02.890 --> 00:04:05.060
Satu yang baru saja kita buat.

00:04:05.120 --> 00:04:10.420
Jadi ini hulu satu aplikasi saya sekarang dapat direferensikan dalam melewati proxy di sini.

00:04:10.490 --> 00:04:16.670
Jadi kami hanya mengatakan hei jika kami mencapai rute utama seperti ini, hanya meneruskan semua

00:04:16.670 --> 00:04:19.580
itu ke server satu ke server tiga.

00:04:19.680 --> 00:04:24.020
Sekali lagi ini semua cukup baik didokumentasikan dan konfigurasinya.

00:04:24.030 --> 00:04:25.660
Ini unik untuk mesin x.

00:04:25.800 --> 00:04:31.740
Jadi mungkin terlihat membingungkan sekarang tetapi hanya cara standar untuk mengatur penyeimbang beban.

00:04:31.890 --> 00:04:33.920
Dan sekarang kita memiliki segalanya yang sudah diatur.

00:04:34.260 --> 00:04:41.040
Tetapi kita juga dapat melakukan beberapa hal keren dengan engine

00:04:41.040 --> 00:04:55.440
X misalnya jika saya menyajikan file statis saya dapat mengatakan lokasi dan dengan menggunakan sintaks kecil ini saya dapat mengatakan melayani CSX javascript gif.

00:04:55.510 --> 00:04:56.310
Apa lagi yang kita miliki.

00:04:56.320 --> 00:05:01.600
Kami memiliki JPEG, kami memiliki file

00:05:04.180 --> 00:05:11.830
PMG dan apa pun yang termasuk yang saya ingin Anda cache.

00:05:11.890 --> 00:05:16.450
Jadi jika kita memiliki file-file ini dengan ekstensi ini.

00:05:16.450 --> 00:05:25.330
Nah dalam hal itu, cukup cache mereka menggunakan parameter kadaluarsa dan kami dapat mengatakan apa pun yang Anda inginkan seperti

00:05:25.510 --> 00:05:27.830
168 jam dan hanya itu.

00:05:27.870 --> 00:05:31.000
Mari kita pastikan saya ingat semua titik koma di sini.

00:05:31.170 --> 00:05:35.490
Dan ini adalah file konfigurasi mesin X yang khas.

00:05:35.520 --> 00:05:40.380
Sekali lagi semua yang kami lakukan hanyalah mengatakan hei referensi aplikasi saya 1

00:05:40.380 --> 00:05:47.280
dan ini akan menyertakan server ini dan kami akan melakukan proxy melewati ini dan kami hanya akan mendengarkan port 80.

00:05:47.280 --> 00:05:48.700
Baiklah jadi mari kita simpan ini.

00:05:48.720 --> 00:05:52.070
Saya akan pergi ke Dr. menyusun.

00:05:52.190 --> 00:05:58.850
Kami sekarang memiliki folder mesin X yang akan menjalankan file doc dan akan memindahkan file konfigurasi kami

00:05:59.240 --> 00:06:02.420
yang baru saja kami buat ke wadah kami.

00:06:02.540 --> 00:06:04.900
Jadi mari kita jalankan ini dan lihat bagaimana ini bekerja.

00:06:06.610 --> 00:06:17.890
Pertama mari kita jalankan NPM untuk buruh pelabuhan membuat dash dash build dan melihat apakah semuanya bekerja

00:06:20.240 --> 00:06:27.830
Dan kami mendapatkan sedikit kesalahan di sini karena saya memang membuat kesalahan kecil dan yang ada di

00:06:27.830 --> 00:06:34.520
sini seharusnya adalah proses pekerja meskipun itu karena mengharapkan kadang-kadang lebih dari satu itu harus

00:06:34.520 --> 00:06:36.250
menjadi proses pekerja.

00:06:36.380 --> 00:06:38.600
Jadi mari kita simpan dan coba lagi.

00:06:38.600 --> 00:06:43.520
Akan menutup dan mengulang semua itu, hei lihat

00:06:47.340 --> 00:06:51.210
server yang menjalankan port ini.

00:06:51.210 --> 00:06:55.630
Ingat host lokal ini ada di dalam container, jadi kami tidak bisa mengaksesnya.

00:06:55.890 --> 00:06:59.160
Tetapi kami memiliki server web kami yang berjalan.

00:06:59.180 --> 00:07:02.570
Jadi jika saya pergi ke port host lokal 80 Sekarang mari kita coba.

00:07:07.350 --> 00:07:13.110
Localhost dan bukannya Port 3000 akan melakukan port 80.

00:07:13.110 --> 00:07:16.720
Baiklah, kita mendapat semacam respons.

00:07:16.860 --> 00:07:18.910
Jika saya membuka konsol tidak ada kesalahan.

00:07:19.090 --> 00:07:20.140
Tapi lihat ini.

00:07:20.260 --> 00:07:23.900
Jika saya kembali sekarang saya melihat lalu lintas. com diminta.

00:07:24.040 --> 00:07:29.690
Dan juga saya telah terkena web yang telah dipukul.

00:07:29.830 --> 00:07:33.450
Jadi itu hanya merespons.

00:07:33.530 --> 00:07:37.870
Sekarang jika kita kembali dan menyegarkan kembali, kita

00:07:41.390 --> 00:07:42.040
melihatnya.

00:07:42.070 --> 00:07:42.900
Oh oke.

00:07:42.920 --> 00:07:44.940
Sekarang kita juga punya.

00:07:44.960 --> 00:07:51.120
Itu kepala juga dengan tiga yang kepala dan Fabrikant seperti yang diminta dari Webb

00:07:51.200 --> 00:07:56.180
menang dan penyeimbang beban hanya untuk memukul masing-masing server ini.

00:07:56.300 --> 00:08:02.660
Dan jika kita kembali ke file konfigurasi Anda sebenarnya dapat menentukan di sini bagaimana Anda ingin mendistribusikan

00:08:02.660 --> 00:08:03.130
bobot

00:08:03.140 --> 00:08:08.950
Misalnya Anda ingin WEP satu memiliki lebih banyak, Anda mendapatkan dua kali lebih banyak permintaan juga dua dan tiga.

00:08:09.050 --> 00:08:10.000
Kamu bisa melakukannya.

00:08:10.040 --> 00:08:11.440
Anda dapat memiliki pesanan yang berbeda.

00:08:11.450 --> 00:08:14.230
Tetapi untuk saat ini hanya memukul mereka satu per satu secara berurutan.

00:08:14.240 --> 00:08:15.140
Satu dua tiga.

00:08:15.140 --> 00:08:16.320
Lalu satu dua tiga.

00:08:16.460 --> 00:08:20.020
Satu dua tiga sangat keren.

00:08:20.020 --> 00:08:22.440
Dan itu sangat sulit diimplementasikan.

00:08:22.490 --> 00:08:23.700
Kanan.

00:08:23.930 --> 00:08:25.550
Sekarang inilah bagian yang menarik.

00:08:25.550 --> 00:08:27.550
Mari bersenang-senang dengan ini.

00:08:27.560 --> 00:08:30.600
Kami sekarang memiliki penyeimbang beban yang meneruskan permintaan.

00:08:30.770 --> 00:08:35.980
Bagaimana jika kita hanya memukulnya dengan banyak permintaan dengan ratusan permintaan.

00:08:36.140 --> 00:08:41.440
Yah kita bisa melakukan sedikit load balancing menguji pengujian beban.

00:08:41.750 --> 00:08:45.720
Dan untungnya bagi kita ada satu ton sumber daya yang bisa kita gunakan di sini.

00:08:45.740 --> 00:08:52.670
Kita akan menggunakan paket tes NPM rendah tetapi ada banyak yang terdengar menyenangkan seperti artileri.

00:08:52.740 --> 00:09:01.280
Ada pengepungan yang dapat Anda gunakan dan juga sangat populer untuk dan semuanya cukup banyak melakukan hal yang

00:09:01.280 --> 00:09:01.810
sama.

00:09:01.850 --> 00:09:07.220
Mereka mensimulasikan permintaan dan kami dapat memberi tahu mereka berapa banyak permintaan yang ingin kami tekan pada titik akhir

00:09:07.220 --> 00:09:09.000
jadi mari kita gunakan tes rendah.

00:09:09.010 --> 00:09:13.730
Yang perlu kita lakukan hanyalah menginstal tes rendah yang sudah saya miliki secara global

00:09:13.730 --> 00:09:19.550
Dan Anda mungkin harus menjalankan perintah sudo dan setelah itu Anda memiliki perintah tes rendah yang tersedia untuk

00:09:19.550 --> 00:09:20.000
Anda.

00:09:20.300 --> 00:09:22.210
Jadi izinkan saya menunjukkan sesuatu.

00:09:22.640 --> 00:09:27.170
Saya akan mengatakan tes rendah dan menjalankan perintah ini.

00:09:27.170 --> 00:09:28.650
Biarkan saya membuat ini sedikit lebih besar.

00:09:29.870 --> 00:09:36.190
Sekarang tes rendah t t hanya mengatakan t empat batas waktu itu.

00:09:36.190 --> 00:09:44.750
Saya ingin Anda melakukan tes rendah ini selama lima detik dan kemudian tanda hubung C berarti berapa banyak klien yang ingin

00:09:44.750 --> 00:09:45.930
kami buat.

00:09:46.280 --> 00:09:54.260
Jadi kami menciptakan 100 klien dan 100 dari mereka akan tiba secara bersamaan ke server.

00:09:56.510 --> 00:10:00.790
Dan akhirnya kita memiliki tanda hubung P. S. Dan ini berarti.

00:10:00.870 --> 00:10:02.840
Tingkat permintaan per detik.

00:10:02.870 --> 00:10:07.930
Jadi kita akan mengirim 100 permintaan per detik ke localhost 80.

00:10:08.120 --> 00:10:11.120
Setelah saya menekan Enter, periksa apa yang terjadi di sisi kanan.

00:10:11.640 --> 00:10:14.360
Siap, mari kita mulai.

00:10:16.510 --> 00:10:18.900
Betapa kerennya itu.

00:10:18.940 --> 00:10:25.270
Dan Anda dapat melihat di sini ini berjalan sangat cepat tetapi beralih dari web satu dua tiga

00:10:25.270 --> 00:10:27.700
satu dua tiga satu dua tiga.

00:10:27.810 --> 00:10:30.810
Dan kami juga mendapatkan ringkasan kecil yang bagus tentang apa yang telah kami lakukan.

00:10:31.730 --> 00:10:34.800
Jika saya membuat ini sedikit lebih kecil sehingga kita bisa melihat lebih baik.

00:10:34.910 --> 00:10:40.290
Kami melihat bahwa kami telah menyelesaikan empat ratus sembilan puluh sembilan permintaan 100 permintaan per detik.

00:10:40.370 --> 00:10:46.850
Seperti yang telah kami katakan seratus tingkat konkurensi lagi sebagai parameter yang kami berikan kami memiliki localhost 80 kami menjalankan tes selama lima

00:10:48.080 --> 00:10:56.830
detik dan latensi rata-rata berapa lama waktu yang dibutuhkan untuk merespons adalah 5. 1 milidetik cukup cepat.

00:10:56.830 --> 00:11:03.590
Dan itu menunjukkan kepada Anda beberapa info lebih lanjut tentang berapa banyak permintaan yang dilayani dalam waktu tertentu sehingga

00:11:03.770 --> 00:11:04.940
terlihat cukup bagus.

00:11:04.940 --> 00:11:06.640
Sekarang inilah eksperimen yang sedikit menyenangkan.

00:11:07.760 --> 00:11:14.020
Bagaimana jika saya menutup ini dan bukannya wadah buruh pelabuhan yang memiliki penjaga beban

00:11:14.140 --> 00:11:17.560
Bagaimana jika kita hanya menjalankan start NPM.

00:11:17.560 --> 00:11:24.700
Saya sudah mengaturnya sehingga server yang hanya satu server tunggal mendengarkan localhost tiga ribu Sekarang

00:11:24.700 --> 00:11:29.230
ingat file server dodgiest kami hanya server sederhana.

00:11:29.230 --> 00:11:35.200
Jadi sekarang saya menjalankannya di localhost 3000 kita bisa menguji apa yang terjadi ketika tidak ada penyeimbang rendah dan

00:11:35.200 --> 00:11:36.380
hanya satu server.

00:11:36.640 --> 00:11:42.220
Yang perlu kita lakukan hanyalah menjalankan tes yang sama tetapi kali ini alih-alih port 80 kita melakukan port tiga ribu.

00:11:42.400 --> 00:11:43.220
Mari kita mulai.

00:11:45.260 --> 00:11:48.370
Dan Anda melihat bahwa server merespons dengan konsol yang mencatatnya.

00:11:48.410 --> 00:11:55.430
Sudah dipukul selama lima detik dan kemudian kita mendapat respons.

00:11:55.770 --> 00:11:56.520
Itu menarik.

00:11:56.520 --> 00:12:00.130
Jadi mari kita lihat ini.

00:12:00.230 --> 00:12:06.460
Kami melihat di sini bahwa kami memiliki lagi 500 pencarian menyelesaikan tidak ada kesalahan.

00:12:06.460 --> 00:12:14.920
Sama seperti sebelumnya tetapi latensi rata-rata adalah 2. 3 milidetik berbanding 5. 1 milidetik ketika kami memiliki

00:12:14.920 --> 00:12:16.350
penyeimbang beban.

00:12:16.360 --> 00:12:18.000
Hmm menarik.

00:12:18.430 --> 00:12:24.370
Jadi tidak memiliki keseimbangan rendah di sini sebenarnya lebih cepat di sini karena semua metrik sama

00:12:24.370 --> 00:12:27.710
kecuali fakta bahwa latensi rata-rata jauh lebih cepat.

00:12:28.090 --> 00:12:30.130
Dan itu mungkin masuk akal.

00:12:30.130 --> 00:12:36.190
Satu karena kita tidak terlalu banyak memukul dengan lalu lintas terlalu banyak.

00:12:36.370 --> 00:12:42.370
Dan juga fakta bahwa kita menjalankan penyeimbang rendah ini dalam satu wadah yang memiliki penyeimbang rendah dan tiga server

00:12:42.370 --> 00:12:45.790
web dalam kehidupan nyata kita tidak akan benar-benar melakukan ini.

00:12:45.790 --> 00:12:53.140
Masing-masing layanan tersebut akan berada pada mesin yang berbeda wadah yang berbeda sehingga menyebabkan

00:12:53.140 --> 00:12:54.790
sedikit keterlambatan juga.

00:12:54.790 --> 00:12:56.580
Tetapi mari kita tambahkan beberapa hal lagi.

00:12:56.590 --> 00:12:58.840
Katakanlah sekarang saya ingin memiliki

00:13:02.290 --> 00:13:04.340
500 permintaan per detik.

00:13:04.510 --> 00:13:07.830
Saya akan menekan enter.

00:13:07.850 --> 00:13:08.290
Baiklah.

00:13:08.300 --> 00:13:08.810
Itu bagus.

00:13:08.810 --> 00:13:10.050
Kami tidak mendapatkan kesalahan.

00:13:10.070 --> 00:13:12.290
Itu bisa menyelesaikan permintaan.

00:13:12.290 --> 00:13:13.020
Itu keren.

00:13:13.130 --> 00:13:13.840
Bagaimana jika saya melakukannya.

00:13:13.850 --> 00:13:18.160
Terlebih lagi bagaimana jika saya melakukan seribu permintaan bersamaan.

00:13:22.070 --> 00:13:23.630
Baiklah, jadi itu bekerja.

00:13:23.630 --> 00:13:26.900
Ini memiliki dua ribu sembilan ratus delapan puluh sembilan permintaan lengkap.

00:13:26.900 --> 00:13:32.240
Mari kita jalankan dokumen atau menyusun penyeimbang beban dan melihat bagaimana itu akan bekerja.

00:13:37.440 --> 00:13:41.550
Sekali lagi saya akan menjalankan hal yang sama tetapi kali ini pada port 80.

00:13:41.730 --> 00:13:43.170
Mari kita jalankan itu.

00:13:43.380 --> 00:13:45.500
Kepala kami melakukan beberapa pekerjaan dan

00:13:49.280 --> 00:13:50.680
beberapa pekerjaan rumah.

00:13:50.780 --> 00:13:53.860
Angka-angka itu tidak terlihat sangat baik.

00:13:54.650 --> 00:14:04.970
Kami memiliki latensi rata-rata 140 milidetik versus 2. 9 detik dan permintaan yang diselesaikan sebenarnya kurang dari saat

00:14:05.030 --> 00:14:07.850
kami memiliki satu server.

00:14:08.390 --> 00:14:16.010
Dan lagi karena kita menjalankan ini pada sebuah wadah, ini lebih lambat daripada jika dia benar-benar menerapkan load

00:14:16.010 --> 00:14:23.530
balancing dengan benar tetapi menggunakan alat ini saya ingin Anda bermain-main dan bereksperimen dengan hal-hal yang berbeda.

00:14:23.580 --> 00:14:30.450
Lihat apakah ia dapat membuat penyeimbang beban ini lebih cepat daripada metode host lokal.

00:14:30.450 --> 00:14:35.850
Pikiran Anda jika Anda menjalankan wadah Anda mungkin tidak mendapatkan itu tetapi melihat seberapa jauh Anda harus pergi untuk membuat ini

00:14:35.850 --> 00:14:36.370
gagal.

00:14:37.710 --> 00:14:44.850
Saya harap Anda memiliki ide yang bagus untuk menjalankan load balancer bagaimana mungkin itu bekerja bagaimana Anda dapat menerapkan dan juga

00:14:44.850 --> 00:14:51.150
bagaimana melakukan sesuatu seperti pengujian beban untuk melihat seberapa baik server Anda dalam mendapatkan permintaan dan ketika Anda

00:14:51.150 --> 00:14:56.580
mungkin perlu benar-benar meningkatkan mungkin memiliki lebih banyak server mungkin memiliki penyeimbang beban di depan server

00:14:56.580 --> 00:14:57.160
Anda.

00:14:59.130 --> 00:14:59.700
Baiklah.

00:14:59.700 --> 00:15:04.230
Pergi bersenang-senang di luar sana dan tes rendah dan bersenang-senang dengan alat tes rendah.

00:15:04.410 --> 00:15:05.650
Saya akan melihat yang berikutnya.

00:15:05.920 --> 00:15:06.460
Sampai jumpa.