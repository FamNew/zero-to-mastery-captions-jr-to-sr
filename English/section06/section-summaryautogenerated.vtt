WEBVTT

00:01.110 --> 00:03.070
Hey it's Bruno here.

00:03.150 --> 00:06.130
This is fan tactic.

00:06.150 --> 00:08.200
I can't believe how many tests you wrote.

00:08.390 --> 00:11.770
Oh man I'm looking forward to not having as many bugs in our app.

00:11.820 --> 00:13.100
Really thankful for your work.

00:13.120 --> 00:18.030
And you know I hope you understand that I really value your contribution to our team.

00:18.150 --> 00:19.720
KCl Corp. thanks you.

00:21.590 --> 00:22.540
All right.

00:22.730 --> 00:30.710
We finished a pretty tough section I think testing is one of those things that can really stump people

00:31.400 --> 00:33.880
and can really frustrate you as well.

00:34.880 --> 00:38.820
But we're no longer junior developers here when it comes to testing.

00:39.110 --> 00:42.860
We understand their purposes and their limitations.

00:42.880 --> 00:50.290
We learned that there are three main types of tests which are unit tests integration tests automation

00:50.290 --> 00:57.620
tests and that out of all these three unit tests are the easiest to write.

00:57.920 --> 01:05.570
And also the cheapest for companies to use as a tool for us to minimize bugs.

01:06.860 --> 01:12.920
And you usually want to run unit tests with integration tests completely separate in a separate process

01:13.130 --> 01:18.120
from something like automation test the top that can get pretty complicated.

01:18.130 --> 01:22.570
But luckily for us there's a ton of libraries that we can use.

01:22.600 --> 01:28.480
We also learned all the tools that are available in the Akos ecosystem for us to test at the end of

01:28.480 --> 01:33.970
the day though they're all very similar and they all try to accomplish the same thing simply tests our

01:33.970 --> 01:42.460
code assert some statements run these tests maybe spy on some functions and then see the output make

01:42.460 --> 01:46.780
sure they're pass and make sure that we have a good code coverage.

01:46.780 --> 01:53.680
But we also learned that having a perfect code coverage isn't necessarily what you want to do.

01:53.680 --> 01:58.600
You never want to just strive for 100 percent code coverage because at the end of the day those are

01:58.600 --> 01:59.980
just numbers.

01:59.980 --> 02:04.290
Everything depends on your application and what your goals are.

02:05.530 --> 02:07.550
So be careful with code coverage.

02:07.630 --> 02:12.850
It's really easy to get stuck in a hole where you're just writing tests that are good but you're just

02:12.850 --> 02:18.350
trying to get that 100 percent focus on the quality of the test versus the quantity.

02:19.710 --> 02:27.110
We learn how tests can be run in different environments and we also learned that re-act has enzyme and

02:27.120 --> 02:31.730
snapshot testing to really help us out with component rendering.

02:31.800 --> 02:35.590
They all made writing tests a lot simpler.

02:35.610 --> 02:40.510
Finally we have a better idea of the testing environment.

02:40.530 --> 02:50.220
Tests are simply a way for us to use in development to make sure that our code as it grows is maintainable

02:50.730 --> 02:56.890
and produces less bugs as more people join the team and more people touch the code and code lines increase

02:57.960 --> 03:01.130
using all the tools that we have at our disposal.

03:01.170 --> 03:05.460
We're able to be smart about the tests that we write.

03:05.510 --> 03:10.940
We're focusing on what is important to test what are the key features of our apps that we want to make

03:10.940 --> 03:19.000
sure we test properly and we want to make sure that these tests are not complicated.

03:19.100 --> 03:20.840
They're very nice and readable.

03:20.840 --> 03:25.950
So if anybody comes onto the team they understand what the tests do.

03:25.950 --> 03:35.180
Remember if a test becomes complicated perhaps there's something in your actual code that could be fix

03:36.340 --> 03:40.420
don't think of tests or something that you do after you finish all your code.

03:40.420 --> 03:46.090
Some people actually enjoy doing them before you write your real code so that it gives you ideas of

03:46.090 --> 03:49.840
how to structure your code in a nice clean fashion.

03:50.750 --> 04:00.280
So think about this make tests that are of good quality not just quantity and write your code so that

04:00.370 --> 04:04.100
they're in nice simple testable units.

04:05.670 --> 04:07.420
Good job getting this far.

04:07.560 --> 04:09.750
I'll see in the next section Buh-Bye.
