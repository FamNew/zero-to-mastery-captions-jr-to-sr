WEBVTT

00:00:02.400 --> 00:00:05.230
Tarif kami yakin untuk membaca lebih banyak tes.

00:00:05.230 --> 00:00:09.340
Tetapi sampai sekarang kami hanya bekerja dengan beberapa komponen sederhana.

00:00:09.470 --> 00:00:15.940
Bagaimana jika kita ingin bekerja dengan sesuatu seperti wadah yang digunakan oleh anjing top Kita memiliki semua peta ini

00:00:15.940 --> 00:00:17.000
untuk disangga.

00:00:17.200 --> 00:00:23.890
Ini juga merupakan komponen yang terhubung.

00:00:23.930 --> 00:00:27.870
Bagaimana kita mengujinya.

00:00:28.030 --> 00:00:29.380
Mari kita coba.

00:00:30.290 --> 00:00:34.980
Saya akan membuat file baru dan menyebutnya tes bakat.

00:00:35.050 --> 00:00:35.700
Iya nih.

00:00:37.810 --> 00:00:46.870
Dan tes bakat ini ya lagi dan kita tidak bisa hanya melalui gerakan dan menyalin satu tes terakhir.

00:00:46.880 --> 00:00:56.140
Mari kita lakukan ini dan kali ini alih-alih conurbation itu akan naik.

00:00:56.260 --> 00:01:01.410
Dan lagi kami tidak akan menerima warna.

00:01:01.480 --> 00:01:03.580
Mari kita jalankan ini dan lihat apa yang terjadi.

00:01:03.580 --> 00:01:04.240
Oh, sebenarnya.

00:01:04.300 --> 00:01:05.780
Biarkan saya menghapus ini juga.

00:01:05.860 --> 00:01:08.510
Menyimpan.

00:01:08.760 --> 00:01:09.390
Baiklah.

00:01:09.390 --> 00:01:11.020
Saya mendapatkan beberapa kesalahan.

00:01:11.130 --> 00:01:17.960
Dikatakan berharap untuk membuat komponen aplikasi yang ada di sini tapi saya mendapatkan kesalahan dengan

00:01:17.970 --> 00:01:24.920
mengatakan bahwa pelanggaran invarian tidak dapat menemukan toko baik dalam konteks atau properti dari aplikasi terhubung.

00:01:24.930 --> 00:01:36.070
Baiklah jadi mari kita mengunci toko yang bisa Anda katakan Konst kunci toko sama dengan mengatakan objek kosong untuk saat ini.

00:01:36.430 --> 00:01:47.550
Atau mari kita lakukan robot dari array kosong dan mari kita lakukan bidang pencarian atau yakin Sir.

00:01:47.990 --> 00:01:52.410
Itu adalah string kosong dan kita hanya akan melewati toko tiruan

00:01:55.250 --> 00:01:56.080
ini

00:02:01.460 --> 00:02:07.180
sebagai proc toko dan seluruh anak laki-laki yang saya dapatkan mendapatkan status bukan fungsi.

00:02:07.310 --> 00:02:09.350
Dan itu masuk akal, benar.

00:02:09.350 --> 00:02:17.330
Jika Anda ingat toko kami bukan hanya benda kosong atau benda tiruan.

00:02:17.390 --> 00:02:23.690
Maksud saya ini adalah istilah redoks tetapi juga datang dengan semua hal-hal lain yang kita

00:02:23.690 --> 00:02:26.620
tidak benar-benar pikirkan ketika kita menginstal.

00:02:26.720 --> 00:02:32.390
Kami telah mendapatkan status berlangganan dan semua metode lain yang menyertainya.

00:02:32.420 --> 00:02:40.420
Jadi itu berarti kita harus mengolok-olok seluruh daftar metode toko yang muncul dengan redux.

00:02:40.460 --> 00:02:45.930
Dan jika pembaruan redux dan menambahkan sesuatu yang baru di masa depan kita harus memperbarui itu juga.

00:02:46.280 --> 00:02:51.390
Dan untungnya bagi kami ada alat yang sudah melakukan ini untuk Anda.

00:02:51.650 --> 00:03:02.810
Misalnya ada paket yang disebut toko kunci redux yang dapat Anda gunakan untuk benar-benar mengejek toko ini dan memiliki

00:03:02.810 --> 00:03:06.320
metode yang tepat di atasnya.

00:03:06.320 --> 00:03:08.780
Dan itu paket NPM yang bisa kita pasang.

00:03:08.780 --> 00:03:11.500
Tetapi saya ingin mengambil rute yang berbeda.

00:03:11.600 --> 00:03:20.480
Saya ingin mengambil rute kesederhanaan karena sekarang melihat aplikasi ini dot J. S. File Kami sedang melakukan

00:03:20.480 --> 00:03:27.890
banyak hal dan saya suka tes tes sederhana yang menguji hal-hal sederhana.

00:03:28.130 --> 00:03:35.540
Dan aplikasi ini yang sejujurnya sedikit rumit karena kami memiliki koneksi ini sehingga secara

00:03:35.540 --> 00:03:40.050
teknis bahkan tidak membuat aplikasi itu membuat Canet.

00:03:40.290 --> 00:03:42.270
Dan kemudian itu adalah ratbite.

00:03:42.810 --> 00:03:50.280
Biarkan saya menunjukkan kepada Anda apa yang saya maksud jika saya kembali ke aplikasi kami dan membuka alat pengembang

00:03:50.280 --> 00:03:57.510
ulangan kami Anda mungkin harus mengunduh plug ini dan jika Anda belum memilikinya, saya melihat bahwa aplikasi saya

00:03:57.540 --> 00:03:59.990
adalah penyedia dan terhubung ke aplikasi.

00:04:00.130 --> 00:04:09.620
Jadi aplikasi ini yang sebenarnya kami uji adalah komponen Kinect ini yang membungkus aplikasi dan hanya di dalamnya.

00:04:09.640 --> 00:04:14.970
Kami memiliki aplikasi dan kemudian kotak pencarian Hetter gulir dan seterusnya dan sebagainya.

00:04:16.430 --> 00:04:17.650
Mari sederhanakan ini.

00:04:17.660 --> 00:04:23.910
Mengapa tidak hanya menguji aplikasi kita dan bukannya menguji komponen yang terhubung.

00:04:24.560 --> 00:04:33.400
Dan inilah yang ingin saya lakukan ketika saya menguji sesuatu daripada mencoba menguji komponen yang sangat rumit.

00:04:33.490 --> 00:04:39.640
Saya bertanya pada diri sendiri apakah komponen ini sesederhana mungkin apakah ada hal-hal yang lebih baik yang dapat saya

00:04:40.090 --> 00:04:42.760
lakukan dengan kode untuk membuatnya lebih dapat diuji.

00:04:42.850 --> 00:04:45.800
Yang biasanya menghasilkan kode yang lebih baik secara keseluruhan.

00:04:55.350 --> 00:05:00.010
Jadi melihat ini komponen aplikasi ini melakukan dua hal utama.

00:05:00.060 --> 00:05:04.430
Yang terhubung ke toko kotak baca.

00:05:04.530 --> 00:05:08.100
Melalui semua peta ini mengatakan dua alat peraga dan peta dikirim ke alat peraga.

00:05:08.310 --> 00:05:11.900
Tapi itu juga membuat satu ton tenggelam.

00:05:11.940 --> 00:05:14.550
Jadi mari kita pisahkan ini.

00:05:14.550 --> 00:05:23.220
Saya akan membuat file komponen baru dan menyebutnya halaman utama yang dicerna sehingga Anda dapat menganggap ini sebagai halaman

00:05:23.220 --> 00:05:25.020
beranda teman Robur

00:05:28.260 --> 00:05:32.910
kami dan sekarang halaman utama ini juga akan memiliki file uji.

00:05:32.970 --> 00:05:35.400
Jadi saya akan pindah aplikasi.

00:05:35.600 --> 00:05:45.400
Diuji ya untuk benar-benar diubah namanya menjadi halaman utama dan memasukkannya ke folder komponen.

00:05:48.210 --> 00:05:48.920
Baiklah.

00:05:48.990 --> 00:05:53.500
Tes kami gagal tetapi itu karena kami memiliki semua nama kami.

00:05:53.510 --> 00:05:55.660
Jadi mari kita lanjutkan langkah demi langkah ini.

00:05:55.850 --> 00:06:03.110
Mari kita membuat Rajai ass khawatir tentang hanya menghubungkan dan menerima hanya menerima

00:06:03.110 --> 00:06:12.360
alat peraga dari toko dan membuat halaman utama kami peduli dengan merender semua hal halaman rumah ini.

00:06:12.410 --> 00:06:14.030
Jadi bagaimana kita bisa melakukan ini.

00:06:14.570 --> 00:06:21.550
Nah langkah pertama adalah saya akan menyalin seluruh file aplikasi dodgiest ke halaman utama kami.

00:06:21.770 --> 00:06:23.030
Salin dan tempel.

00:06:23.240 --> 00:06:29.190
Dan langsung kelelawar menghapus semua hal redux karena saya tidak perlu apa pun redux.

00:06:29.240 --> 00:06:33.440
Ini akan menjadi komponen sederhana yang tidak terhubung ke toko redux.

00:06:33.620 --> 00:06:43.160
Jadi saya akan menghapus Connect, saya akan menghapus salah satu tindakan dan hanya meninggalkan komponen kami.

00:06:43.160 --> 00:06:54.210
Saya akan menghapus status peta untuk pengiriman peta prop ke prop dan saya akan mengubah nama ini menjadi komponen

00:06:54.600 --> 00:06:59.850
halaman utama dan di mana Anda tidak memiliki CSSA.

00:07:00.040 --> 00:07:04.510
Atau mungkin kita harus memindahkan aplikasi ini ke halaman utama kita.

00:07:04.520 --> 00:07:06.980
Jadi untuk saat ini saya hanya akan membuat sesuatu dengan cepat.

00:07:07.100 --> 00:07:15.410
Saya akan mengatakan file halaman utama dot C Ss baru dan omong-omong Anda mulai melihat mengapa kita mungkin ingin memiliki struktur folder

00:07:15.410 --> 00:07:18.950
yang lebih baik daripada hanya file file file.

00:07:19.010 --> 00:07:24.490
Kami mungkin ingin memiliki komponen dan folder komponen untuk masing-masing komponen ini.

00:07:24.890 --> 00:07:30.280
Dan saya hanya akan menyalin dan menempel di sini dan kembali ke halaman utama kami.

00:07:30.290 --> 00:07:33.380
Kami sekarang memiliki DSS ini,

00:07:36.170 --> 00:07:42.910
kami memiliki konstruktor dan saya tidak tahu mengapa kami menghitung kami di sini.

00:07:42.990 --> 00:07:45.670
Saya tidak berpikir kita perlu menghitung sekarang menggunakannya sama sekali.

00:07:45.750 --> 00:07:48.210
Jadi mari kita hapus saja.

00:07:48.480 --> 00:07:50.460
Jadi kita tidak

00:07:53.560 --> 00:08:00.430
memerlukan konstruktor dan di halaman utama kita lagi tidak ada konstruktor yang

00:08:00.430 --> 00:08:09.760
kita punya komponennya mount karena sementara kita ingin meminta robot dan kita memiliki render reguler kita tetapi

00:08:09.760 --> 00:08:16.090
kita juga tidak memiliki koneksi lagi cukup merender halaman utama kami.

00:08:16.150 --> 00:08:16.690
Baiklah.

00:08:16.690 --> 00:08:26.310
Jadi kami telah menghapus ini dan menjadikannya sebagai aplikasi sederhana yang komponennya masih terpasang tetapi itu hanya prop

00:08:26.430 --> 00:08:29.360
yang kami terima dari toko.

00:08:30.910 --> 00:08:31.540
Baiklah.

00:08:31.570 --> 00:08:33.550
Jadi mari kita masuk ke APTA.

00:08:33.580 --> 00:08:39.900
Ya dan sekarang hapus bagian atas karena kita tidak benar-benar membutuhkannya lagi atau kita tidak perlu

00:08:39.900 --> 00:08:43.260
bagian render kita hanya perlu komponen yang terhubung.

00:08:43.290 --> 00:08:45.240
Jadi sekali lagi di sini.

00:08:45.240 --> 00:08:54.920
Sekarang untuk render kita semua yang perlu kita lakukan adalah menghapus semua ini terasa menyenangkan menghapus hal-hal dan membuat file

00:08:54.920 --> 00:09:01.940
lebih kecil dan semua yang kita butuhkan adalah komponen halaman utama untuk di-render.

00:09:02.180 --> 00:09:02.960
Kanan.

00:09:03.740 --> 00:09:16.200
Jadi kami menghapus semua impor komponen ini dan hanya mengimpor komponen halaman utama lagi.

00:09:16.310 --> 00:09:17.780
Alasan lain saya suka bereaksi.

00:09:17.810 --> 00:09:21.110
Semuanya sangat baik dan sederhana untuk memindahkan komponen.

00:09:21.200 --> 00:09:24.310
Tapi lihat apa yang baru saja kita lakukan sangat cepat.

00:09:24.470 --> 00:09:31.640
Oh kita pasti tidak perlu komponen melakukan mount karena kita melakukan itu di halaman utama.

00:09:31.640 --> 00:09:36.410
Jadi lihat betapa kecilnya komponen itu. Seberapa bagus itu.

00:09:37.380 --> 00:09:43.220
Dan sekarang komponen aplikasi ini baru saja berubah menjadi komponen wadah yang super sederhana.

00:09:43.380 --> 00:09:50.850
Dan ini adalah keputusan arsitektur yang sangat saya sukai karena kami tidak benar-benar perlu menguji

00:09:51.090 --> 00:09:52.020
ini.

00:09:52.050 --> 00:09:53.590
Apakah kita

00:09:53.710 --> 00:10:03.130
Karena semua yang kami lakukan hanya menggunakan fungsi sambung untuk mengambil status dan mengirim acara dari

00:10:03.190 --> 00:10:05.240
toko redock kami.

00:10:05.260 --> 00:10:10.480
Jadi, bahkan menulis tes untuk ini meskipun kami bisa melakukannya, kami hanya menguji fungsionalitas

00:10:10.720 --> 00:10:11.290
redux.

00:10:11.290 --> 00:10:17.500
Dan itu adalah sesuatu yang sudah dilakukan pustaka redux yang sudah memiliki tes dan orang yang bekerja untuk memastikan bahwa

00:10:17.500 --> 00:10:19.110
itu berfungsi dengan baik.

00:10:20.230 --> 00:10:25.290
Komponen ini sekarang menjadi sesuatu yang sangat sederhana sehingga kita bahkan tidak perlu menguji.

00:10:25.810 --> 00:10:33.550
Dan kami telah memindahkan semua logika kami yang dapat kami uji ke komponen halaman utama dan itu adalah sesuatu yang sangat penting

00:10:33.760 --> 00:10:34.790
untuk dipikirkan.

00:10:34.810 --> 00:10:39.400
Untuk selalu mencoba dan membuat tes Anda mudah.

00:10:39.580 --> 00:10:44.620
Jika tidak maka mungkin ada sesuatu dalam kode Anda yang dapat Anda sederhanakan Ngan melihat betapa

00:10:44.620 --> 00:10:45.880
elegannya solusi ini.

00:10:46.030 --> 00:10:51.770
Hal terakhir yang benar-benar ingin kami lakukan hanyalah meneruskan alat peraga ini ke halaman utama.

00:10:52.180 --> 00:11:05.240
Untuk melakukan itu kita bisa menggunakan beberapa destructive atau penyebaran objek, katakanlah dot props ini.

00:11:05.410 --> 00:11:10.210
Mari kita lihat apakah dan benar-benar belum menguji kode ini jadi pastikan masih berfungsi.

00:11:10.300 --> 00:11:11.890
Mari kita jalankan start NPM.

00:11:11.920 --> 00:11:14.920
Tentu ada sesuatu yang mungkin kita lewatkan.

00:11:15.990 --> 00:11:19.490
Mari kita tutup ini.

00:11:19.540 --> 00:11:26.840
Baiklah kami memiliki metode render Anda harus memiliki pernyataan kembali dan ya kita harus benar-benar kembali dari

00:11:26.900 --> 00:11:31.350
pernyataan render ini karena konyol dari kita Sless return.

00:11:34.720 --> 00:11:41.870
Dan kami memiliki sedikit masalah dengan CSSA dan itu karena tidak dapat menemukan font Segev.

00:11:41.930 --> 00:11:43.610
Jadi itu perbaikan sederhana.

00:11:43.700 --> 00:11:51.110
Kami hanya pergi ke sumur dan melakukannya karena font Segev ada di wadah.

00:11:51.320 --> 00:11:59.340
Kami hanya dapat melakukan wadah untuk sekarang walaupun kami mungkin ingin memindahkan ini untuk saat ini

00:11:59.340 --> 00:12:02.360
untuk tujuan demonstrasi yang baik-baik saja.

00:12:02.400 --> 00:12:03.600
Semuanya lewat.

00:12:03.600 --> 00:12:07.380
Jika saya kembali, saya melihat ada beberapa kesalahan lainnya.

00:12:07.530 --> 00:12:17.800
Kami memiliki hitungan Noal dan kami melewati status menghitung di sini di komponen header.

00:12:18.120 --> 00:12:26.460
Tetapi jika Anda ingat komponen Hetter kami memiliki baterai cadangan yang sebenarnya memiliki keadaan sendiri.

00:12:26.470 --> 00:12:29.770
Jadi sepertinya kita melakukan ini tanpa alasan.

00:12:30.130 --> 00:12:36.460
Jadi mari kita hapus saja itu dari sedangkan itu dari halaman utama.

00:12:36.530 --> 00:12:37.120
Iya nih.

00:12:37.190 --> 00:12:42.310
Jadi kita bisa menghapus save yang kembali.

00:12:42.390 --> 00:12:42.840
Baiklah.

00:12:42.840 --> 00:12:45.890
Semuanya berfungsi, pastikan pencarian kami berfungsi.

00:12:46.020 --> 00:12:46.430
Ya.

00:12:46.470 --> 00:12:49.200
Semuanya berfungsi, bekerja.

00:12:49.200 --> 00:13:00.410
Jika saya membuka alat pengembang aksi ulang saya, bukan redux, kami ingin bertindak kembali, kami memiliki penyedianya, kami memiliki aplikasi yang

00:13:00.410 --> 00:13:01.500
terhubung.

00:13:01.550 --> 00:13:02.510
Tapi lihat ini.

00:13:03.700 --> 00:13:14.210
Kami sekarang memiliki halaman utama yang dapat kami uji dan halaman utama ini sekarang lebih mudah diakses oleh kami daripada menggunakan

00:13:14.210 --> 00:13:15.620
enzim saja.

00:13:15.790 --> 00:13:17.300
Jadi mari kita tulis beberapa tes di sini.

00:13:19.270 --> 00:13:23.130
Kita akan masuk ke halaman utama mendapat tes.

00:13:23.200 --> 00:13:31.890
Baiklah, pertama mari kita ubah nama menjadi halaman utama yang sedang kami uji sekarang dan karena saya merasa kita

00:13:31.890 --> 00:13:38.370
akan sering melakukan ini dan mewariskan beberapa alat peraga Ada trik kecil yang

00:13:38.430 --> 00:13:46.220
bisa kita lakukan katakanlah kita Akan memiliki banyak bungkus dan saya akan menghapus ini untuk saat ini.

00:13:48.440 --> 00:13:55.670
Dan kita dapat menggunakan sesuatu yang disebut sebelum masing-masing kembali hadir dengan kerangka pengujian yang adil dan lainnya

00:13:55.760 --> 00:14:00.400
dan ini memastikan bahwa itu berjalan sebelum masing-masing pengujian kita.

00:14:00.410 --> 00:14:08.300
Sekarang di sini kita cukup memberikan fungsi dan di dalam fungsi ini kita dapat mengatakan apa yang harus dijalankan

00:14:08.300 --> 00:14:10.100
sebelum masing-masing tes kita.

00:14:10.100 --> 00:14:15.460
Dalam kasus kami, kami ingin mengejek props dan props tiruan ini.

00:14:15.460 --> 00:14:17.030
Di mana kita akan memiliki.

00:14:17.170 --> 00:14:28.910
Kita akan memiliki robot berdasarkan permintaan yang jika Anda ingat mari kita tutup ini dan tutup ini jadi

00:14:28.910 --> 00:14:31.020
sedikit lebih bersih.

00:14:31.240 --> 00:14:37.300
Jika Anda ingat halaman utama memiliki fungsi robot berdasarkan permintaan.

00:14:37.300 --> 00:14:43.930
Jadi kita tidak bisa hanya melakukan fungsi adil di sini yang telah kita lihat sebelumnya dengan mengejek.

00:14:43.930 --> 00:14:46.780
Jadi kami hanya mengatakan bahwa ini hanyalah fungsi sederhana ini.

00:14:46.780 --> 00:14:49.520
Jangan khawatir untuk benar-benar melakukan panggilan API.

00:14:49.720 --> 00:14:52.260
Kami akan mengatakan bahwa robot adalah array kosong.

00:14:54.410 --> 00:15:08.230
Bidang pencarian itu akan menjadi string kosong dan yang tertunda akan disetel ke false.

00:15:08.320 --> 00:15:15.850
Dan akhirnya karena kita memiliki ini untuk masing-masing atau sebelum masing-masing. Kita akan

00:15:15.850 --> 00:15:19.420
mengatakan bahwa rapper akan menyamai halaman

00:15:22.120 --> 00:15:30.190
utama yang diberikan dangkal dan halaman utama ini lagi seperti yang kita lakukan di apt.

00:15:30.280 --> 00:15:35.400
Ya bisa saja menerima alat peraga.

00:15:35.640 --> 00:15:42.680
Itu adalah alat peraga tiruan.

00:15:42.720 --> 00:15:47.490
Jadi ini akan menerima semua properti ini seperti yang kami lakukan di apt.

00:15:47.610 --> 00:15:48.260
Iya nih.

00:15:48.360 --> 00:15:49.220
Lihat gading itu di sini.

00:15:54.040 --> 00:15:54.380
Baiklah.

00:15:54.420 --> 00:16:02.770
Jadi katakanlah jika Anda akan kembali menjalankan tes NPM dan kami memiliki beberapa kesalahan karena baik itu bukan titik

00:16:02.770 --> 00:16:04.240
koma yang koma.

00:16:04.240 --> 00:16:12.110
Arch musuh saya koma dan kami mendapatkan kesalahan mengatakan bahwa suite pengujian kami harus berisi satu tes karena kami

00:16:12.170 --> 00:16:13.490
belum membaca satu.

00:16:13.850 --> 00:16:16.580
Kami baru saja menulis sebelumnya.

00:16:16.590 --> 00:16:18.330
Sekarang mari kita mulai dengan dasar-dasarnya.

00:16:18.350 --> 00:16:31.530
Itu membuat halaman utama tanpa menabrak dan kita akan mengatakan bahwa sementara kita dapat menggunakan pengujian snapshot alat uji favorit kita, kita bisa mengatakan

00:16:31.830 --> 00:16:38.820
mengharapkan pembungkus karena sekarang kita memiliki akses ke pembungkus ini yang dibuat

00:16:38.820 --> 00:16:47.780
dangkal karena sebelum masing-masing akan berjalan sebelum ini menguji dan saya akan mengatakan untuk mencocokkan snapshot.

00:16:48.270 --> 00:16:54.750
Saya suka betapa mudahnya ini mari kita simpan.

00:16:54.910 --> 00:16:57.270
Dan apa yang saya berantakan di sini.

00:16:57.490 --> 00:16:57.860
Wow.

00:16:57.910 --> 00:17:00.290
Saya menulis koma yang mengerikan.

00:17:01.600 --> 00:17:03.090
Baiklah, pergilah.

00:17:03.160 --> 00:17:07.650
Anda pasti hanya menertawakan saya sekarang dengan semua koma yang saya lewatkan saat saya kode.

00:17:07.660 --> 00:17:10.790
Tapi hei kita semua manusia di sini kita semua membuat kesalahan.

00:17:10.810 --> 00:17:16.100
Saya tidak berpikir pernah ada pengembang sempurna yang tidak membuat kesalahan saat coding.

00:17:16.210 --> 00:17:16.730
Jika ada.

00:17:16.730 --> 00:17:19.030
Yah, aku sangat iri pada mereka.

00:17:19.030 --> 00:17:19.360
Baiklah.

00:17:19.390 --> 00:17:24.140
Mari kita coba hal lain katakanlah saya ingin memastikan bahwa itu menyaring robot dengan benar.

00:17:24.160 --> 00:17:28.640
Jadi saya akan mengatakan itu menyaring robot dengan benar.

00:17:29.570 --> 00:17:42.770
Dan saya hanya akan mengatakan bahwa di sini kita mengharapkan rapper dan bagaimana kita melakukan ini.

00:17:42.800 --> 00:17:44.450
Jika kita pergi ke halaman utama da J. S.

00:17:47.240 --> 00:17:55.990
kami memiliki robot penyaring di sini tapi itu terjadi dalam fungsi render.

00:17:56.030 --> 00:18:07.500
Jadi mari kita bersihkan ini dan katakan bahwa kita memiliki robot filter dan robot filter ini akan menerima robot

00:18:07.520 --> 00:18:13.000
dan itu akan hampir membuatnya atau fungsi Nera dan

00:18:18.590 --> 00:18:21.020
kita bisa mengambil ini

00:18:25.010 --> 00:18:26.480
dan

00:18:29.770 --> 00:18:32.170
mengembalikan robot yang difilter.

00:18:32.170 --> 00:18:40.870
Kita akan membutuhkan bidang pencarian di sini lagu dan mengatakan ini dot props bidang pencarian dot untuk huruf kecil

00:18:41.060 --> 00:18:51.610
Dan sekarang di sini kita bisa mengatakan bahwa robot filter datang dari robot filter dot ini.

00:18:51.620 --> 00:18:53.330
Mari kita pastikan ini berjalan.

00:18:53.330 --> 00:18:55.810
Saya akan kembali dan menjalankan start

00:18:59.740 --> 00:19:03.420
NPM dan sepertinya saya membuat kesalahan di suatu tempat di sini.

00:19:03.730 --> 00:19:10.840
Kita harus benar-benar mewariskan robot itu sendiri atau mengatakan itu akan menerima robot atau kita bahkan dapat melakukan ini

00:19:10.840 --> 00:19:17.490
di sini untuk analisis biarkan seperti itu dan pastikan kita memiliki penamaan yang benar di sini.

00:19:17.530 --> 00:19:19.540
Saring robot. Mari kita kembali.

00:19:20.800 --> 00:19:22.290
Baiklah masih bekerja.

00:19:23.070 --> 00:19:30.400
Jadi sekarang saya telah membuat ini sedikit lebih bersih dalam fungsi render kami dan mari kita

00:19:30.400 --> 00:19:36.430
hapus saja kolom pencarian dari Anda, bagaimana saya bisa benar-benar menguji ini.

00:19:36.430 --> 00:19:47.990
Kita sekarang dapat dengan mudah menguji metode ini pada kelas halaman utama dengan baik kita sekarang dapat menggunakan properti instance

00:19:49.050 --> 00:19:51.600
yang datang dengan enzim.

00:19:51.990 --> 00:19:58.530
Dan sekarang contoh ini akan memberi kita akses ke semua metode yang dimiliki halaman utama termasuk folder

00:19:58.530 --> 00:19:59.220
robot.

00:19:59.430 --> 00:20:10.470
Jadi katakanlah dalam pengujian kami, saya akan memindahkan ini, saya akan mengatakan robot filter Dot akan menjalankan filter robot

00:20:10.500 --> 00:20:13.470
dengan katakanlah sebuah array kosong.

00:20:15.260 --> 00:20:20.660
Dan kami berharap itu sama dengan array kosong.

00:20:20.750 --> 00:20:31.020
Jadi mari kita simpan dan jalankan mulai NPM atau tes NPM.

00:20:31.260 --> 00:20:32.760
Kami memiliki tes yang gagal.

00:20:35.220 --> 00:20:38.040
Dan saya membuat sedikit kesalahan di sini.

00:20:38.130 --> 00:20:43.010
Xpect harus berada di sekitar semua ini.

00:20:43.020 --> 00:20:48.320
Kami ingin berharap bahwa filter robekan dan kami ingin menyamakan array kosong.

00:20:48.390 --> 00:20:51.130
Mari kita selamatkan kesakitan.

00:20:51.150 --> 00:20:52.560
Semuanya lewat.

00:20:52.830 --> 00:20:59.460
Tapi mari kita uji kasus lain karena sementara ini kemungkinan besar tidak akan menjadi

00:20:59.550 --> 00:21:04.860
kasus katakanlah kali ini dalam pernyataan ini hanya meskipun kita mendapatkan

00:21:04.860 --> 00:21:13.020
sebelumnya masing-masing dan kami memiliki akses ke pembungkus kali ini kami ingin kasus khusus di mana alat

00:21:13.020 --> 00:21:16.760
peraga tiruan akan memiliki bidang pencarian a.

00:21:16.960 --> 00:21:34.670
Dan di sini kita memiliki robot yang misalkan Id tiga dengan nama John dan email Wolf membebaskan nama pengguna untuk

00:21:34.670 --> 00:21:41.080
sekarang John di gmail dot com.

00:21:41.240 --> 00:21:45.510
Mari kita simpan ini dan buat pernyataan xpect baru.

00:21:45.510 --> 00:22:02.240
Sekarang dan hanya untuk tes ini kita akan menggunakan pembungkus yang berbeda sehingga malas untuk mengatakan pembungkus dengan saya tahu ini bukan yang terbersih tetapi mencoba untuk menggambarkan suatu titik

00:22:02.240 --> 00:22:06.220
di sini jadi tahan dengan saya.

00:22:06.320 --> 00:22:08.500
Jadi mari kita lakukan alat peraga tiruan.

00:22:09.590 --> 00:22:11.480
Dua alat peraga tiruan juga.

00:22:11.720 --> 00:22:14.120
Dan ini akan menjadi rapper juga.

00:22:14.120 --> 00:22:24.870
Jadi katakanlah jika rapper menyimpan dan menilai robot filter dengan benar dan Anda tahu apa yang baru saya sadari saya pikir

00:22:24.930 --> 00:22:33.900
cara yang lebih baik bagi kita untuk melakukan filter robot untuk setidaknya sekarang adalah kita bisa melupakan alat

00:22:33.900 --> 00:22:39.380
peraga dan kita bisa melakukan ini dot ini robot penyangga.

00:22:41.980 --> 00:22:47.480
Jadi kembali ke sini kita sekarang dapat menghapus array sehingga hanya terlihat sedikit lebih bersih.

00:22:48.840 --> 00:22:52.710
Dan mari kita buat tes lulus ini.

00:22:52.710 --> 00:22:58.860
Kami mendapatkan sedikit kesalahan di sini karena kami perlu melakukan pembungkus Konst juga karena Rapparee tidak didefinisikan.

00:22:58.860 --> 00:23:05.480
Ingat kita harus mendefinisikannya dan tes kita lulus karena bidang pencarian kita adalah a.

00:23:05.540 --> 00:23:09.410
Dan kami hanya punya robot dengan John dan John Ajimobi.

00:23:09.620 --> 00:23:19.300
Tetapi jika saya mengubah ini menjadi John O-ho itu gagal karena kami berharap untuk menyamai robot yang sebenarnya

00:23:19.300 --> 00:23:21.070
dengan John di.

00:23:21.220 --> 00:23:31.140
Untuk sekarang kita bisa mengatakan bahwa kita mengharapkan array ini dikembalikan dan saya akan menghapus yang pertama.

00:23:31.660 --> 00:23:32.260
Ayo

00:23:35.910 --> 00:23:37.820
simpan dan dapatkan ekstra.

00:23:38.000 --> 00:23:39.130
Kurung blart di sini.

00:23:39.130 --> 00:23:40.000
Sekali lagi ini bagus.

00:23:40.000 --> 00:23:42.720
Tes kami gagal dan kami berupaya melewatinya.

00:23:43.030 --> 00:23:47.670
Baiklah dan sekarang kita tahu bahwa robot penyaring bekerja dengan benar.