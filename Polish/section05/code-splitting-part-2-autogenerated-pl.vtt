WEBVTT

00:00:01.970 --> 00:00:06.420
I witajcie, nadszedł czas, aby w końcu zaimplementować pewne dzielenie kodu.

00:00:06.830 --> 00:00:08.480
Rzućmy okiem na nasze pliki.

00:00:09.560 --> 00:00:16.870
Aby korzystać z dzielenia kodu, musimy nauczyć się nowej składni, chociaż nie jest to nowa składnia.

00:00:16.970 --> 00:00:19.730
Ale to jest to słowo kluczowe importu.

00:00:19.730 --> 00:00:24.050
Zwykle znajduje się na samym szczycie plików przy pomocy aplikacji "Utwórz ponownie".

00:00:24.110 --> 00:00:30.680
Jeśli umieścimy import w dowolnym miejscu wewnątrz naszego kodu, to nie na górze pliku

00:00:31.550 --> 00:00:40.280
będzie wiedziało, że to NIE jest dynamicznym importem, a co oznacza, że będę go zaimportować tylko wtedy, gdy zażąda

00:00:40.280 --> 00:00:45.480
tego kod i dzieje się to pod maską z jaką ścieżką.

00:00:45.560 --> 00:00:53.700
Dlatego za pomocą importu automatycznie informujemy o tym, aby podzielić kod, co jest super super fajne.

00:00:54.170 --> 00:00:55.430
Chodźmy do Douga.

00:00:55.460 --> 00:00:56.600
Tak.

00:00:56.600 --> 00:01:03.870
I zacząć od dzielenia kodu tutaj w Brender z podziałem kodu.

00:01:03.990 --> 00:01:05.430
Skomentuj to.

00:01:05.490 --> 00:01:17.920
Chcemy czegoś innego przy dzieleniu kodu, możemy to zrobić idealnie, jeśli ta trasa danych stanie wywoła

00:01:19.690 --> 00:01:22.170
stronę 1.

00:01:22.360 --> 00:01:32.520
Zwrócimy stronę 1 przy zmianie trasy, która jest równa Daut podczas zmiany trasy.

00:01:32.530 --> 00:01:33.160
W porządku.

00:01:33.160 --> 00:01:39.580
To nie wygląda inaczej i to dlatego, że jest dokładnie taki sam, ale dlatego, że jest to domyślna

00:01:39.580 --> 00:01:40.200
strona.

00:01:40.330 --> 00:01:41.710
W porządku.

00:01:41.710 --> 00:01:43.910
Kolejna część jest inna.

00:01:43.990 --> 00:01:45.250
Możemy

00:01:47.600 --> 00:02:06.040
powiedzieć, że w przeciwnym razie zwrócimy ten punktowy komponent DOT na pojazdach zmieniających drogę, aby rozpocząć zmianę świętego Moly, co się właśnie wydarzyło.

00:02:06.140 --> 00:02:09.170
Czy to jest nawet dozwolone.

00:02:09.640 --> 00:02:17.230
Wrócę do tego, ale na razie pamiętajcie, że wszystko, co robimy, mówi po prostu

00:02:17.230 --> 00:02:25.080
Rander pierwsza strona, jeśli trasa jest czymś innym niż Strona 1, wtedy musimy zrobić coś zabawnego.

00:02:25.400 --> 00:02:26.970
I pozwól mi to zamknąć.

00:02:27.720 --> 00:02:34.200
Przede wszystkim widzimy, że istnieje komponent DOT stanu, od którego pochodzi.

00:02:34.500 --> 00:02:36.160
Cóż, tworzymy to.

00:02:36.300 --> 00:02:46.690
Mówimy, że teraz mamy stan nazywany komponentem, a ten komponent teraz będzie dla nas renderował ph 2 i na

00:02:46.710 --> 00:02:55.290
razie możemy zostawić go jako pusty ciąg, ponieważ tak naprawdę nie wczytaliśmy jeszcze strony 2

00:02:55.290 --> 00:02:56.620
ani ciast.

00:02:57.090 --> 00:03:06.440
Teraz przy zmianie wiersza jest to miejsce, w którym robimy coś trochę innego bez dzielenia kodu.

00:03:06.550 --> 00:03:11.110
Właśnie to mieliśmy, ale przy dzieleniu kodu zaczynamy

00:03:16.390 --> 00:03:19.270
używać tego dynamicznego importu.

00:03:19.300 --> 00:03:32.070
Mówiłem ci o tym, że będziemy mieli tę samą logikę, jeśli trasa jest równa 1, ale ta myśl ustawiła

00:03:32.070 --> 00:03:42.550
się dobrze, po prostu masz trasę równą repped, ponieważ na Page 1 chcemy po prostu zachować

00:03:42.700 --> 00:03:50.000
wszystko tak jak przedtem dwa pozostałe, które zamierzamy dynamicznie importować.

00:03:50.320 --> 00:04:05.240
Będziemy mieć trasę, która przekierowuje wywołania ph do i tutaj, ponieważ nie będziemy mieć ph zbyt dostępnego dla nas, ponieważ

00:04:05.240 --> 00:04:12.050
nie będziemy ładować go, bo nie zamierzamy importować żadnych

00:04:12.050 --> 00:04:13.600
tych.

00:04:13.690 --> 00:04:20.920
Zaimportujemy je tutaj dynamicznie, gdy dojdziemy do tej linii javascript, ponieważ nasza aplikacja działa w

00:04:20.920 --> 00:04:22.050
naszej przeglądarce.

00:04:22.060 --> 00:04:26.340
Właśnie wtedy chcemy je zaimportować lub załadować.

00:04:26.420 --> 00:04:29.120
Powiemy, że importujemy, a przy okazji

00:04:32.780 --> 00:04:38.660
działa to tylko z powodu mokrego pakowania i sposobu, w jaki rzeczy są konfigurowane.

00:04:38.660 --> 00:04:44.750
Jeśli spróbujesz zrobić to w zwykłym starym javascriptie, spowoduje to błąd, ponieważ nie rozumie,

00:04:44.750 --> 00:04:46.180
co próbujesz zrobić.

00:04:46.190 --> 00:04:54.660
Zamierzamy powiedzieć, że będziemy ładować stronę komponentów.

00:04:54.820 --> 00:04:59.680
Więc widzisz, że zmieniliśmy import z tutaj na importowanie tutaj.

00:05:01.910 --> 00:05:05.770
A to jest asynchroniczne.

00:05:05.880 --> 00:05:10.320
Oznacza to, że zwraca obietnicę.

00:05:10.320 --> 00:05:20.440
Tak więc możemy użyć kropki, aby powiedzieć, co ta strona została zaimportowana, została pobrana.

00:05:20.640 --> 00:05:33.480
Następnie otrzymujemy stronę do komponentu i dzięki tej otrzymanej stronie do składnika możemy teraz ustawić ten stan zestaw

00:05:33.930 --> 00:05:46.650
kropek, aby mieć trasę trasy, ponieważ jest to tylko strona 2, ale także aktualizować stan składnika, który

00:05:46.650 --> 00:05:51.330
mamy tutaj, aby strona była równa.

00:05:51.330 --> 00:05:58.130
Teraz mamy dostęp do strony do komponentu przez stan początkowy.

00:05:58.170 --> 00:06:02.240
Wiem, że wygląda to trochę dziwnie, ale jest to coś, do czego musisz się przyzwyczaić.

00:06:02.550 --> 00:06:04.600
Przy okazji może to być również wartość pusta.

00:06:04.620 --> 00:06:06.450
Ale na razie pusty ciąg jest w porządku.

00:06:06.450 --> 00:06:09.230
Nie będziemy się o to zbytnio martwić.

00:06:09.330 --> 00:06:16.140
Teraz mamy stronę, która jest dla nas zbyt dostępna, ponieważ jeśli trasa jest na

00:06:16.140 --> 00:06:25.480
drugiej stronie, zamierzamy zaimportować i pobrać wklejony komponent, to otrzymamy ten komponent i zaktualizujemy go do naszego aktualnego stanu tutaj na

00:06:25.510 --> 00:06:26.140
dole.

00:06:26.140 --> 00:06:27.460
To ma sens.

00:06:27.460 --> 00:06:34.990
Mówimy po prostu, że uzyskujemy dostęp do tego komponentu DOT dot-punktu i jesteśmy

00:06:34.990 --> 00:06:46.290
w stanie wykonać tę zabawną składnię, która używa GSX, ponieważ ten komponent dot-stan jest komponentem Riak, do którego jest strona.

00:06:46.550 --> 00:06:49.520
Wiem, że kiedy ludzie to widzą, naprawdę mają z tym problemy.

00:06:49.520 --> 00:06:52.370
Pokażę ci, jak możesz później zrobić to czystsze.

00:06:52.370 --> 00:06:56.850
Ale chcę ci naprawdę pokazać, że właśnie robimy ten komponent.

00:06:57.290 --> 00:06:59.410
Zakończmy to.

00:06:59.560 --> 00:07:05.590
Stwórzmy kolejne zdanie LCF i tym razem po prostu skopiuję i wkleję tutaj.

00:07:08.520 --> 00:07:13.580
I zrobimy stronę 3, a to się skończy na stronie 3.

00:07:13.620 --> 00:07:17.630
Dostaniemy składnik ciasta i załadujemy go tutaj.

00:07:18.630 --> 00:07:21.110
Teraz to zadziała.

00:07:21.150 --> 00:07:26.180
Zobaczmy, że nie dostaję tutaj żadnych błędów.

00:07:26.310 --> 00:07:30.570
Jeśli wrócę do przeglądarki i zakończę.

00:07:30.640 --> 00:07:35.950
Właściwie trzymajmy konsolę i klikam.

00:07:36.550 --> 00:07:42.910
Pojawia się błąd i nie uda nam się uruchomić tworzenia alimentów na dokumencie.

00:07:42.960 --> 00:07:47.900
To naprawdę mylący błąd, prawda.

00:07:48.180 --> 00:07:54.920
Cóż, ustawmy tutaj prawo, by zobaczyć, co się dzieje, co jest na stronie 2.

00:07:55.050 --> 00:07:56.650
Czy to jest komponent, jak powiedziałem.

00:07:57.000 --> 00:07:58.450
Mam na myśli, że powinno być dobrze.

00:07:58.830 --> 00:08:09.420
Cóż, aby pocieszyć stronę dziennika, aby zapisać, kliknij na stronie 2 i dobrze, dostaję te błędy.

00:08:09.440 --> 00:08:18.500
Ale widzisz tutaj, wylogowuję się z komponentu, ale widzisz, że wygląda trochę dziwnie.

00:08:18.600 --> 00:08:26.890
Komponent jest w rzeczywistości własnością domyślną i tutaj znajduje się nasza strona.

00:08:26.890 --> 00:08:34.730
Jest to mały chrześniak, do którego musisz się przyzwyczaić, ale sposób, w jaki faktycznie uzyskujesz dostęp do komponentu,

00:08:35.750 --> 00:08:43.790
aby móc uzyskać do niego dostęp, jako elementu stanu i reagować, to po prostu powiedzieć, że kropka jest domyślna, a

00:08:43.820 --> 00:08:46.130
następnie tutaj jest domyślna kropka.

00:08:46.130 --> 00:08:47.300
Teraz spróbujmy.

00:08:50.820 --> 00:08:59.620
Wróć na stronę do 0 i nadal pojawia się błąd, ponieważ musimy usunąć pierwszą linię, która wykorzystała brak podziału kodu

00:08:59.690 --> 00:09:03.310
Musimy po prostu zmienić tę i naszą trasę.

00:09:03.320 --> 00:09:10.620
Więc pozwól mi zapisać tę stronę wstecz, aby na to popatrzeć.

00:09:10.720 --> 00:09:12.690
Wszystko działa.

00:09:13.850 --> 00:09:16.630
Ale czy faktycznie dzielimy kody?

00:09:16.640 --> 00:09:18.920
Czy właśnie wdrażamy podział kodu?

00:09:19.190 --> 00:09:20.550
Cóż, sprawdźmy to.

00:09:20.570 --> 00:09:22.510
Idę do zakładki Network.

00:09:22.580 --> 00:09:26.710
Zamierzam to oczyścić i zamierzam odświeżyć.

00:09:26.740 --> 00:09:27.070
W porządku.

00:09:27.090 --> 00:09:29.490
Więc jak dotąd nic się nie zmieniło.

00:09:29.490 --> 00:09:31.330
Pozwól, że to trochę większe.

00:09:31.350 --> 00:09:33.880
Widzimy dołączony plik js.

00:09:34.110 --> 00:09:37.320
Kiedy klikam na stronie 2, widzę to

00:09:41.950 --> 00:09:43.540
na dole.

00:09:43.540 --> 00:09:44.350
Pozwól mi spróbować jeszcze raz.

00:09:44.350 --> 00:09:45.950
Odświeżę się ponownie.

00:09:46.300 --> 00:09:47.780
I widzimy Bondela.

00:09:48.430 --> 00:09:53.560
Zamierzam to wyczyścić i zobaczyć, co się stanie, gdy kliknę na stronie 2.

00:09:53.790 --> 00:09:59.720
Robię jedną z nich, Choctaws Jesus i jeśli kliknę na 3, otrzymam zero holenderskich.

00:09:59.820 --> 00:10:04.280
JOT. S. To fajnie.

00:10:04.280 --> 00:10:11.790
I widzimy tutaj, jeśli klikniemy na niego mamy kawałek z garścią pracy, ale

00:10:12.390 --> 00:10:18.220
widzimy również, że w tym pliku mamy stronę do komponentu.

00:10:18.430 --> 00:10:21.600
Właśnie zaimplementowaliśmy podział kodu.

00:10:21.970 --> 00:10:28.720
Jeśli teraz wrócimy i wrócimy na stronę na stronę 1, to nie będziemy ponownie ładować,

00:10:28.720 --> 00:10:38.410
ponieważ już załadowali skrypty, ale w przeciwnym razie, gdy załadujemy naszą początkową stronę aplikacji do strony 3, komponent nie jest częścią

00:10:38.410 --> 00:10:41.730
tego pliku bazy danych pakunku .

00:10:41.860 --> 00:10:42.860
Jakie to jest świetne.

00:10:45.080 --> 00:10:50.180
Właśnie wdrożyliśmy podział kodu na własną i dość prostą.

00:10:50.180 --> 00:10:51.250
To ma sens.

00:10:51.260 --> 00:10:57.590
Po prostu usuwamy import z góry i importujemy je tylko wtedy, gdy

00:10:57.590 --> 00:11:03.960
potrzebujemy ich tylko wtedy, gdy użytkownik kliknie na ścieżkę strony, by bardzo bardzo schludnie.

00:11:03.960 --> 00:11:07.860
Teraz jest jedna rzecz, która może wpadła ci w oko.

00:11:08.330 --> 00:11:09.870
Coś Ci pokażę.

00:11:10.220 --> 00:11:17.030
Zamierzam to zamknąć i uruchomić kompilację uruchomienia NPM.

00:11:17.640 --> 00:11:24.090
Dzięki temu reaktywacja tworzy gotowy folder zoptymalizowany pod kątem produkcji, dzięki czemu można go

00:11:24.330 --> 00:11:28.540
umieścić w Internecie, aby inni mogli go odwiedzić.

00:11:28.680 --> 00:11:36.540
Możesz zobaczyć tutaj, że pokazuje ci po nim rozmiary plików, o których przy okazji

00:11:36.540 --> 00:11:37.800
będziemy rozmawiać.

00:11:37.800 --> 00:11:45.580
I ostatnia część sekcji wydajności widzimy, że mamy główny unik nas, który ma javascript.

00:11:45.660 --> 00:11:55.140
Mamy główny plik CSSA, ale mamy też te dwie rzeczy, że zerowa porcja i kompilacja jednego i drugiego fragmentu

00:11:56.310 --> 00:12:01.320
są automatycznie dla ciebie oparte na tym, gdzie widzi import.

00:12:01.660 --> 00:12:13.130
Tak więc byliśmy w stanie pobrać tak dużo bajtów lub danych z naszego głównego pliku, ponieważ jeśli użytkownik nigdy nie odwiedza ciastek pasztońskich, nie

00:12:13.130 --> 00:12:17.070
musimy wysyłać tego javascriptu w jego stronę.

00:12:18.410 --> 00:12:21.320
Bardzo bardzo fajne.

00:12:21.330 --> 00:12:26.510
To było dzielenie kodu, ale jest lepszy sposób na zrobienie tego.

00:12:26.580 --> 00:12:30.760
A w następnym filmie pokażę, jak to zobaczę.

00:12:31.070 --> 00:12:31.340
Lecz przez.