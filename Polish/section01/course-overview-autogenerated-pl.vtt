WEBVTT

00:00:00.770 --> 00:00:04.980
Witaj! Przejdźmy przez program kursu.

00:00:05.070 --> 00:00:09.330
Masz pomysł, czego możesz się spodziewać w tym kursie.

00:00:09.330 --> 00:00:16.410
Niektóre z tych tematów na pierwszy rzut oka mogą wydawać się groźne, ale wszystkie są połączone i wszystkie

00:00:16.410 --> 00:00:20.220
są kluczowymi komponentami, które sprawiają, że jesteś czołowym deweloperem.

00:00:20.230 --> 00:00:27.780
Będziemy krok po kroku, pracując nad prawdziwymi problemami, pisząc kod, ćwicząc, abyśmy mogli czuć

00:00:27.780 --> 00:00:31.790
się pewnie w każdym z tych tematów.

00:00:31.800 --> 00:00:39.030
Teraz pierwsza część kursu obejmie SSH. W tej sekcji SSH

00:00:39.030 --> 00:00:47.760
dowiemy się o poleceniu SSH. Jak uzyskać dostęp do komputerów zdalnych, jak połączyć się z serwerem znajdującym się

00:00:47.760 --> 00:00:49.200
w innej części świata.

00:00:49.500 --> 00:00:55.680
Nauczymy się szyfrowania symetrycznego i asymetrycznego szyfrowania oraz mieszania.

00:00:56.490 --> 00:01:03.630
Dowiemy się również o kluczach SSH dotyczących generowania kluczy SSH, kluczy publicznych i prywatnych

00:01:03.630 --> 00:01:06.690
oraz zarządzania nimi na serwerze.

00:01:06.690 --> 00:01:12.420
Będziemy mieli kilka zabawnych ćwiczeń, kiedy twoja aplikacja została właśnie usunięta z serwera

00:01:12.420 --> 00:01:18.980
w środku nocy i musisz przenieść cały projekt z powrotem na serwer za pomocą SSH.

00:01:19.170 --> 00:01:25.390
I zamierzamy także skonfigurować GitHub z SSH, po krótkiej sekcji, która nas odłączy.

00:01:25.440 --> 00:01:32.850
Następnie zamierzamy zagłębić się w wielki temat optymalizacji wydajności. A to jest tak duże, że podzieliłem to

00:01:32.850 --> 00:01:34.930
na trzy części.

00:01:35.280 --> 00:01:38.450
Pierwszą częścią będą optymalizacje sieci.

00:01:38.730 --> 00:01:45.420
Porozmawiamy o tym, jak możemy zminimalizować nasze pliki i poprawić dostarczanie naszej aplikacji. A potem poznamy

00:01:45.420 --> 00:01:51.390
optymalizacje dotyczące ścieżki krytycznej renderowania, jak ją poprawić.

00:01:51.420 --> 00:01:54.120
Nasza strona internetowa może się szybko załadować.

00:01:54.120 --> 00:01:59.370
Będziemy uczyć się o progresywnych aplikacjach internetowych i optymalizacji kodu, a

00:01:59.370 --> 00:02:04.440
my pomożemy Kaiko Corp. faktycznie poprawiają swoją stronę firmową, a także aplikację robofriends.

00:02:04.650 --> 00:02:10.500
Zrobimy progresywną aplikację internetową działającą w trybie offline, którą można nawet przesłać do App

00:02:10.800 --> 00:02:14.160
Store, używając tylko javascript, HTML i CSS.

00:02:14.250 --> 00:02:20.370
Ale będziemy również uczyć się ciekawych tematów, takich jak dzielenie kodu i szybkie tworzenie

00:02:20.370 --> 00:02:23.490
aplikacji reaktywnych / redux poprzez inteligentne renderowanie.

00:02:23.580 --> 00:02:29.750
Następnie dokończymy nasze pełne zrozumienie optymalizacji wydajności, pracując nad optymalizacją

00:02:29.870 --> 00:02:30.950
zaplecza.

00:02:31.020 --> 00:02:39.510
Mówiąc o sieciach dostarczania treści, skalowaniu baz danych, kompresowaniu naszych odpowiedzi, buforowaniu i wreszcie równoważeniu obciążenia, w

00:02:39.570 --> 00:02:46.500
którym zaimplementujemy system równoważenia obciążenia i faktycznie wykonamy testowanie obciążenia w naszym projekcie.

00:02:46.500 --> 00:02:50.360
Pod koniec tego będziesz guru wydajności.

00:02:50.850 --> 00:02:53.740
Będziemy wtedy reagować i redukować.

00:02:54.030 --> 00:03:00.960
Najpopularniejsze biblioteki zawartości do tworzenia aplikacji na jedną stronę. Najpierw wprowadzimy miłe wprowadzenie, aby zareagować, jeśli

00:03:00.960 --> 00:03:01.590
uczysz

00:03:01.590 --> 00:03:07.560
się go po raz pierwszy. A potem szybko zanurkujemy w redux,

00:03:07.560 --> 00:03:12.530
mówiąc o zarządzaniu państwem i jak zorganizować aplikacje, aby mogły się rozwijać.

00:03:12.540 --> 00:03:18.930
Dodajemy również małą, małą sekcję dotyczącą łączenia w pakiety, korzystania z najnowszej aplikacji internetowej, a także paczkę up

00:03:18.930 --> 00:03:26.410
i comer do pakowania naszych plików i optymalizacji pakietu produkcyjnego. Na koniec będziesz czuł się komfortowo

00:03:26.550 --> 00:03:32.730
z reakcją / redukcją, a także konfigurowaniem swoich projektów z takimi

00:03:32.930 --> 00:03:33.810
rzeczami.

00:03:34.260 --> 00:03:39.970
Następnie wchodzimy w temat, który jest tak ważny, ale często

00:03:40.080 --> 00:03:47.160
zapomniany przy pierwszym uruchomieniu, testowaniu. Firmy uwielbiają testowanie, a jeśli umiesz

00:03:47.160 --> 00:03:51.950
testować, pisać testy jednostkowe, testy integracyjne, piszesz lepsze oprogramowanie.

00:03:52.080 --> 00:03:56.850
Zaczniemy od poznania środowiska testowego w obecnym świecie programistów internetowych.

00:03:57.210 --> 00:04:02.730
Jakie narzędzia należy użyć, jakie biblioteki istnieją, jak ustawić wszystko, a następnie będziemy pracować z

00:04:02.790 --> 00:04:06.240
jedną z najlepszych bibliotek, której używamy do testowania.

00:04:06.270 --> 00:04:08.850
Testy synchroniczne i asynchroniczne.

00:04:09.000 --> 00:04:09.420
Dobrze.

00:04:09.440 --> 00:04:17.940
Mock's i miej raporty o zasięgu. Następnie zanurkujemy w pisaniu testów dla naszej aplikacji reagowania i

00:04:17.940 --> 00:04:25.350
upewniamy się, że używamy rzeczy takich jak test snapshot, enzym do pisania inteligentnych testów, które pozwalają uniknąć błędów

00:04:25.350 --> 00:04:26.810
w naszej aplikacji.

00:04:27.000 --> 00:04:33.420
Na koniec możesz poznać cały krajobraz testowy i czuć się komfortowo czytając testy, które przyjdą Ci

00:04:33.420 --> 00:04:34.500
na drodze.

00:04:36.360 --> 00:04:43.500
Następnie zagłębimy się w jeden z najgorętszych tematów zeszłorocznego środowiska programistów internetowych, maszynopis.

00:04:43.510 --> 00:04:49.450
Dowiemy się o pisaniu statycznym i dlaczego javascript nie ma pisania statycznego, a zamiast tego jest

00:04:49.450 --> 00:04:55.120
wpisywany dynamicznie, a następnie nauczymy się jak używać maszynopisu, jakie typy istnieją i jak je

00:04:55.120 --> 00:04:56.980
dodać do swojego projekt.

00:04:56.980 --> 00:05:03.310
Następnie dodamy maszynopis do naszego projektu reakcji i zobaczymy, jak dodać go do własnych

00:05:03.310 --> 00:05:04.060
projektów.

00:05:04.210 --> 00:05:07.770
Na koniec jeszcze raz opanujesz ten temat.

00:05:10.060 --> 00:05:14.800
Odtąd zajmiemy się krótkim rozdziałem na temat aplikacji na jedną stronę.

00:05:14.800 --> 00:05:19.890
Porozmawiamy o stronie serwera, która przedstawia oryginalny sposób wyświetlania stron internetowych.

00:05:19.960 --> 00:05:25.020
Dlaczego był przydatny i dlaczego nadal może być przydatny w niektórych firmach, które go potrzebują.

00:05:25.510 --> 00:05:30.500
Porozmawiamy o aplikacjach pojedynczej strony i renderowaniu po stronie klienta.

00:05:30.500 --> 00:05:35.380
Znowu korzyści nakładają, gdy chcesz wdrożyć jeden nad drugim.

00:05:35.410 --> 00:05:38.560
Pokażę ci, jak zaimplementować renderowanie po stronie serwera i zareagować.

00:05:38.560 --> 00:05:42.220
I znowu, jakie są plusy i minusy każdego z nich.

00:05:42.220 --> 00:05:44.920
Zamierzamy szybko zanurzyć się w następnym. js Tak,

00:05:45.010 --> 00:05:51.600
biblioteka, która pozwala nam ładnie pisać dynamiczne aplikacje po stronie serwera.

00:05:51.740 --> 00:05:57.730
Na koniec będziesz gotowy do podjęcia decyzji, czy chcesz aplikacji pojedynczej strony lub

00:05:57.820 --> 00:06:02.070
aplikacji renderowanej po stronie serwera dla twojego projektu.

00:06:02.110 --> 00:06:06.120
Stąd przechodzimy do jednego z moich ulubionych tematów, bezpieczeństwa.

00:06:06.130 --> 00:06:12.130
Zajmiemy się różnorodnymi zagadnieniami, w tym ochroną przed frontem, gdzie mówimy o ukrytych

00:06:12.130 --> 00:06:18.340
stronach internetowych, atakach iniekcyjnych, takich jak zastrzyki SQL, i faktycznie będziemy je ćwiczyć, aby zobaczyć,

00:06:18.340 --> 00:06:19.300
jak działają.

00:06:19.390 --> 00:06:25.660
Możemy porozmawiać o bezpieczeństwie wewnętrznym i najlepszych praktykach, abyśmy mogli zarządzać poufnymi danymi.

00:06:26.110 --> 00:06:26.800
Odtąd

00:06:26.800 --> 00:06:31.960
uczymy się również kilku etycznych technik hakowania, abyśmy mogli się bronić,

00:06:31.960 --> 00:06:38.350
gdy budujemy nasz system, abyś czuł się pewny, że budujesz bezpieczne aplikacje przy użyciu

00:06:38.470 --> 00:06:40.230
najnowszych wskazówek i sztuczek.

00:06:40.390 --> 00:06:45.830
A potem dostaniemy się do doku, narzędzia, które absolutnie cię zaskoczy.

00:06:46.150 --> 00:06:52.600
Dowiemy się o pojemnikach i tym, jak pojemniki zrewolucjonizowały sposób, w jaki

00:06:52.600 --> 00:06:57.510
firmy organizują swoje aplikacje. W rzeczywistości zamierzamy pisać pliki doków i

00:06:57.520 --> 00:07:05.950
tworzyć własne kontenery, a następnie użyjemy funkcji tworzenia dokerów do skompletowania gotowego serwera bazy danych PostgreSQL i serwera API w jeden tak, aby

00:07:05.950 --> 00:07:09.920
wszystkie działały z jednego połączenia. Pod koniec tego procesu

00:07:10.000 --> 00:07:14.570
będziemy czuli się bardzo dobrze z dockerem, gdy wdrażamy nasze aplikacje.

00:07:17.500 --> 00:07:21.040
Następnie zaczynamy uczyć się o nowej bazie danych.

00:07:21.060 --> 00:07:24.540
Redis jest jedną z najpopularniejszych i najczęściej używanych baz

00:07:24.650 --> 00:07:30.560
danych, która jest magazynem wartości kluczowych. Najpierw omówimy temat baz danych i typy baz danych, które

00:07:30.560 --> 00:07:31.160
posiadamy.

00:07:31.330 --> 00:07:39.290
Od tego momentu uruchomimy nasz własny serwer redis, nauczymy się korzystać z redis, jak korzystać z interfejsu CLI Redis, abyśmy mogli teraz używać Redis do

00:07:39.380 --> 00:07:46.400
buforowania, aby nasze strony były szybsze, a także do zarządzania sesjami. Coś, co omówimy w

00:07:46.400 --> 00:07:52.380
następnym temacie. Korzystając z naszej inteligentnej aplikacji

00:07:52.490 --> 00:07:58.120
mózgowej, stworzymy całą dynamiczną część strony internetowej, która jest zarządzaniem użytkownikami.

00:07:58.160 --> 00:08:03.890
Zaczniemy od utworzenia nowej strony profilu, a na tej stronie profilu dowiemy się

00:08:03.890 --> 00:08:11.030
o uwierzytelnianiu opartym na sesji, w którym będą używane pliki cookie, a także o tokenie uwierzytelniania,

00:08:11.030 --> 00:08:13.790
na przykład przy użyciu tokenów JWT.

00:08:13.940 --> 00:08:18.140
Chcemy dowiedzieć się o każdym z nich, jakie są plusy i minusy każdego z nich.

00:08:18.140 --> 00:08:23.080
A potem zamierzamy wdrożyć bezpieczny przepływ uwierzytelniania, który można zaimplementować i dowolną

00:08:23.090 --> 00:08:24.310
wybraną aplikację.

00:08:24.420 --> 00:08:29.610
Zamierzamy używać Redis do zarządzania sesjami, abyśmy mieli chronione trasy.

00:08:29.660 --> 00:08:35.450
W ten sposób, za każdym razem, gdy mamy funkcję logowania, mamy członków, z których możemy korzystać z tego systemu, wiedząc, że

00:08:35.450 --> 00:08:40.600
jest bezpieczny i że postępuje zgodnie z najlepszymi praktykami. Tak!

00:08:40.640 --> 00:08:41.990
Wciąż mamy więcej tematów.

00:08:41.990 --> 00:08:44.670
Ten kurs jest dość obszerny.

00:08:44.690 --> 00:08:52.250
Następnie porozmawiamy o AWS. Jakie są usługi Amazon Web Services, a także

00:08:52.380 --> 00:08:59.960
jaka infrastruktura jest usługą i platformą jako usługą, która pozwala firmom naprawdę skalować lub pracować tak

00:09:00.050 --> 00:09:03.290
wydajnie, jak Google, Amazon czy Microsoft.

00:09:03.560 --> 00:09:09.890
A potem dowiemy się o tej ekscytującej bezserwerowej technologii zwanej AWS Lambda, która pozwala

00:09:09.890 --> 00:09:16.190
nam uruchamiać proste funkcje w chmurze, a my wykorzystamy platformę bez serwera, aby faktycznie

00:09:16.190 --> 00:09:20.290
zaimplementować AWS Lambda w naszej inteligentnej aplikacji mózgowej.

00:09:20.300 --> 00:09:26.030
Do tego czasu będziesz mieć pewność, że pracujesz z AWS

00:09:26.030 --> 00:09:35.080
i tworzysz funkcje, które żyją w chmurze. Po tym, jak spróbowaliśmy wszystkiego razem i stworzyliśmy ogólny obraz tego, jak pisać dobre oprogramowanie,

00:09:35.260 --> 00:09:42.220
dobre aplikacje, będziemy rozmawiać o tym, jak właściwie tworzyć dobre procesy. Jak właściwie wdrożyć

00:09:42.220 --> 00:09:44.860
do produkcji.

00:09:44.860 --> 00:09:49.930
Porozmawiamy o dobrych ciągłych praktykach integracyjnych, a następnie o ciągłym dostarczaniu i ciągłym

00:09:49.990 --> 00:09:56.320
wdrażaniu, aby po wdrożeniu projektu wiedzieć, jak wdrożyć dobre praktyki i dobre narzędzia, takie jak Circle

00:09:56.710 --> 00:10:03.700
CI, aby upewnić się, że od samego początku. Twój zespół programistów dysponuje odpowiednimi narzędziami i

00:10:03.700 --> 00:10:10.120
odpowiednimi procesami, aby z powodzeniem pisać aplikacje z mniejszą ilością błędów i czystszym

00:10:10.120 --> 00:10:10.620
kodem.

00:10:12.500 --> 00:10:20.160
A potem trochę dodatkowego obszaru, w którym mówię o moich osobistych doświadczeniach i opiniach.

00:10:20.180 --> 00:10:26.060
Mówię o analizie kodu i o tym, co należy zrobić, gdy po raz pierwszy zaczynasz pracę nad projektem, w

00:10:26.060 --> 00:10:28.850
którym masz mnóstwo plików i sam nie napisałeś kodu.

00:10:28.880 --> 00:10:33.240
Porozmawiamy o wskazówkach i trikach, aby naprawdę to zoptymalizować.

00:10:33.470 --> 00:10:38.270
Porozmawiam trochę o sprawdzonych metodach, których nie mogliśmy uwzględnić w innych sekcjach.

00:10:38.270 --> 00:10:45.590
A następnie kilka innych dodatkowych drobiazgów, aby pod koniec tego całego kursu wszystkie te rzeczy

00:10:45.590 --> 00:10:48.190
miały dla ciebie sens.

00:10:48.380 --> 00:10:53.390
Będziesz mógł wprowadzić wszystkie te wypowiedzi w swoje własne projekty do swojej firmy i będziesz

00:10:53.390 --> 00:10:55.940
wiedział, jak każdy z nich jest połączony.

00:10:56.030 --> 00:11:02.080
Ale przede wszystkim po to, aby nauczyć się rzeczy, które zajęły mi lata i lata.

00:11:02.600 --> 00:11:07.030
Kolejny film, twój pierwszy dzień pracy, wreszcie rozpocznie Kaiko Corp.

00:11:07.340 --> 00:11:10.320
Ciesz się projektami, ciesz się ćwiczeniami.

00:11:10.340 --> 00:11:15.300
Będziemy budować wiele fajnych rzeczy, baw się dobrze i ciesz się jazdą.