WEBVTT

00:00:01.540 --> 00:00:06.550
Mari kita bicara tentang tipe terakhir dari tes otomatisasi tes.

00:00:06.820 --> 00:00:10.370
Sekarang Anda juga dapat mendengar istilah pengujian ujung ke ujung.

00:00:10.570 --> 00:00:12.330
Ketika datang ke tes otomatisasi.

00:00:12.550 --> 00:00:15.130
Jadi ingatlah itu dalam tes otomatisasi pikiran.

00:00:15.280 --> 00:00:22.730
Seperti saya katakan sebelumnya adalah tes UI yang selalu berjalan di dalam browser atau

00:00:23.670 --> 00:00:31.280
lingkungan seperti browser karena untuk mensimulasikan perilaku pengguna di lingkungan ini seperti mengklik mengetik gulir.

00:00:31.440 --> 00:00:38.460
Dan akhirnya kebutuhan untuk memastikan bahwa skenario ini benar-benar berfungsi dari sudut pandang

00:00:38.460 --> 00:00:39.650
pengguna akhir.

00:00:39.660 --> 00:00:41.040
Ini tes penting Ray.

00:00:41.220 --> 00:00:48.850
Jika proses checkout Anda memiliki bug, cara terbaik untuk menguji mungkin adalah benar-benar melewati aliran checkout dan

00:00:48.870 --> 00:00:53.400
memastikan bahwa pengguna dapat membeli apa pun yang Anda jual.

00:00:53.830 --> 00:01:00.450
Sekarang di dunia yang ideal kami memiliki tes otomatisasi di mana-mana dan jika ada yang gagal, kami tahu bahwa aplikasi web kami

00:01:00.450 --> 00:01:01.350
tidak berfungsi.

00:01:02.490 --> 00:01:08.880
Tetapi penting untuk diingat bahwa tes ini adalah yang paling sulit untuk dilakukan.

00:01:08.910 --> 00:01:16.770
Bayangkan diri Anda menciptakan lingkungan untuk menjalankan tes pada mesin yang berbeda karena pengguna memiliki komputer

00:01:16.890 --> 00:01:23.860
yang berbeda perangkat yang berbeda telepon yang berbeda jenis browser versi yang berbeda.

00:01:23.910 --> 00:01:25.980
Bagaimana Anda bisa benar-benar menguji untuk itu.

00:01:25.980 --> 00:01:30.550
Maksud saya Anda bisa tetapi itu benar-benar sangat sulit.

00:01:30.840 --> 00:01:36.650
Dan inilah mengapa ada begitu banyak layanan yang menyediakan pengujian otomasi untuk Anda.

00:01:36.680 --> 00:01:38.330
Berikut ini contoh beberapa di antaranya.

00:01:40.100 --> 00:01:40.570
Ya.

00:01:40.660 --> 00:01:47.880
Ini hanya beberapa dari mereka seperti driver web Nightwatch I O test kafe mimpi buruk Cypress.

00:01:47.890 --> 00:01:54.760
Daftar ini benar-benar berjalan pada pengujian otomasi adalah sesuatu yang biasanya Anda hanya temukan di perusahaan besar yang

00:01:54.760 --> 00:02:00.910
memiliki anggaran untuk benar-benar menghabiskan uang untuk ini karena ada begitu banyak kasus dan mereka

00:02:00.910 --> 00:02:07.320
sangat mahal untuk diterapkan sehingga beberapa pengembang menjalani seluruh karir mereka tanpa pernah menulis tes otomatisasi.

00:02:07.360 --> 00:02:10.380
Tetapi saya masih ingin menutupinya karena ini adalah topik penting.

00:02:10.690 --> 00:02:12.210
Berikut adalah lowdown cepat.

00:02:12.430 --> 00:02:20.120
Jika Anda hanya ingin memulai dan tidak khawatir tentang cross browser dan memiliki semua alat dalam satu tes mungkin

00:02:20.450 --> 00:02:22.480
Skeff adalah pilihan terbaik Anda.

00:02:22.720 --> 00:02:30.160
Atau jika Anda menginginkan salah satu yang memiliki dokumentasi online terbaik semua driver web IO benar-benar hebat dan

00:02:30.160 --> 00:02:38.320
jika Anda ingin cara yang sangat sederhana untuk mengotomatiskan tindakan pengguna atau melakukan sesuatu yang keren seperti pengikisan web sementara

00:02:38.410 --> 00:02:40.560
mimpi buruk Deji cukup bagus.

00:02:40.850 --> 00:02:47.980
Sekarang yang penting dengan pengujian otomatisasi adalah seperti yang disarankan nama lain dan untuk

00:02:48.220 --> 00:02:56.800
menguji Anda ingin menguji seluruh proses UI Anda dan Anda mungkin berpikir mengapa kami meminta mesin melakukannya.

00:02:56.810 --> 00:03:01.430
Mengapa kita tidak bisa mempekerjakan orang untuk menguji kita dan melakukan pengujian otomasi.

00:03:01.670 --> 00:03:09.380
Dan itu terjadi banyak perusahaan alih-alih menulis skrip ini hanya mempekerjakan orang untuk melakukan pengujian otomasi dan di

00:03:09.380 --> 00:03:16.310
beberapa perusahaan Anda memiliki orang-orang seperti penguji yang melakukan ini untuk Anda dan memastikan bahwa

00:03:16.310 --> 00:03:18.440
aplikasi berfungsi sebagaimana dimaksud.

00:03:19.400 --> 00:03:24.880
Dan ada pro dan kontra untuk kedua hal ini dan itu adalah sesuatu yang sangat tergantung pada

00:03:25.120 --> 00:03:27.430
perusahaan Anda dan lingkungan kerja Anda.

00:03:27.430 --> 00:03:34.360
Hal utama yang saya ingin sarankan adalah bahwa kami ingin membuat dua proses pengujian yang

00:03:34.750 --> 00:03:42.330
berbeda satu untuk menjalankan tes unit dan tes integrasi dan yang benar-benar terpisah untuk menjalankan tes ini.

00:03:42.340 --> 00:03:44.200
Tes otomatisasi.

00:03:44.440 --> 00:03:51.700
Itu karena tes UI membutuhkan waktu lebih lama terutama jika kita khawatir tentang browser yang berbeda dan perangkat

00:03:51.700 --> 00:03:57.200
yang berbeda dan mereka juga membutuhkan lebih banyak uang untuk menjalankannya berulang kali.

00:03:57.310 --> 00:04:04.870
Jadi, Anda ingin menjalankan tes unit dan tes integrasi mungkin sering di terminal Anda saat Anda

00:04:05.170 --> 00:04:12.380
menyimpan perubahan pada kode Anda di lingkungan lokal Anda dan mungkin menjalankan tes UI sekali

00:04:12.380 --> 00:04:20.730
sehari atau beberapa kali seminggu atau mungkin sebelum Anda bergabung ke cabang utama sebelum Anda melepaskannya ke produksi.

00:04:20.740 --> 00:04:24.370
Untuk saat ini, itu untuk pengujian otomasi.

00:04:24.480 --> 00:04:25.960
Saya akan melihat yang berikutnya.

00:04:26.120 --> 00:04:26.310
Mungkin.