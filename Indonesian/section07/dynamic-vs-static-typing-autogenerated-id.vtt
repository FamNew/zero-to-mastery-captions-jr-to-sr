WEBVTT

00:00:02.020 --> 00:00:07.560
Selamat datang kembali ada banyak bahasa pemrograman di luar sana.

00:00:07.590 --> 00:00:08.970
Kami telah mendengar tentang mereka dengan benar.

00:00:09.180 --> 00:00:10.080
Python.

00:00:10.140 --> 00:00:13.190
Ruby Java C ++.

00:00:13.350 --> 00:00:21.500
Ada satu ton dan meskipun javascript adalah bahasa yang dominan di web dan dengan pengenalan hal-hal

00:00:21.500 --> 00:00:28.730
seperti simpul Ya kita sekarang dapat menggunakan javascript di luar web mungkin di server

00:00:28.730 --> 00:00:29.840
backend juga.

00:00:29.840 --> 00:00:37.510
Dunia masih memiliki banyak bahasa berbeda yang cocok untuk domain dan kemampuan mereka sendiri.

00:00:37.660 --> 00:00:44.380
Dan jika kita harus mengelompokkan semua bahasa pemrograman ini entah bagaimana kita mungkin akan melakukan sesuatu seperti

00:00:44.380 --> 00:00:44.970
ini.

00:00:48.470 --> 00:00:54.500
Dalam video ini kita akan berbicara tentang spektrum utama di sini dinamika dan statis tentang bagaimana

00:00:54.500 --> 00:00:56.080
bahasa pemrograman dapat berbeda.

00:00:57.160 --> 00:01:06.600
Diketik secara dinamis dan diketik secara statis, kita lihat di sini bahwa javascript adalah jenis bahasa yang

00:01:07.610 --> 00:01:15.830
secara dinamis, demikian pula bahasa pemrograman populer lainnya seperti penutupan PH BE Ruby Python.

00:01:16.000 --> 00:01:26.480
Di sisi lain bahasa seperti Java Haskell skalar C ++ adalah bahasa yang diketik secara statis atau statis.

00:01:26.580 --> 00:01:28.550
Tapi apa artinya itu.

00:01:30.650 --> 00:01:33.140
Baiklah, biarkan saya yang benar-benar menunjukkannya untuk Anda.

00:01:35.060 --> 00:01:40.250
Jika saya membuka konsol di sini dan Oh itu latar belakang yang bagus hari ini.

00:01:40.280 --> 00:01:46.430
Pokoknya kembali ke konsol sehingga kita dapat mengetikkan beberapa javascript dalam javascript karena itu diketik secara dinamis.

00:01:46.430 --> 00:01:48.140
Kita bisa melakukan sesuatu seperti ini.

00:01:48.140 --> 00:01:54.650
Variabel A sama dengan 100.

00:01:54.710 --> 00:01:55.300
Baiklah.

00:01:55.410 --> 00:01:57.270
Itu cukup diharapkan.

00:01:57.270 --> 00:02:00.080
Kami tahu cara kerja javascript dan itu bagus.

00:02:00.960 --> 00:02:04.600
Tetapi dalam beberapa bahasa ini tidak akan berhasil.

00:02:04.680 --> 00:02:14.340
Anda melihat bahasa yang diketik secara dinamis memungkinkan kami untuk tidak harus mengatakan jenis variabel apa yang akan menjadi

00:02:14.440 --> 00:02:16.030
variabel ini.

00:02:16.230 --> 00:02:17.160
Apa artinya.

00:02:17.340 --> 00:02:19.490
Baik dalam bahasa yang diketik secara statis.

00:02:19.530 --> 00:02:24.350
Katakanlah kita sedang menulis C ++ yang merupakan bahasa yang diketik secara statis.

00:02:24.560 --> 00:02:26.760
Kami harus melakukan sesuatu seperti ini.

00:02:26.990 --> 00:02:33.980
Dan saya tidak akan mendapatkan sorotan karena sementara browser ini tidak akan mengenali C ++ tetapi jika saya akan melakukan hal

00:02:33.980 --> 00:02:36.710
yang sama saya harus mengatakan int a.

00:02:36.770 --> 00:02:42.670
Dan itu singkatan dari integer dan kemudian pada baris baru.

00:02:43.010 --> 00:02:54.420
Saya akan mengatakan Anda izinkan saya menambahkan titik koma di sini dan pada baris baru saya akan mengatakan bahwa A sama dengan 100 yang Anda lihat

00:02:54.420 --> 00:03:01.490
dengan bahasa yang diketik secara statis. Saya harus mengatakan jenis apa yang akan menjadi variabel ini.

00:03:01.560 --> 00:03:03.930
Dalam hal ini bilangan bulat.

00:03:03.930 --> 00:03:10.770
Jika ini adalah string seperti halo saya harus mengatakan string dan seterusnya dan seterusnya.

00:03:10.770 --> 00:03:18.260
Jadi dengan bahasa yang diketik secara statis kita harus mendeklarasikan variabel secara eksplisit sebelum menggunakannya.

00:03:19.240 --> 00:03:23.850
Bahasa yang diketik secara dinamis tidak terikat dengan batasan ini.

00:03:24.640 --> 00:03:27.160
Mereka tidak terikat pada tipe tertentu.

00:03:27.160 --> 00:03:32.690
Javascript cukup pintar dan itu akan mengatakan oh ya ya ya cara variabel.

00:03:32.710 --> 00:03:33.500
Itu 100.

00:03:33.520 --> 00:03:33.830
Oh ya.

00:03:33.880 --> 00:03:34.880
Itu bilangan bulat.

00:03:34.990 --> 00:03:36.560
Ini adalah tipe integer.

00:03:36.820 --> 00:03:38.230
Wow, aku sangat pintar.

00:03:38.230 --> 00:03:39.640
Itulah javascript.

00:03:40.880 --> 00:03:46.390
Dan dalam bahasa yang diketik secara dinamis, pemeriksaan tipe dilakukan selama runtime.

00:03:46.460 --> 00:03:47.380
Apa artinya.

00:03:47.600 --> 00:03:55.490
Nah, jika Anda ingat dalam diskusi kami tentang kinerja browser, javascript akan dijalankan pada browser

00:03:56.750 --> 00:04:05.110
saat runtime atau dalam jet atau hanya dalam kompilasi waktu ketika pengguna benar-benar menelusuri melalui situs

00:04:05.110 --> 00:04:05.790
Web.

00:04:05.820 --> 00:04:09.720
Javascript sedang berjalan dan sedang dikompilasi di latar belakang.

00:04:09.870 --> 00:04:15.660
Jika Anda ingat tab kinerja kami, kami memiliki metrik kinerja scripting kami yang

00:04:15.660 --> 00:04:21.950
merupakan grafik pie kuning atau potongan pie yang berwarna kuning yang mencakup kompilasi javascript juga.

00:04:22.290 --> 00:04:29.520
Dan karena itu kami dapat menggunakan bahasa yang diketik secara dinamis yang dapat menetapkan apa pun untuk variabel apa pun dan

00:04:29.760 --> 00:04:31.550
Anda tidak akan tertangkap.

00:04:31.590 --> 00:04:38.880
Anda mungkin mendapatkan kesalahan saat runtime saat pengguna menjelajahi situs web tetapi karena ini

00:04:38.880 --> 00:04:42.680
kami tidak perlu khawatir tentang ini.

00:04:42.800 --> 00:04:44.300
Terlihat bagus kan.

00:04:44.300 --> 00:04:46.550
Mengapa kita ingin melakukan ini.

00:04:46.550 --> 00:04:53.510
Ini jauh lebih bersih dan lebih mudah bagi kita untuk menulis apa yang akan kita lihat mengapa hal itu tidak

00:04:53.510 --> 00:04:56.870
selalu ideal dan mengapa hal itu dapat menyebabkan masalah.

00:04:58.170 --> 00:05:04.260
Tetapi sebelum kita mengetahui bahwa telah terjadi perang suci dalam bahasa pemrograman orang-orang yang berpikir bahasa

00:05:04.530 --> 00:05:11.520
yang diketik secara statis adalah cara untuk pergi dan berpikir bahasa yang diketik secara dinamis itu mengerikan dan

00:05:11.520 --> 00:05:12.150
sebaliknya.

00:05:12.150 --> 00:05:18.090
Orang-orang di sana mengatakan bahwa bahasa yang diketik secara statis adalah buang-buang waktu dan bahasa pemrograman yang dinamis adalah

00:05:18.240 --> 00:05:19.530
cara yang harus ditempuh

00:05:19.770 --> 00:05:25.410
Karena itu saya menelaah topik ini dengan ringan karena orang-orang sangat beriman sehingga mereka memiliki pendapat yang

00:05:25.410 --> 00:05:27.120
kuat tentang hal ini.

00:05:27.210 --> 00:05:33.150
Tapi sekali lagi, pengembang senior jangan fokus pada apa yang benar, apa yang salah. Klyce fokus pada pro dan

00:05:33.150 --> 00:05:38.530
kontra ketika yang satu baik di atas yang lain sehingga kita bisa membuat keputusan yang cerdas.

00:05:38.550 --> 00:05:41.850
Mari kita bicara tentang pro.

00:05:41.960 --> 00:05:51.740
Hal nomor satu dengan bahasa yang diketik secara statis seperti ini adalah kita mendapatkan dokumentasi.

00:05:52.130 --> 00:05:56.340
Mungkin cara yang lebih baik untuk menunjukkan ini adalah dengan benar-benar menulis fungsi.

00:05:56.480 --> 00:06:05.200
Jika katakanlah saya akan menghapus ini dan mengatakan berfungsi beberapa dan dalam beberapa ini di sini saya akan menggunakan

00:06:05.200 --> 00:06:08.540
sedikit sintaks yang mungkin tidak Anda kenal.

00:06:08.560 --> 00:06:10.270
Tapi untuk saat ini tidak apa-apa.

00:06:10.270 --> 00:06:23.690
Kita hanya akan mengasumsikan bahwa ini berfungsi, kita akan mengatakan a adalah angka dan B juga angka dan di sini kita

00:06:23.900 --> 00:06:27.070
bisa mengembalikan a plus

00:06:29.790 --> 00:06:33.030
b dan menutup bracket fungsi kita.

00:06:33.030 --> 00:06:37.040
Ini bukan javascript jika kami menjalankan perang ini untuk mendapatkan kesalahan.

00:06:37.380 --> 00:06:42.910
Tapi ini menunjukkan apa yang bisa dilakukan oleh bahasa yang diketik secara statis.

00:06:42.990 --> 00:06:50.550
Anda melihat apakah pengembang baru datang dan menjalankan fungsi SUM dengan

00:06:50.550 --> 00:06:59.110
sesuatu selain angka, katakanlah mereka menjalankan fungsi penjumlahan dengan beberapa halo dan mungkin sesuatu.

00:06:59.130 --> 00:07:08.290
Tidak baik ini sebelum kita bahkan akan menempatkan kode ini di browser atau sedang dalam

00:07:08.290 --> 00:07:08.950
produksi.

00:07:09.010 --> 00:07:12.050
Karena itu akan mengatakan Anda melakukan sesuatu yang salah di sini.

00:07:12.100 --> 00:07:18.160
Saya mengharapkan angka dalam angka di sini dan Anda tidak memberi saya semua itu.

00:07:18.280 --> 00:07:24.170
Dan dalam hal itu bahasa yang diketik secara statis mendokumentasikan diri.

00:07:24.190 --> 00:07:27.390
Itu adalah saya bisa datang ke proyek dan segera melihatnya.

00:07:27.580 --> 00:07:33.460
Bahkan jika ini dinamai dengan buruk dan ini adalah fungsi yang rumit saya dapat

00:07:33.520 --> 00:07:41.750
melihat parameter seperti apa yang diharapkan dan saya menghindari membuat kesalahan itu pro kedua dari bahasa yang diketik statis adalah

00:07:41.750 --> 00:07:49.890
bahwa karena fitur ini dengan ID kami atau editor teks seperti luhur atau kode visual atau editor teks favorit Anda.

00:07:50.360 --> 00:07:53.900
Ini membantu penyelesaian otomatis di editor Anda.

00:07:54.050 --> 00:08:00.470
Anda dapat mengunduh plug in yang mengatakan hei bahkan sebelum Anda menjalankan ini, harus ada nomor yang juga

00:08:00.470 --> 00:08:02.690
sangat bagus ketika Anda sedang mengembangkan.

00:08:02.690 --> 00:08:08.840
Akhirnya yang paling penting dan ya ada banyak lagi pro tapi kami hanya fokus pada yang utama

00:08:08.840 --> 00:08:09.860
di sini.

00:08:09.920 --> 00:08:15.140
Hal utama dari bahasa yang diketik secara statis adalah Anda akan mendapatkan lebih sedikit bug.

00:08:15.140 --> 00:08:19.750
Anda akan mendapatkan lebih sedikit bug dalam produksi karena ini tidak akan pernah membuatnya menjadi produksi.

00:08:19.760 --> 00:08:28.670
Jika ini gagal pada apa yang kita sebut waktu kompilasi yaitu sebelum kita bahkan mengirimkannya ke browser maka kita cache itu awal kita membuang

00:08:28.680 --> 00:08:34.100
bug itu lebih awal sehingga dalam produksi sebagian besar waktu akan ada lebih sedikit

00:08:34.100 --> 00:08:36.830
bug dengan bahasa yang diketik secara statis.

00:08:36.890 --> 00:08:40.080
Dan jangan khawatir kita akan berbicara tentang kompilasi dan bagaimana cara kerjanya nanti.

00:08:41.370 --> 00:08:42.950
Sekarang kedengarannya sangat bagus.

00:08:42.960 --> 00:08:44.040
Bug bus.

00:08:44.040 --> 00:08:49.120
Dokumentasi yang mudah lengkap dan editor yang dibenci dan sehat.

00:08:49.140 --> 00:08:52.150
Jadi mengapa kita tidak melakukan bahasa yang diketik secara statis saja.

00:08:53.150 --> 00:08:55.420
Yah ada beberapa kontra.

00:08:55.490 --> 00:09:01.490
Yang pertama adalah kita jelas membuat kode kita sedikit lebih sulit untuk dibaca.

00:09:01.580 --> 00:09:02.420
Ini lebih kompleks.

00:09:02.420 --> 00:09:06.360
Sekarang kami hanya menambahkan layer lain ke program kami.

00:09:06.620 --> 00:09:12.590
Dan ini membutuhkan waktu untuk mengetahui apakah kami memiliki proyek dan kami memiliki orang-orang baru yang bergabung dengan perusahaan kami.

00:09:12.620 --> 00:09:18.200
Kita harus mengajari mereka cara menulis lebih banyak kode dan cara menulis ini dengan benar. Ini

00:09:18.200 --> 00:09:19.730
adalah lapisan kompleksitas tambahan.

00:09:20.820 --> 00:09:24.110
Dan itu selalu menjadi perhatian dengan pemrograman yang benar.

00:09:24.210 --> 00:09:28.790
Menambahkan lapisan kompleksitas tambahan adalah hal yang benar-benar akan menguntungkan proyek.

00:09:29.720 --> 00:09:37.160
Kontra atau argumen lain terhadap bahasa yang diketik secara statis adalah bahwa mengapa Anda tidak bisa menulis tes yang

00:09:37.250 --> 00:09:38.440
lebih baik.

00:09:38.450 --> 00:09:46.430
Sebuah topik yang kita bahas di bagian lain banyak orang menjadi sangat bersemangat tentang pengetikan statis dan lupa

00:09:46.520 --> 00:09:50.480
menulis tes yang baik tes unit yang baik.

00:09:51.120 --> 00:09:55.550
Sebelum Anda mengetik statis, terutama dalam bahasa seperti javascript.

00:09:55.560 --> 00:10:01.320
Pastikan Anda memiliki unit test yang bagus dan jangan lupa menulis unit test dan anggap oh yeah

00:10:01.320 --> 00:10:06.240
hanya karena saya mengetik statis, saya tidak akan mendapatkan bug yang tidak benar.

00:10:07.210 --> 00:10:14.230
Akhirnya dengan bahasa yang diketik secara statis Anda akan memiliki proses pengembangan yang lebih lambat karena Anda sekarang memiliki

00:10:14.260 --> 00:10:20.650
langkah ekstra di mana saat Anda sedang meng-coding bersama ada juga pemeriksaan lain untuk melihat bahwa Anda tidak

00:10:20.650 --> 00:10:22.820
membuat kesalahan jenis apa pun.

00:10:23.820 --> 00:10:30.480
Dan ini sebenarnya hanya memperlambat proses pengembangan dan seberapa cepat Anda dapat membuat kode dan menjalankan kode

00:10:30.510 --> 00:10:32.290
dan mengirimkannya ke produksi.

00:10:33.700 --> 00:10:38.980
Anda melihat dengan bahasa yang diketik secara dinamis dan inilah mengapa javascript begitu

00:10:38.980 --> 00:10:46.660
populer adalah bahwa Anda menghabiskan lebih sedikit waktu untuk men-debug sintaks dan kesalahan semantik seperti ini dan alih-alih sebagian besar

00:10:46.660 --> 00:10:52.980
waktu debug Anda dihabiskan murni pada logika dan kesalahan yang sebagai pengembang jauh lebih menarik .

00:10:55.330 --> 00:10:57.650
Baiklah, mari kita kembali ke ini.

00:10:57.700 --> 00:11:05.620
Ada beberapa pro dan kontra lainnya dan setiap orang selalu memiliki pendapat tentang dua topik ini tetapi

00:11:05.920 --> 00:11:07.750
intinya adalah ini.

00:11:07.750 --> 00:11:11.980
Tipe statis biasanya mencegah bug dan membantu menjaga agar kesalahan tidak terjadi.

00:11:12.040 --> 00:11:20.710
Pengetikan dinamis memungkinkan Anda untuk menjadi lebih fleksibel dan menulis perangkat lunak mengetik lebih cepat memungkinkan kami untuk

00:11:21.010 --> 00:11:26.000
membuat javascript berperilaku seperti bahasa yang diketik secara statis.

00:11:26.020 --> 00:11:36.940
Ini menambahkan jenis ke javascript sehingga membuat javascript ekstra aman tetapi sebelum saya melanjutkan dan menunjukkan kepada Anda demonstrasi

00:11:37.030 --> 00:11:38.890
cara kerja naskah.

00:11:39.070 --> 00:11:47.030
Mari kita bicara tentang dua bagian lain dari grafik ini yang sering bingung dengan pengetikan dinamis dan statis.

00:11:47.060 --> 00:11:48.570
Saya akan melihat yang berikutnya.

00:11:48.710 --> 00:11:48.960
Oleh.