WEBVTT

00:01.040 --> 00:05.590
And welcome back we're back to our critical render path diagram.

00:05.600 --> 00:07.730
It's slowly started to make sense.

00:07.760 --> 00:11.000
We've talked about a shemale and CSSA.

00:11.000 --> 00:17.730
Now we're going to talk a little bit about javascript and before he gets into the rendered tree now

00:17.990 --> 00:27.150
of a shemale and CSSA I think javascript is probably the worse because it can access and change both

00:27.270 --> 00:31.300
the DOM and the CSSA.

00:31.330 --> 00:39.700
This means that once a script tag NDA shemale is discovered the DOM construction is paused and the script

00:39.760 --> 00:42.220
is requested from the server.

00:43.130 --> 00:50.240
So no matter what we're doing in the mail Hoopes we see a script file we need to go requested once the

00:50.240 --> 00:52.430
script is loaded.

00:52.430 --> 00:58.280
It can't be executed before all the SS is fast as well.

00:59.310 --> 01:02.040
And the C Ss Dom is constructed

01:04.630 --> 01:07.990
after the CEA says document object model is constructed.

01:07.990 --> 01:18.200
Javascript is executed and yes as you can imagine Javascript can and may access the Dom as well as the

01:18.210 --> 01:21.280
CSSA dam and it can alter it.

01:23.140 --> 01:29.140
And only once that is done can the page finally be rendered by going to the rendered tree layout and

01:29.140 --> 01:31.360
paint.

01:31.530 --> 01:38.780
And that's why we called javascript a parser blocking remember'd the alert code that we did before where

01:38.790 --> 01:44.520
we had a script tag with alert and it just completely blocked the page.

01:44.620 --> 01:49.810
Now with javascript there's a few things that we can do to optimize it.

01:49.810 --> 01:51.050
Let's start with the first one.

01:51.130 --> 01:55.770
Loading scripts asynchronously to help with that.

01:55.810 --> 01:59.470
Have a nice little diagram for us.

01:59.520 --> 02:03.080
You may have seen the most common way of having script tags which is.

02:03.090 --> 02:07.150
Yep just script when the Schmall starts reading.

02:07.260 --> 02:15.680
Which means parsing the file it's going to encounter a script tech and this script tag needs to get

02:15.680 --> 02:19.210
downloaded which blocks see all parsing.

02:19.250 --> 02:27.240
It also needs to get executed which blocks the stream of parsing and then finally once that's done the

02:27.410 --> 02:31.720
Schimmel is back to being parsed.

02:31.720 --> 02:38.470
Now we have two new properties that we can add to our script tags to alter this behavior and the first

02:38.470 --> 02:39.760
one is async.

02:39.790 --> 02:44.710
So loading scripts asynchronously and that's right.

02:44.730 --> 02:45.660
It's super simple.

02:45.660 --> 02:53.110
All we do is add this attribute to our script X by using async we can tell the browser go ahead and

02:53.110 --> 02:58.330
download the javascript file with another thread.

02:58.330 --> 03:04.330
Think of a thread as a person doing work he or she can only do one thing at a time.

03:04.960 --> 03:13.030
With async we can say hey to another worker while I'm working on this a parsing can you go download

03:13.480 --> 03:22.100
the javascript file and this javascript file is now downloading on a low priority but it doesn't block

03:22.190 --> 03:27.730
the rest of the page loading and as soon as it's finished downloading it will execute.

03:27.760 --> 03:33.120
So that part it's still blocking the Shyamal parsing.

03:33.140 --> 03:35.070
Now there's a catch to this.

03:35.070 --> 03:40.810
This means that it can execute at any time which listed two obvious issues.

03:40.810 --> 03:46.590
First that excede execute long after the page actually loads.

03:46.600 --> 03:54.250
So for example for lying on this async script to do something with our user experience then we may give

03:54.250 --> 03:57.670
our user a sub optimal experience.

03:57.730 --> 04:06.070
Second if it happens to execute before the page finishes loading We can't really predict if we need

04:06.070 --> 04:08.590
access to the dom or some of the elements.

04:08.680 --> 04:16.300
If it starts doing some DOM manipulation without the actual Dom being there well we might get some errors.

04:17.350 --> 04:21.080
So here's the rule with async for scripts.

04:22.640 --> 04:28.670
Add them to anything that doesn't affect the dom or the CSSA document object model.

04:28.820 --> 04:36.020
So async should be used for pretty much all external scripts that require no knowledge of our code and

04:36.050 --> 04:38.920
are not really essential to our user experience.

04:38.920 --> 04:45.920
You can think of this as maybe Google Analytics scripts or tracking scripts.

04:45.960 --> 04:50.240
Now there is a second option and again going back to our point here.

04:50.400 --> 04:57.050
The other option with javascript is that we can defer loading of scripts and defer loading of scripts.

04:57.050 --> 05:05.680
Again is simple with this one attribute defer is very similar to async in that it will not block loading

05:05.680 --> 05:06.370
of our page.

05:06.370 --> 05:16.670
However it will wait to execute until after all has been parsed and we will execute in order of appearance.

05:18.070 --> 05:25.070
As you can see here it's going to wait until a shemale is completely parsed and then start executing.

05:25.080 --> 05:34.270
Now this is really really good option for scripts that will act on the rendered tree or the dom but

05:34.510 --> 05:40.470
they're also not important to loading Maybe the above the fold content.

05:41.820 --> 05:45.870
So here's my rule for when to use async and defer.

05:46.230 --> 05:53.970
If the core functionality requires javascript while async is best if core functionality does not require

05:53.970 --> 06:00.370
javascript then javascript should be deferred outside of the critical render path.

06:00.870 --> 06:04.950
Your critical scripts your app script should be here.

06:04.950 --> 06:08.770
Third party scripts that don't affect the DOM.

06:08.770 --> 06:16.650
She'll be here and any perhaps third party scripts that aren't that important aren't above the fold.

06:16.690 --> 06:19.130
Should use differe.

06:19.300 --> 06:22.100
Let's look at the other options.

06:22.230 --> 06:28.060
We can minimize Dohm manipulations and avoid long running Javascript.

06:28.200 --> 06:30.700
So let's use an example here to demonstrate this.

06:34.350 --> 06:37.560
We've upgraded our site a little bit.

06:37.680 --> 06:47.600
We've added a button with red font this time and a cute little dot picture and the file here again.

06:47.710 --> 06:53.600
It's a pretty basic file we have a new image tag here now and we have a couple of scripts.

06:53.620 --> 06:59.410
And don't worry I'll give you access to all these files at the end of the section so you can start practicing

06:59.530 --> 07:00.070
as well.

07:01.490 --> 07:09.140
Now in here in the script tags you see we have a few things one that we're going to talk about is the

07:09.140 --> 07:11.900
first one which is an inline script.

07:12.350 --> 07:20.000
And this script acts simply grabs the button on our page and adds the style color red Let's see what

07:20.000 --> 07:20.820
happens here.

07:21.820 --> 07:31.400
When I refresh the page and take a look at the button over here as I'm refreshing the too hard refresh.

07:31.400 --> 07:32.550
There you are.

07:33.140 --> 07:36.970
You see that the button is always read

07:40.020 --> 07:51.660
and no point if I remove this let's say this is just going to be the default which is black because

07:51.750 --> 07:57.180
javascript gets executed before the render tree.

07:57.270 --> 08:04.660
Just like here if we remember our diagram wants our javascript is loaded.

08:04.930 --> 08:11.430
It's going to read the browsers going to read inside and see if it needs to load any more things.

08:11.480 --> 08:20.030
So once again you can imagine here if you're modifying the dom or changing the styles that's just extra

08:20.030 --> 08:24.430
work that the browser has to do to render.

08:24.470 --> 08:27.310
Let's take a look at these other script files that I have here.

08:30.230 --> 08:37.920
This is the first script file which about it a couple of event listeners to one is Dom content loaded

08:38.460 --> 08:41.920
and the other one is load and.

08:42.010 --> 08:47.450
I'll explain what those do in a bit and then finally we have this is script.

08:48.670 --> 08:51.510
For now let's just look at this script file.

08:51.580 --> 09:01.060
I'm going to comment out the script 2 and 3 save and I'm willing to open up the developer tab here and

09:01.060 --> 09:02.020
I'm going to refresh

09:05.600 --> 09:07.060
Let's see what just happened here.

09:08.400 --> 09:18.790
We have this script to one Dom fully loaded and parsed and then finally all resources finished loading.

09:18.870 --> 09:29.490
If we look at our file we called the secret file what happened here first console log.

09:29.490 --> 09:40.230
This is script one was called first before Dom Cantet was loaded before the page was loaded so the browser

09:40.470 --> 09:45.210
checks the scripts to make sure that it has everything it needs to build the page.

09:45.750 --> 09:53.870
And if we open up the Network tab here and I refresh again I see that the blue line which is over here

09:54.560 --> 10:02.240
is the DOM content loaded which took 14 milliseconds quite fast and that says that the document object

10:02.240 --> 10:04.720
model has been loaded.

10:05.030 --> 10:11.660
And then finally load which is the red line here says that all the content on the page including this

10:11.780 --> 10:19.290
image has been loaded so because of the way the critical render path works.

10:19.790 --> 10:29.410
What happens is that we're reading the javascript file building the DOM tree.

10:29.830 --> 10:37.960
Finally finished building it and then finally finished loading all the scripts or all the files including

10:37.960 --> 10:41.560
the image.

10:41.590 --> 10:48.340
So if we go to our script to and script three as can see seen very simple just console logs.

10:48.490 --> 11:00.280
If I add them into our page and I refresh this go to the console and we see that we have 1 2 three down

11:00.300 --> 11:10.280
fully loaded and parsed all resources finished loading and just for fun here let's add an async attribute

11:10.310 --> 11:11.470
to script to.

11:11.630 --> 11:24.880
If I refresh look at that async or asynchronously downloaded script to now loads after the DOM is fully

11:24.880 --> 11:27.260
loaded because it's not blocking yet anymore.

11:27.730 --> 11:29.120
Very very cool.

11:32.660 --> 11:33.130
All right.

11:33.230 --> 11:40.040
The last thing I'm going to show you is the avoid long running Javascript and this is something that

11:40.070 --> 11:44.830
we'll talk more about in part two when we talk about optimizing code.

11:44.870 --> 11:49.470
I do want to show you one point if we go back to our code here.

11:49.690 --> 11:59.410
I have a nother script and this script simply adds an event Lessner click that has an alert stop click

11:59.470 --> 12:02.490
clicking be and let me show you why.

12:02.490 --> 12:08.700
Long running Javascript files or along executing javascript files are not a good idea.

12:09.120 --> 12:18.780
You see right now this page is not too much loading by just move it up a bit so I can scroll here.

12:19.120 --> 12:20.610
That's great.

12:21.380 --> 12:22.600
If I click on here

12:29.420 --> 12:36.590
oh and I should remove the first one because I've complained that button already has been declared.

12:36.670 --> 12:40.490
If I refresh here see that the bunds not read any more.

12:40.600 --> 12:44.510
If I click I can't do anything anymore.

12:44.590 --> 12:45.760
I can't click any more.

12:45.760 --> 12:47.360
I can scroll any more.

12:47.440 --> 12:52.700
The page is completely blocked because this javascript code is running.

12:53.260 --> 13:00.400
So if you have javascript code that is executing for a long time while you have pretty poor user experience

13:00.400 --> 13:07.790
because it feels all blocked and Janke all right there you have it.

13:07.810 --> 13:13.070
We now know how the Shyamal domus control is constructed.

13:13.210 --> 13:17.100
We know how the CSSA object model is constructed.

13:17.380 --> 13:22.090
We know how javascript is read and executed.

13:22.090 --> 13:30.700
We know when Dom content is loaded we can finally do some other things and finally we know that when

13:30.700 --> 13:34.570
the web page is completely loaded we get that load event.

13:34.570 --> 13:35.620
So the next video.

13:35.680 --> 13:40.600
Let's talk about these last few steps and get into some exercises.

13:40.600 --> 13:41.790
I'll see on that one.

13:41.890 --> 13:42.100
Bye.
