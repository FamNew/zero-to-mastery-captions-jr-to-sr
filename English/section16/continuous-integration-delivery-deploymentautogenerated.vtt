WEBVTT

00:01.230 --> 00:02.440
Welcome back.

00:02.460 --> 00:09.630
Let's start with the first topic continuous integration continuous integration.

00:09.790 --> 00:11.890
Is this blue box over here.

00:12.760 --> 00:22.150
Is a devolvement practice where developers integrate code into a shared repository frequently preferably

00:22.150 --> 00:32.310
several times a day and each integration can then be verified by an automated build an automated tests.

00:32.310 --> 00:40.170
Now let's unpack this statement so it makes sense in plain English continuous integration is a way for

00:40.170 --> 00:48.440
developers to use a shared repository like get a job and we know all about how by now and this shared

00:48.440 --> 00:52.200
repository is going to be used throughout the day.

00:52.380 --> 01:02.070
Each pull requests of a bug fix or a new feature must go through an automatic Builth step that may include

01:02.070 --> 01:09.360
things like tests and Linked-In to make sure that all the tests pass all our unit tests pass.

01:09.360 --> 01:17.410
Maybe we haven't made any lending or syntax error and that everything builds our project builds as expected.

01:17.630 --> 01:23.200
We make sure that the code is compatible with the rest of the codebase.

01:23.290 --> 01:31.270
Now one of the key benefits of integrating regularly is that you can detect errors quickly and locate

01:31.270 --> 01:38.530
them more easily because each change that is introduced is going to be small and it's going to pinpoint

01:38.710 --> 01:41.950
the specific change that introduce a defect.

01:41.950 --> 01:48.960
If we make a PR or a pull request on get Hobb we run the tests and those tests fail.

01:49.120 --> 01:57.510
We know right away that that PR needs to get fixed and even if it introduces a bug after it's been merged

01:58.140 --> 01:59.950
if a bug suddenly appears.

01:59.970 --> 02:07.030
Well we know that this poll requests most likely did it because it was recently introduced.

02:07.080 --> 02:09.750
So what's the point of all this.

02:09.750 --> 02:16.110
The point is for companies to make sure that code from many developers has as little as possible bugs

02:16.530 --> 02:18.480
and that it stays consistent.

02:18.480 --> 02:20.870
As much as possible.

02:21.070 --> 02:27.190
Now I'm going to take you through a set up of this so you can actually see what I mean when I say run

02:27.190 --> 02:29.870
a build step like tests and builds.

02:29.890 --> 02:33.330
Don't worry we're going to get to that.

02:33.370 --> 02:42.460
I want you to just have this point across though that this process makes sure that code of the individual

02:42.460 --> 02:49.480
developers meet a certain standard and that this way no matter how big our teams we can make sure that

02:49.600 --> 02:55.560
individual developers work don't divert from the original codebase.

02:55.660 --> 03:04.960
We keep things in line and in check and continuous integration is that when you combine the process

03:05.050 --> 03:14.910
of making a PR often infrequently with automated testing that is tests that run automatically and you

03:14.910 --> 03:20.100
include things as automatic building and then other developers checking the PR.

03:20.100 --> 03:27.240
And then finally merging it by doing this you avoid the integration hell that usually happens when people

03:27.240 --> 03:30.820
wait for release day to merge everything.

03:31.110 --> 03:37.680
Let's say the day before the big release everybody that has been working on a feature everybody on different

03:37.680 --> 03:43.430
features is going to merge all at once and again without actually facing the problem.

03:43.440 --> 03:45.430
It's going to be hard to explain this.

03:45.480 --> 03:51.130
So we're actually going to implement it in our robo friends up.

03:51.320 --> 03:57.770
But I want you to just remember this continuous integration puts a great emphasis on testing automation

03:58.130 --> 04:00.350
to check that the application is not broken.

04:00.350 --> 04:07.910
Whenever a new commit or a PR pull request is integrated into the main branch you see over here that

04:08.120 --> 04:15.880
we make a PR the tests automatically run for us and we run the build and make sure that everything passes

04:16.100 --> 04:22.520
and that's automatically done to make sure that before we merge before somebody reviews our pool request

04:23.030 --> 04:25.720
those tests pass.

04:25.720 --> 04:27.790
All right let's go to the next one.

04:27.970 --> 04:34.930
The next one is this yellow square that over Lap's continuous integration called continuous delivery

04:36.130 --> 04:42.520
and continuous delivery is the practice of keeping your code base deployable at any point.

04:43.510 --> 04:51.630
Beyond making sure that your application in this blue part are integrated into the main branch we have

04:51.630 --> 04:54.500
a few extra steps.

04:54.730 --> 05:02.530
You see it has to have all the configurations necessary to push in production whenever we want continuous

05:02.530 --> 05:03.130
delivery.

05:03.160 --> 05:10.540
Is the idea that we're always going to keep things ready so that when we want a delivery product deployed

05:10.540 --> 05:17.140
to production maybe have an update to our product we can do so and we have this extra step of acceptance

05:17.140 --> 05:24.190
tests such as we want this feature to do this and you might have somebody that's a cute way or a quality

05:24.190 --> 05:31.690
analyst or a who is doing tests or a product owner that checks to make sure that all the features are

05:31.750 --> 05:38.860
implemented and then manually a developer or a team lead clicks on a button that says deploy to production

05:40.380 --> 05:41.660
continuous delivery.

05:41.700 --> 05:47.310
As you can see is an extension of continuous integration to make sure that you can release new changes

05:47.310 --> 05:50.710
to your customers quickly in a sustainable way.

05:51.560 --> 05:58.910
This means that on top of having automated your testing you also have to automate the release process

05:59.570 --> 06:01.330
so that you can deploy your production.

06:01.340 --> 06:09.270
As I said before at any point in time in theory with continuous delivery delivery process in your company

06:09.300 --> 06:16.300
you can decide to release daily weekly every night or whatever suits your business requirement.

06:17.120 --> 06:22.040
But the idea of continuous delivery is that ideally just like we do with continuous integration and

06:22.040 --> 06:29.030
making small but often cars and merging our poll requests and features as often as possible with continuous

06:29.030 --> 06:29.770
delivery.

06:29.900 --> 06:31.490
It works really really well.

06:31.640 --> 06:39.530
When you start doing small release batches you might have noticed on your phone how your apps get always

06:39.530 --> 06:46.220
updated you have new patches new versions almost every week and they practice continuous delivery of

06:46.220 --> 06:52.910
making small incremental changes to the app that are easy to troubleshoot in case there's a problem.

06:52.910 --> 06:56.160
They have to go back and fix things.

06:56.210 --> 06:57.310
All right.

06:57.480 --> 06:58.700
It's not just the two.

06:58.710 --> 07:02.040
I know the title says see-I CD and I light a bit.

07:02.040 --> 07:12.110
There's one more and that is continuous deployment it's closely related to continuous delivery and it

07:12.110 --> 07:17.900
is referring to keeping your application deployable at any point in time just like we have with continuous

07:17.900 --> 07:19.270
delivery.

07:19.360 --> 07:27.500
But there's one small difference and like continuous delivery continuous deployment goes straight into

07:27.500 --> 07:28.400
production.

07:28.400 --> 07:34.730
That is there's no manual developer or Team Lead or manager that clicks abandoned says all right all

07:34.730 --> 07:37.510
the acceptance tests have passed.

07:37.610 --> 07:38.790
Everything checks out.

07:38.810 --> 07:45.860
I'm going to deploy to production continues deployment is a philosophy where you say if acceptant tests

07:45.920 --> 07:53.530
are automatically passed well automatically it's going to deploy to production and you might have noticed

07:53.530 --> 07:54.600
continuous delivery.

07:54.610 --> 08:02.700
When you look at GET HOT pages with get pages such as the robo friends redux we see that we have our

08:02.700 --> 08:04.220
app deployed.

08:04.590 --> 08:10.230
And any time I merge into to master a new version maybe I want to title this to something different

08:11.170 --> 08:16.840
we might want to make some changes here maybe change the title maybe changed a color but any time I

08:16.930 --> 08:23.980
merge into master here this link is going to be updated because it references whatever Zen Master and

08:23.980 --> 08:26.890
this is similar to continuous deployment.

08:26.890 --> 08:35.520
Every time it's merged and all my tests pass while whatever the users see or is deployed is automatically

08:35.520 --> 08:37.110
going to be changed as well.

08:38.450 --> 08:41.810
Now why am I teaching Google this.

08:41.960 --> 08:48.590
It's because continuous deployment and continuous delivery have developed as best practices for keeping

08:48.590 --> 08:53.910
your application in a good state in a deployable state at any point.

08:54.290 --> 08:57.800
And this is just good practice to have.

08:57.860 --> 09:04.270
This allows your team to move fast while keeping high quality standards that can be checked automatically.

09:04.310 --> 09:09.940
You see a lot of top companies practice this way of developing their codebase as a matter of fact.

09:09.950 --> 09:16.980
If it's your first couple of days at a large company you'll probably be getting introduced to this process

09:17.060 --> 09:18.510
so you're familiar with it.

09:18.860 --> 09:27.110
So just remember this continues deployment goes one step further than the continuous delivery with this

09:27.110 --> 09:27.890
practice.

09:28.100 --> 09:36.340
Every change that passes all stages of your production what we call pipeline this process is released

09:36.550 --> 09:38.180
to your customers.

09:38.200 --> 09:44.170
There's no human intervention and only a failed to test will prevent a new change to be deployed to

09:44.170 --> 09:45.790
production.

09:45.820 --> 09:52.050
Now once again this is going to be really really confusing if you see this for the first time.

09:52.230 --> 09:59.070
We're going to actually build a pipeline a big step a continuous integration step so that you understand

09:59.130 --> 10:01.530
what the benefits are and how to do it.

10:01.570 --> 10:07.220
Are your company however let's talk a little bit more about this in the next video.

10:07.330 --> 10:09.070
I'll see in that one by.
