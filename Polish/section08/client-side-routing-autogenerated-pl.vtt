WEBVTT

00:00:01.740 --> 00:00:05.400
Chciałem dodać krótką notatkę po pismach od strony klienta.

00:00:05.580 --> 00:00:07.860
Wiem, że trochę się nad tym zastanawiałem.

00:00:07.860 --> 00:00:09.870
Ale oto ogólny pomysł.

00:00:09.870 --> 00:00:16.920
Strona routingu po stronie klienta dzieje się, gdy wewnętrzna ścieżka jest obsługiwana przez javascript załadowany na

00:00:16.920 --> 00:00:17.590
stronę.

00:00:17.940 --> 00:00:22.620
To jest coś, co zobaczymy później w trakcie pracy z naszą

00:00:22.620 --> 00:00:23.970
inteligentną aplikacją mózgu.

00:00:24.240 --> 00:00:28.830
I tak działają większość aplikacji renderujących po stronie klienta.

00:00:28.830 --> 00:00:34.860
Zajmujemy się routingiem przy użyciu javascript, ponieważ obecnie używamy renderowania po stronie serwera, takiego jak

00:00:34.860 --> 00:00:39.080
stare strony internetowe, które za każdym razem spełniają prośbę przeglądarki.

00:00:39.090 --> 00:00:46.260
Za każdym razem, gdy reguła zmienia stan naszej aplikacji również się zmieni.

00:00:46.260 --> 00:00:52.410
Teraz główną różnicą między renderowaniem po stronie klienta a renderowaniem po stronie serwera jest to, że

00:00:52.410 --> 00:00:56.850
po renderowaniu po stronie klienta nie trzeba odświeżać całej strony.

00:00:56.940 --> 00:01:01.640
Wróćmy do naszego przykładu, jeśli mam tylko tag.

00:01:01.680 --> 00:01:03.180
Skomentujmy to.

00:01:04.450 --> 00:01:08.500
I zamierzam usunąć komentarz z naszego tagu e-tag.

00:01:08.580 --> 00:01:11.490
A więc teraz robi to renderowanie po stronie serwera.

00:01:11.610 --> 00:01:20.170
Jeśli wrócę do mojej strony, odświeżam się i jeśli kliknę stronę Informacje, zobaczysz flash.

00:01:20.200 --> 00:01:20.880
Proszę bardzo.

00:01:21.070 --> 00:01:28.330
Zobaczysz także, że wszystkie te prośby zostały wykonane, aby strona Informacje była wyświetlana na całej stronie internetowej lub

00:01:28.330 --> 00:01:30.690
cała strona została załadowana ponownie.

00:01:32.320 --> 00:01:37.240
A jeśli wrócę ponownie to samo, co renderowanie po stronie serwera.

00:01:37.280 --> 00:01:40.090
Teraz, jeśli użyję

00:01:43.160 --> 00:01:53.550
tagu linku i skomentujmy to ponownie i zapiszę tutaj, jeśli odświeżę początkowy ładunek, pobierz wszystko.

00:01:53.550 --> 00:02:03.120
Ale teraz, gdy kliknę opcję Informacje, zobaczysz, że tylko część zainfekowanej strony zostanie załadowana.

00:02:03.120 --> 00:02:11.430
W naszym przypadku jest to plik Dot js i jeśli wrócimy, ponieważ nasz indeksowany plik dot js został już załadowany,

00:02:11.430 --> 00:02:13.980
nigdzie go tutaj nie zobaczysz.

00:02:14.000 --> 00:02:17.130
I jeśli znów się powtórzę, wszystko jest już załadowane.

00:02:17.280 --> 00:02:20.080
Nie musimy więc ponownie wracać na serwer.

00:02:20.100 --> 00:02:23.590
To jest coś naprawdę fajnego, co daje kolejny dostęp.