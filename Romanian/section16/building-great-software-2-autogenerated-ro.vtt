WEBVTT

00:00:01.000 --> 00:00:09.000
Bine ați venit înapoi acum ar trebui să avem o mai bună înțelegere a ceea ce vezi-I CD-ul este o

00:00:09.000 --> 00:00:11.850
continuă integrare de livrare continuă livrare continuă.

00:00:11.850 --> 00:00:14.240
Să revizuim ceea ce am învățat până acum.

00:00:14.250 --> 00:00:21.200
Acum, poate că nu ați realizat-o, dar tocmai ați învățat practicile fundamentale care vă fac un dezvoltator

00:00:21.200 --> 00:00:22.480
de stele rock.

00:00:22.500 --> 00:00:23.490
De ce.

00:00:23.490 --> 00:00:31.380
Deoarece știți cum ar trebui să se stabilească un proiect software bun ce instrumente să utilizați ce practici să urmați pentru a vă

00:00:31.380 --> 00:00:35.290
asigura că acest lucru nu este un mic proiect proastă mic.

00:00:36.740 --> 00:00:38.740
Știți ce fac unele companii.

00:00:38.750 --> 00:00:43.580
Unele dintre cele mai mari companii din lume fac acest lucru pentru a se asigura că pot

00:00:44.420 --> 00:00:48.400
ajunge la milioane de utilizatori și mii de angajați care lucrează la același codaj.

00:00:48.440 --> 00:00:55.160
Am văzut că avem un sistem de coduri de bună calitate în care facem în mod constant schimbări și caracteristici mici

00:00:55.310 --> 00:01:03.590
și avem solicitări de tragere zilnică, care acum se execută automat cu pașii de la Bill și cu pașii de testare Lanting și cu alte verificări

00:01:03.620 --> 00:01:05.250
pe care le dorim.

00:01:05.330 --> 00:01:10.010
Apoi facem recenzii de cod și am combinat funcții zilnice noi.

00:01:10.010 --> 00:01:16.250
Apoi, putem explora diferite lucruri, cum ar fi livrarea continuă și desfășurarea în cazul în care avem teste

00:01:16.250 --> 00:01:22.220
de acceptare sau testeri care testează software-ul nostru și apoi putem fi implementate manual la producție pentru

00:01:22.220 --> 00:01:25.910
utilizatorii noștri reali sau putem avea automatizate de asemenea.

00:01:25.910 --> 00:01:35.330
Și această diagramă este ceea ce majoritatea companiilor bune urmează acest proces care durează destul de mult timp până când

00:01:35.330 --> 00:01:38.360
de fapt aveți cod în producție.

00:01:38.420 --> 00:01:45.890
Noi scriem codul nostru pe mașinile noastre ca dezvoltatori folosind instrumente ca Lanting tipcript și teste pentru a ne

00:01:45.890 --> 00:01:47.870
asigura că codurile noastre trec.

00:01:47.900 --> 00:01:53.560
Apoi putem avea ceva de genul Prete commit Huck care verifică dacă codul nostru este destul de

00:01:53.570 --> 00:01:57.470
corect, astfel încât să avem un format consistent cu restul proiectului.

00:01:57.530 --> 00:02:04.250
Apoi facem acea cerere de piscină pentru a obține Hobb și cercuri. i imediat ce soseste cererea de piscina spune OK OK lasa-ma

00:02:04.320 --> 00:02:09.980
sa rulez cateva teste pentru a te asigura ca nu ai de gand sa ne incurce codul nostru a fugit

00:02:09.980 --> 00:02:10.770
cateva teste.

00:02:10.790 --> 00:02:12.110
Totul trece.

00:02:12.110 --> 00:02:16.490
Apoi, mergeți la coechipierii dvs., iar alți oameni revizuiesc codul.

00:02:16.490 --> 00:02:18.020
Facem o revizuire a codului.

00:02:18.020 --> 00:02:24.830
Se spune că putem rezolva asta, poate că putem face asta dacă nu te acceptă să începi de aici și

00:02:24.830 --> 00:02:26.030
să reface totul.

00:02:26.120 --> 00:02:30.530
Dacă acceptă, ei vor îmbina schimbările și vor primi ajutor.

00:02:30.770 --> 00:02:34.780
Și în majoritatea companiilor veți vedea ceva de genul desfășurării.

00:02:34.790 --> 00:02:40.400
Staging-ul este un fel de domeniu de practică pentru a vă asigura că înainte de al trimite

00:02:40.400 --> 00:02:43.280
în lumea reală, totul funcționează așa cum trebuia.

00:02:43.640 --> 00:02:48.470
Putem adăuga un proces care nu este o variabilă ecologică de etapizare.

00:02:48.650 --> 00:02:54.980
Și putem avea niște afirmații în baza noastră de cod, care afirmă că dacă aceasta se întâmplă, poate testați

00:02:54.980 --> 00:02:58.190
viteza aplicației noastre cât de mult CPQ ați utilizat.

00:02:58.190 --> 00:03:03.380
Dacă este conectat corespunzător la baza de date și doriți să imitați etapele cât mai

00:03:03.380 --> 00:03:07.920
mult cu ajutorul unei producții, cum ar fi bazele de date similare similare.

00:03:08.030 --> 00:03:13.690
Cu cât producția are mai mult în comun cu producția, cu atât mai mult putem presupune că lucrurile vor funcționa

00:03:13.700 --> 00:03:15.770
odată ce vom împinge la producție.

00:03:15.770 --> 00:03:23.450
Apoi avem ceva de genul testelor de acceptare în cazul în care probabil un tester sau un toner de produs sau chiar Brunow

00:03:23.660 --> 00:03:29.020
testează pe serverul de așteptare pentru a vă asigura că totul funcționează ca noua noastră funcție.

00:03:29.210 --> 00:03:35.580
Și odată ce totul este trecut, atunci în cele din urmă putem presupune că codul este în siguranță.

00:03:35.630 --> 00:03:44.060
Sa lansam in productie cu productia variabila de mediu si totul este bine totul este bine, dar nu am

00:03:44.150 --> 00:03:45.340
terminat inca.

00:03:45.380 --> 00:03:48.660
Avem ceva numit teste de fum și fum.

00:03:48.680 --> 00:03:55.190
Da, dacă intenționați să implementați fiecare comitere automată la producție, trebuie să vă asigurați că aveți o modalitate

00:03:55.190 --> 00:03:59.020
bună de a fi avertizat dacă ceva nu merge bine.

00:03:59.810 --> 00:04:03.000
Deci, uneori o nouă schimbare nu se va rupe.

00:04:03.050 --> 00:04:04.100
Producție imediat.

00:04:04.100 --> 00:04:11.630
Și a trecut toate aceste teste, dar toate provoacă probabil CPQ-ul sau consumul de memorie să meargă într-adevăr foarte

00:04:11.630 --> 00:04:13.600
mare și să spargă.

00:04:13.760 --> 00:04:19.610
Deci, poate doriți să aveți patru teste de fum de monitorizare în timp real a serverelor dvs.

00:04:19.610 --> 00:04:27.380
de producție pentru a putea urmări nereguli sau metrici care arată că ceva nu merge bine și că aveți companii care nu ca

00:04:27.380 --> 00:04:30.890
o relicvă nouă care vă permit să vă monitorizați serviciul.

00:04:30.890 --> 00:04:37.420
Din nou avem întotdeauna instrumente și puteți vedea aici că este o bătălie constantă o bătălie

00:04:37.420 --> 00:04:44.710
constantă pentru a vă asigura că, indiferent cât de mulți coderi avem, indiferent de cât de mare este codul

00:04:44.710 --> 00:04:51.670
de bază, avem un proces frumos de netezime pentru a avea totul curge frumos, timpul în care ajungem la

00:04:51.670 --> 00:04:59.090
producție ne putem minimiza riscul ca noi să pierdem venituri sau utilizatori sau chiar să ne mulțumim cu clienții noștri.

00:05:00.680 --> 00:05:09.260
Și dacă toate acestea funcționează și suntem capabili să ajutăm cu asta un dezvoltator senior în timp ce atunci facem toată lumea fericită

00:05:09.530 --> 00:05:15.820
și acesta este scopul unui dezvoltator senior un dezvoltator senior nu este neapărat persoana care cunoaște cele

00:05:16.060 --> 00:05:19.900
mai tari funcții și poate scrie cea mai inteligentă cod.

00:05:20.140 --> 00:05:27.370
Nu un dezvoltator senior este cineva care înțelege acest proces se poate asigura că acest proces curge fără probleme

00:05:27.370 --> 00:05:33.820
că totul este de lucru bine cu cercuri. Fac toate testele necesare.

00:05:33.820 --> 00:05:40.750
Avem toate testele de fum în loc un dezvoltator senior este cineva care este capabil să aibă o imagine

00:05:40.750 --> 00:05:49.800
de ansamblu asupra modului în care putem face acest flux de la scrierea de cod pe un dezvoltator de laptop pentru ao pune în producție.

00:05:49.960 --> 00:05:58.350
Dacă reușiți să înțelegeți acest lucru, atunci puteți gestiona echipe și gestiona proiecte și apoi toată lumea

00:05:58.350 --> 00:06:01.470
va fi mulțumită de dumneavoastră.

00:06:01.530 --> 00:06:02.300
Voi vedea în următorul.