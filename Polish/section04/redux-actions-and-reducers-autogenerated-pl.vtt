WEBVTT

00:00:01.220 --> 00:00:03.020
I witaj z powrotem.

00:00:03.020 --> 00:00:11.230
Teraz, gdy mamy zainstalowane redux i Riak redux Zacznijmy pisać kod i implementować redux.

00:00:11.430 --> 00:00:19.700
Teraz pierwszą rzeczą, którą chcemy zrobić, jest stworzenie czegoś zwanego akcją, a także reduktora.

00:00:19.980 --> 00:00:30.040
Jeśli pamiętasz ten schemat, wspomnieliśmy, że Reebok ma te dwa składniki, które działają i redukują.

00:00:30.050 --> 00:00:33.820
Więc zamierzamy zbudować tych dwóch i pokazać, co mam na myśli.

00:00:35.460 --> 00:00:39.440
Pierwszą rzeczą, którą chcemy zrobić, jest utworzenie nowego pliku.

00:00:39.630 --> 00:00:45.930
Po prostu zatrzymajmy go w folderze źródłowym, a powiemy, że będzie to nazywane "Actions",

00:00:47.940 --> 00:00:54.020
pomyślałem o Jamesie, a tutaj stworzymy akcję za pomocą zwykłego starego javascriptu.

00:00:54.090 --> 00:01:03.680
Zamierzamy powiedzieć, że eksportującym Konst i pierwszą akcją, którą zamierzamy zrobić, jest pole wyszukiwania.

00:01:03.750 --> 00:01:09.810
Więc pamiętaj, że kiedy wpisujemy w polu wyszukiwania możemy filtrować roboty

00:01:09.810 --> 00:01:17.100
powiedzą, że akcja, która jest w wyszukiwaniu, zmieniła się, że mieliśmy w aplikacji ponownie powiedzieć,

00:01:17.100 --> 00:01:31.180
że to będzie nazywane Ustaw pole wyszukiwania, a to pole wyszukiwania będzie otrzymujemy dane wejściowe z tekstu, który użytkownik wpisuje, a ponieważ chcemy zachować to tak małe, jak

00:01:31.180 --> 00:01:37.840
to tylko możliwe, możemy je zawinąć w nawiasy klamrowe, abyśmy mogli uniknąć instrukcji

00:01:37.840 --> 00:01:38.540
return.

00:01:38.560 --> 00:01:45.100
Właśnie zwracamy obiekt i ten obiekt

00:01:47.810 --> 00:01:54.430
będzie miał typ zwany zmienionym polem wyszukiwania.

00:01:57.540 --> 00:02:06.070
I będziemy mieć ładunek o nazwie opodatkowany.

00:02:06.210 --> 00:02:13.980
Tak więc ta akcja będzie się nazywać Ustawione pole wyszukiwania będzie podlegało opodatkowaniu, które jest tym,

00:02:13.980 --> 00:02:20.060
co użytkownik wprowadza i zwróci obiekt, który ma zmieniony typ pola wyszukiwania.

00:02:20.460 --> 00:02:28.200
Więc to jest akcja, która jest podejmowana, a ona będzie wysyłać i ładować to powszechna nazwa, która

00:02:28.200 --> 00:02:36.750
jest używana i redox, więc po prostu przyzwyczaić się do tego ładunku, wysyłamy wszystko, co jest potrzebne, aby przejść

00:02:36.750 --> 00:02:41.680
do producenta, który właśnie pójdzie być tym, co użytkownik wprowadzi.

00:02:42.750 --> 00:02:43.120
W porządku.

00:02:43.150 --> 00:02:45.220
Właśnie stworzyliśmy naszą akcję.

00:02:45.340 --> 00:02:46.030
to jest to!

00:02:46.180 --> 00:02:47.800
To nasza akcja.

00:02:47.800 --> 00:02:49.390
Ładne i proste.

00:02:49.390 --> 00:02:57.640
Teraz tutaj skapitalizowałem to, ponieważ jest to stała, a stała jest zazwyczaj pisana wielkimi literami.

00:02:57.640 --> 00:03:07.720
Wszystkie ograniczenia w javascript są tylko standardem, ale lubię używać rzeczywistej zmiennej stałej, ponieważ za pomocą napisu możemy

00:03:07.720 --> 00:03:12.960
błędnie napisać coś i możemy nie dostać powietrza.

00:03:13.000 --> 00:03:18.220
Ale jeśli użyjemy zmiennej i pomylimy ją, to rzeczywiście wystąpi błąd, gdy uruchomimy aplikację.

00:03:18.220 --> 00:03:21.210
To dobra, fajna sztuczka.

00:03:21.220 --> 00:03:27.990
Większość demo redoks ma koszt i podąża za ścianą, gdzie śledzi wszystkie te działania.

00:03:28.240 --> 00:03:34.480
I miło jest mieć plik, w którym można zobaczyć, jakie są twoje działania.

00:03:34.480 --> 00:03:39.630
Linia po linii, ponieważ większość aplikacji będzie miała więcej niż jedną akcję, jak zobaczysz.

00:03:39.700 --> 00:03:44.010
Stwórzmy więc nowy plik, a my go nazwiemy stałym.

00:03:44.250 --> 00:03:46.130
Tak.

00:03:46.330 --> 00:03:51.390
I tutaj, w ramach eksportu. Zróbmy to trochę większym, żebyś mógł zobaczyć.

00:03:51.500 --> 00:03:52.740
Proszę bardzo.

00:03:52.780 --> 00:03:58.650
Zamierzamy eksportować ciągłe zmiany.

00:03:59.690 --> 00:04:02.070
Pole wyszukiwania.

00:04:02.310 --> 00:04:04.290
I to będzie równe naszej sile.

00:04:05.180 --> 00:04:10.250
Znów dokładnie to samo, co zmiana pola wyszukiwania zakupionego ciągu wydaje się trochę

00:04:13.060 --> 00:04:16.520
zbędne, ale jest to po prostu dobra praktyka.

00:04:16.810 --> 00:04:23.380
Teraz, gdy mamy tę zmienną, która jest stała i dlatego, że ją eksportujemy, możemy ją

00:04:23.380 --> 00:04:24.510
po prostu

00:04:29.680 --> 00:04:38.070
zaimportować tutaj, a my powiemy, że zmienione pole wyszukiwania upewni się, że nie ma błędów pisowni w ten sposób, a

00:04:38.490 --> 00:04:41.080
powiemy, że import z pliku Constans.

00:04:45.710 --> 00:04:49.630
Zróbmy to trochę mniej, żeby wszystko pasowało.

00:04:49.710 --> 00:04:52.930
I proszę.

00:04:52.940 --> 00:04:59.640
Teraz możemy użyć zmienionego pola wyszukiwania zamiast tekstu.

00:04:59.780 --> 00:05:00.660
I proszę.

00:05:00.730 --> 00:05:08.650
Mamy ładny i dobrze wyglądający plik akcji z ustawioną funkcją pola wyszukiwania i możesz to sobie wyobrazić, ponieważ dostajemy

00:05:08.650 --> 00:05:14.680
coraz więcej akcji, które możemy nadal dodawać i wciąż dodajemy wszystkie stałe, które są nam

00:05:14.680 --> 00:05:18.460
potrzebne do działań, które nasza aplikacja ma .

00:05:18.460 --> 00:05:18.660
W porządku.

00:05:18.670 --> 00:05:22.020
Następną rzeczą, którą zapamiętamy z redox jest po akcji.

00:05:22.030 --> 00:05:30.190
Mamy również reduktor, który, jak powiedziałem, jest dużą funkcją, która po prostu czyta akcję i wypluwa

00:05:30.190 --> 00:05:32.420
to, co nazywamy stanem.

00:05:32.530 --> 00:05:38.560
Zróbmy to, więc stwórzmy inny plik, który

00:05:42.040 --> 00:05:53.670
nazwiemy "reduktorami", dodgy i myślimy, że tutaj to stworzyliśmy, lub zaczniemy od wypowiedzenia początkowego stanu Konstanta.

00:05:54.050 --> 00:05:56.030
Potrzebujemy więc jakiegoś punktu wyjścia.

00:05:56.030 --> 00:06:00.790
Więc może pamiętasz w naszym dodgiest pliku, aby utworzyć ponownie działać.

00:06:00.860 --> 00:06:08.220
Jeśli to otworzę, widzimy, że mamy stan początkowy z pustym polem wyszukiwania.

00:06:08.240 --> 00:06:15.400
Podobny do tego, musimy powiedzieć, że początkowy etap tutaj będzie miał pole wyszukiwania, które jest

00:06:18.290 --> 00:06:20.390
równe pustemu ciągowi znaków.

00:06:22.080 --> 00:06:23.510
To jest stan początkowy.

00:06:23.550 --> 00:06:28.050
To pierwszy obiekt, który będziemy mieli w sklepie redux.

00:06:28.530 --> 00:06:31.850
A teraz musimy ponownie stworzyć reduktor.

00:06:31.920 --> 00:06:38.190
Pamiętaj, że jest to funkcja, która jest bardzo łatwa do zrobienia, ponieważ będziemy jej używać w innych miejscach.

00:06:38.190 --> 00:06:46.780
Zamierzamy go wyeksportować, a powiemy, że to roboty poszukiwawcze, ponieważ to jest akcja, która

00:06:46.780 --> 00:06:52.640
polega na przeszukiwaniu robotów za pomocą pola wyszukiwania.

00:06:52.660 --> 00:06:58.980
Więc te roboty wyszukiwania redukują ich dobre wykorzystanie w kilku rzeczach.

00:06:59.030 --> 00:07:09.470
Pierwszy to stan, który jest stanem naszej aplikacji, a drugą rzeczą jest działanie.

00:07:09.490 --> 00:07:11.720
Tak właśnie się stało.

00:07:13.630 --> 00:07:20.440
Używając ESX, dajmy mu domyślne parametry, aby upewnić się, że jeśli jest puste lub akcja jest pusta. Nie

00:07:20.440 --> 00:07:21.890
dostaniemy się tam.

00:07:21.910 --> 00:07:30.340
Powiemy więc, że stan będzie stanem wyjściowym, dlatego mamy tu górę, a działanie będzie po

00:07:30.340 --> 00:07:32.110
prostu pustym obiektem.

00:07:32.110 --> 00:07:38.790
Pamiętaj, że nasze działania są tylko obiektami, które powracają.

00:07:38.820 --> 00:07:48.690
Stąd, używając funkcji powietrza, mamy nasz pierwszy reduktor i zmniejszamy ścinanie, co oni robią, to dostają

00:07:48.780 --> 00:07:52.190
to wejście stanu i akcji.

00:07:52.230 --> 00:07:58.680
A jeśli dbają o akcję, którą otrzymują w naszym przypadku, jeśli zależy nam na tym, czy

00:07:58.680 --> 00:08:04.980
otrzymamy jakieś działania związane z przeszukiwaniem robotów, zrobimy coś, co zamierzamy podjąć nad państwem w

00:08:04.980 --> 00:08:09.820
taki sposób, w jaki zamierzamy Czyli użyjemy instrukcji switch i powiemy w

00:08:09.820 --> 00:08:12.960
oświadczeniu switcha, że zamierzamy zrobić typ akcji, pamiętając

00:08:15.650 --> 00:08:17.370
o typie akcji.

00:08:17.480 --> 00:08:20.280
To coś, czego używamy w akcji Dodge'a.

00:08:20.510 --> 00:08:25.480
Pamiętaj, że mamy rodzaj pola wyszukiwania zmian.

00:08:25.610 --> 00:08:31.390
Patrząc na to wygląda na to, że będziemy dbać o typ akcji w polu wyszukiwania.

00:08:31.430 --> 00:08:41.910
Więc sprowadzimy tutaj plik Constance dla redox, ponieważ nasi biedni są również gotowi.

00:08:42.050 --> 00:08:51.530
I tutaj możemy powiedzieć, że jeśli chodzi o typ akcji.

00:08:51.730 --> 00:08:54.730
Whoops, po prostu spróbujmy zmienić pole wyszukiwania.

00:08:56.370 --> 00:09:07.100
Jeśli tak jest dobrze, chcemy przywrócić nowy stan, a to sięga trzech zasad, o których

00:09:07.100 --> 00:09:08.060
mówiliśmy.

00:09:08.060 --> 00:09:08.850
Spójrzmy.

00:09:10.240 --> 00:09:15.610
Trzema dyrektorami, którzy reagują, jest to, że mamy jedno źródło prawdy, które jest jednym wielkim obiektem

00:09:15.610 --> 00:09:16.690
opisującym naszą aplikację.

00:09:16.840 --> 00:09:22.490
Mamy zatem naszą początkową zmienną stanu, o której mówiliśmy, że stan jest tylko do odczytu.

00:09:22.540 --> 00:09:26.880
Oznacza to, że nigdy nie możemy modyfikować tego obiektu.

00:09:26.900 --> 00:09:37.170
Jedyne, co możemy zrobić, to stworzyć nowy obiekt, który ma to samo, co przed poprzednim obiektem, poprzedni stan, który

00:09:37.200 --> 00:09:43.670
mieliśmy z dowolnymi modyfikacjami, które mieliśmy, to jest tylko do odczytu.

00:09:43.740 --> 00:09:50.190
I trzecią rzeczą jest to, że zmiany używające tylko czystych funkcji Pamiętam, że czyste funkcje

00:09:50.430 --> 00:09:59.520
są funkcjami, które pobierają jakieś dane wejściowe, tak jak mamy w naszym reduktorze i zwracają wynik, który nie ma żadnych skutków

00:09:59.520 --> 00:10:00.440
ubocznych.

00:10:00.450 --> 00:10:03.120
To nie zmienia niczego.

00:10:03.300 --> 00:10:07.940
Za każdym razem, gdy wprowadzamy dane wejściowe, zawsze daje to samo wyjście.

00:10:08.400 --> 00:10:15.310
Opierając się na tych zasadach, jeśli wrócimy, wiemy, że chcemy, aby ta redukcja

00:10:15.310 --> 00:10:22.270
była czystą funkcją, która polega na przyjmowaniu pewnego rodzaju danych wejściowych i powinna zwracać nowy

00:10:22.270 --> 00:10:32.800
stan i sposób, w jaki to robimy, bez wykonywania pola Daut o stanie stanu i modyfikując tę właściwość, zamierzamy zrobić obiekt punktowy.

00:10:32.960 --> 00:10:43.970
A sposób w jaki to robimy to nawiasy klamrowe przecinające stan, który odbieramy, który jest początkowym stanem początku, a

00:10:43.970 --> 00:10:50.270
następnie w końcu to, co chcemy zmienić w tym obiekcie.

00:10:50.270 --> 00:10:58.280
W naszym przypadku jesteśmy zainteresowani zmianą właściwości pola wyszukiwania, a właściwość

00:10:58.280 --> 00:11:03.690
pola wyszukiwania będzie zawierała akcję Daut payload.

00:11:03.790 --> 00:11:06.800
Znowu pozwólcie, że to trochę mniej.

00:11:06.970 --> 00:11:13.920
Zwracamy nowy stan, jak widać tutaj z projektem obiektu, który będzie miał wszystko w

00:11:13.920 --> 00:11:14.730
stanie.

00:11:14.880 --> 00:11:22.050
Dodatkowo będziemy aktualizować dowolną właściwość pola wyszukiwania, jaką mamy w nowym polu wyszukiwania, z działaniem

00:11:22.150 --> 00:11:23.070
ładunku.

00:11:23.130 --> 00:11:28.760
Pamiętaj, że akcje mają dwie rzeczy, które wysyłają obiekt z typem obiektu z ładunkiem.

00:11:28.780 --> 00:11:32.310
Jeśli wrócimy z typem morza i ładunkiem.

00:11:32.450 --> 00:11:37.370
Mówi to po prostu, że otrzymaliśmy akcję o nazwie Zmień Sarsfield.

00:11:37.490 --> 00:11:45.280
W takim przypadku zwróć nowy stan z ładunkiem akcji, niezależnie od wprowadzonego przez użytkownika.

00:11:45.320 --> 00:11:50.510
Wiem, że może to trochę zagmatwać, ale jest to tylko standardowa składnia redux, do której musisz

00:11:50.510 --> 00:11:51.330
się przyzwyczaić.

00:11:52.550 --> 00:11:53.400
Tylko głowa.

00:11:53.400 --> 00:11:57.050
Jest inny sposób robienia tego, że niektórzy ludzie lubią i są czystsze.

00:11:57.050 --> 00:12:05.760
Inną opcją jest wykonanie destruktury obiektu lub operator rozprzestrzeniania obiektu, co oznacza, że możemy zrobić coś

00:12:06.150 --> 00:12:06.810
takiego.

00:12:10.550 --> 00:12:12.370
Co również działa ładnie.

00:12:12.410 --> 00:12:15.230
Na razie jednak zachowajmy to tak,

00:12:18.720 --> 00:12:23.960
jak zawsze, a potem zawsze pamiętajmy, że czysta funkcja zawsze musi coś zwrócić.

00:12:23.960 --> 00:12:39.640
Jeśli więc typ akcji nie jest tym, chcemy również powiedzieć, że domyślnie zawsze po prostu zwracamy stan.

00:12:39.640 --> 00:12:40.130
Proszę bardzo.

00:12:40.150 --> 00:12:41.790
Stworzyliśmy redo sir.

00:12:42.040 --> 00:12:44.830
To jest czysta funkcja.

00:12:44.830 --> 00:12:52.990
Teraz możemy użyć instrukcji if, jeśli chcemy, ale lubię używać switcha i dokumentacji Riak również polecam

00:12:52.990 --> 00:12:59.550
switch, ponieważ możesz mieć wiele przypadków wielu akcji, które działają na reduktory robotów

00:12:59.560 --> 00:13:06.040
wyszukiwania i dużo łatwiej po prostu dodać i dodać na różne rzeczy, które

00:13:06.250 --> 00:13:08.590
wpływają na stan robotów.

00:13:08.590 --> 00:13:09.100
W porządku.

00:13:09.160 --> 00:13:10.830
To nie było tak źle, prawda.

00:13:10.930 --> 00:13:21.170
Stworzyliśmy reduktor o pewnym stanie początkowym, a także mamy nasze stałe i działania.

00:13:21.300 --> 00:13:28.530
Tak więc ten diagram, który wam pokazałem, zaczyna mieć nieco więcej sensu w następnym filmie.

00:13:28.530 --> 00:13:33.870
Połączmy je, ponieważ teraz nie jest połączony z niczym, co nie jest połączone z naszymi aplikacjami,

00:13:33.870 --> 00:13:36.520
abyśmy mogli ponownie się o tym przekonać.

00:13:36.570 --> 00:13:39.850
Właśnie stworzyliśmy te pliki, które działają na własną rękę.

00:13:40.380 --> 00:13:42.030
Do zobaczenia w następnym.

00:13:42.050 --> 00:13:42.590
PA pa.