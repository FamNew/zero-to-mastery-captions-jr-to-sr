WEBVTT

00:00:01.700 --> 00:00:03.920
Hei, itu Bruno di sini.

00:00:03.920 --> 00:00:06.170
Ini benar-benar fantastis.

00:00:06.170 --> 00:00:11.420
Saya telah melaporkan beberapa temuan Anda kepada CEO kami dan kami sangat yakin bahwa kami akan dapat

00:00:11.420 --> 00:00:16.770
meningkatkan skala perusahaan ini dan mengelola semua pengguna yang akan kami miliki saat kami tumbuh dan tumbuh lebih banyak.

00:00:16.790 --> 00:00:20.450
Sangat menghargai Anda melakukan pekerjaan yang fantastis.

00:00:20.450 --> 00:00:22.010
Hei, istirahatlah.

00:00:22.010 --> 00:00:22.970
Sampai jumpa besok.

00:00:25.050 --> 00:00:25.840
Baiklah.

00:00:25.920 --> 00:00:31.250
Kami baru saja menyelesaikan seluruh gambaran kami tentang cara mengoptimalkan kinerja.

00:00:31.260 --> 00:00:38.190
Saya ingin Anda menggunakan slide ini sebagai referensi kapan saja Anda diminta atau Anda ingin meningkatkan kinerja

00:00:38.370 --> 00:00:39.710
pada aplikasi Anda.

00:00:39.810 --> 00:00:43.790
Lihat ini dan lihat di mana Anda akan memiliki dampak terbesar.

00:00:43.800 --> 00:00:51.060
Mulailah dengan yang termudah ketika suka meminimalkan file atau menggunakannya dan kemudian beralih ke tugas

00:00:51.060 --> 00:00:58.500
yang lebih rumit seperti mencari cara terbaik untuk meningkatkan jalur rendering kritis Anda untuk bahkan memuat penyeimbangan.

00:00:58.570 --> 00:01:08.220
Dan saya harap Anda bersenang-senang sampai saat ini karena Anda melihat Anda telah belajar bagaimana membuat proyek dan aplikasi menjadi lebih

00:01:08.280 --> 00:01:09.050
baik.

00:01:09.300 --> 00:01:16.330
Anda belajar tentang memerankannya kembali bagaimana pustaka Front-End ini membuat aplikasi Front-End yang dapat diskalakan

00:01:16.380 --> 00:01:18.640
bekerja dengan sangat baik.

00:01:19.360 --> 00:01:24.520
Kami juga belajar tentang mengamankan aplikasi kami apakah kami harus menggunakan rendering sisi Kline atau rendering

00:01:24.520 --> 00:01:25.520
sisi server.

00:01:25.540 --> 00:01:31.480
Kami jelas belajar tentang pengecekan tipe kinerja dan bagaimana menulis unit test semua

00:01:31.480 --> 00:01:39.100
hal yang membuat kami menjadi pengembang perangkat lunak yang lebih baik, yang meningkatkan perangkat lunak, dan yang

00:01:39.130 --> 00:01:41.450
membuat atasan kami, pelanggan, senang.

00:01:41.670 --> 00:01:49.340
Dan kami juga telah belajar bagaimana menangani seluruh arsitektur aplikasi misalnya dengan aplikasi otak pintar kami.

00:01:49.410 --> 00:01:53.540
Kami dapat membuat aplikasi satu halaman menggunakan reaksi.

00:01:53.610 --> 00:01:56.600
Kami melayani file CSSA waria dan javascript.

00:01:56.850 --> 00:02:05.220
Kami menggunakan Ada Publius lambda untuk melakukan beberapa tugas menjalankan fungsi sederhana untuk kami melalui server Amazon.

00:02:05.220 --> 00:02:14.070
Kami menggunakan server API simpul menggunakan Express untuk berbicara untuk mengklarifikasi API dan mendapatkan respons gambar kami.

00:02:14.370 --> 00:02:20.680
Kami menggunakan postscript untuk mengelola basis data pengguna kami dan masuk informasi.

00:02:20.700 --> 00:02:28.410
Kami juga menggunakan Pretis untuk penyimpanan memori cepat untuk mengelola sesi kami dan memastikan bahwa kami memiliki rute

00:02:28.410 --> 00:02:34.090
yang dilindungi sehingga hanya pengguna yang diautentikasi yang dapat mengakses informasi pribadi.

00:02:34.410 --> 00:02:40.290
Kami belajar cara menambahkan wadah buruh pelabuhan ke seluruh sistem untuk membuat hidup lebih sederhana bagi kami dan kami

00:02:40.290 --> 00:02:45.940
bahkan belajar bagaimana memasukkan S-sh ke dalam layanan ini sehingga kami dapat men-debug mereka dan memeriksa log mereka.

00:02:45.990 --> 00:02:53.520
Dan sekarang Anda memiliki gambaran yang lebih baik tentang bagaimana Anda mungkin ingin meningkatkan atau meningkatkan aplikasi kami saat mereka

00:02:53.520 --> 00:02:55.840
tumbuh dan tumbuh menjadi jutaan pengguna.

00:02:55.980 --> 00:03:02.130
Kami dapat menambahkan fungsi apa pun yang mahal atau kami tidak ingin repot di server

00:03:02.130 --> 00:03:10.830
kami ke sesuatu seperti slamdunk memiliki arsitektur layanan di mana kami menjalankan fungsi ini dalam wadah di Amazon kapan pun mereka

00:03:10.830 --> 00:03:11.580
membutuhkannya.

00:03:11.640 --> 00:03:14.540
Jika kita memiliki sesuatu yang musiman yang memiliki puncak tinggi.

00:03:14.620 --> 00:03:17.550
Yah Amazon akan membereskannya untuk kita.

00:03:17.580 --> 00:03:23.940
Kita dapat menggunakan sesuatu seperti load balancing untuk memiliki beberapa server API untuk mengelola semua

00:03:24.030 --> 00:03:26.490
permintaan yang setengah dari pengguna.

00:03:26.640 --> 00:03:32.940
Kami dapat menjalankan server ini dalam wadah Dakar sehingga kami dapat menggunakannya dan menggandakannya di mesin yang

00:03:33.390 --> 00:03:33.970
dihosting.

00:03:35.150 --> 00:03:41.870
Kami dapat meningkatkan basis data kami dengan mungkin memiliki informasi cache dan membaca kami atau bahkan menggandakan

00:03:42.110 --> 00:03:45.200
basis data sehingga kami memiliki kekuatan lebih.

00:03:45.500 --> 00:03:51.590
Dan kemudian kami juga memiliki penangkapan dan bagaimana kami dapat sekali lagi membuat banyak contoh

00:03:51.590 --> 00:03:58.470
rattus untuk mengelola data kami menyimpan informasi sesi kami atau bahkan mungkin menyimpan beberapa informasi cache dari database.

00:03:59.380 --> 00:04:05.800
Dan jika Anda melihat diagram ini dan itu masuk akal bagi Anda dan Anda melihat bagaimana potongan-potongan

00:04:05.800 --> 00:04:09.120
dapat ditingkatkan dan ditambahkan sebagai aplikasi Anda tumbuh.

00:04:09.340 --> 00:04:10.870
Selamat.

00:04:11.020 --> 00:04:15.320
Itu adalah sesuatu yang benar-benar dilakukan oleh pengembang senior.

00:04:15.460 --> 00:04:21.150
Mencari tahu aliran arsitektur suatu sistem dan melihat bagaimana kita dapat memperbaikinya.

00:04:21.460 --> 00:04:28.390
Jika Anda dapat melakukan ini maka orang-orang dapat mempercayai Anda untuk mengembangkan aplikasi mereka untuk mengelola skala dan

00:04:28.390 --> 00:04:30.130
untuk menangani pertumbuhan proyek.

00:04:31.380 --> 00:04:32.540
Tapi ini masalahnya.

00:04:32.610 --> 00:04:36.870
Ada satu bagian terakhir yang perlu kita tambahkan untuk melengkapi pengetahuan kita.

00:04:36.870 --> 00:04:44.040
Kami telah mempelajari semua dasar-dasar semua langkah yang kami butuhkan untuk menjadi pengembang senior dan teknologi modern

00:04:44.040 --> 00:04:45.770
yang digunakan pengembang senior.

00:04:46.020 --> 00:04:53.340
Tetapi untuk membuat proses ini pergi untuk membuat seluruh sistem ini untuk memastikan bahwa kami dapat mengirimkan ini

00:04:53.340 --> 00:04:55.030
ke live produksi.

00:04:55.050 --> 00:05:02.010
Kami membutuhkan sesuatu yang disebut integrasi berkelanjutan, pengiriman berkelanjutan, dan penerapan berkelanjutan.

00:05:02.040 --> 00:05:07.050
Sesuatu yang akan kita pelajari di bagian selanjutnya untuk akhirnya menghubungkan

00:05:07.530 --> 00:05:12.880
semuanya dan melengkapi seluruh gambar kita tentang pengembang senior di zaman modern.

00:05:12.960 --> 00:05:13.950
Saya akan lihat di bagian selanjutnya.