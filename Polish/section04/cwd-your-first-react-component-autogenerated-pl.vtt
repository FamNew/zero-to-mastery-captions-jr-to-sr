WEBVTT

00:00:01.620 --> 00:00:02.230
W porządku.

00:00:02.250 --> 00:00:03.210
Witamy spowrotem.

00:00:03.210 --> 00:00:06.480
Mamy naszą aplikację Hello World, ale to nie wygląda zbyt fajnie.

00:00:06.480 --> 00:00:09.370
Chcemy, aby nasi przyjaciele robo byli wykorzystywani.

00:00:09.390 --> 00:00:15.340
W tym filmie zaczniemy od zbudowania naszego pierwszego komponentu.

00:00:15.420 --> 00:00:19.020
Wracamy tu pamiętajmy, że mamy terminal po prawej stronie.

00:00:19.050 --> 00:00:25.830
I właśnie uruchomiliśmy start NPM i tworzymy Doubs sprawdza, czy wszystkie pliki są dla nas, upewnij się, że nie ma błędów.

00:00:25.830 --> 00:00:33.630
Mówi, że nasza aplikacja jest zdefiniowana, ale nigdy nie używana, więc skomentujmy to ponownie, komentarz slash to powiedz,

00:00:34.320 --> 00:00:37.050
a zobaczysz, że wszystko działa dobrze.

00:00:38.540 --> 00:00:42.470
Teraz możesz mieć kilka pytań właśnie w tym indeksie.

00:00:42.590 --> 00:00:48.860
JOT. S. Upadek jednego widzimy, że jesteśmy importowania reagować, ale dlaczego to działa.

00:00:48.860 --> 00:00:55.340
Pamiętamy, że nie działało, zanim musieliśmy użyć wymagać, a następnie ponownie ponowna kontrola przeglądarki ma mokrą

00:00:55.340 --> 00:00:59.130
paczkę pod maską, która robi dla nas wiązkę.

00:00:59.210 --> 00:01:03.620
Możemy więc korzystać z importu, o ile utrzymamy to w górnej części pliku.

00:01:03.710 --> 00:01:10.590
Możemy importować dowolne inne pliki, które chcemy, lub dowolne pakiety, które chcemy.

00:01:10.600 --> 00:01:14.270
Widzimy również, że dwie rzeczy reagują i reagują.

00:01:14.300 --> 00:01:21.150
Dom, jeśli pamiętasz, ponownie działaj, to biblioteka widoków.

00:01:21.210 --> 00:01:25.590
To jest ten mały robot, który pamiętamy z poprzedniego wideo.

00:01:25.980 --> 00:01:27.900
To rdzeń pakietu.

00:01:27.920 --> 00:01:31.260
Czy manipulacja DOMem dla nas.

00:01:31.260 --> 00:01:35.850
Ale jak już mówiłem, Riak może być używany w wielu miejscach, nie tylko w przeglądarce.

00:01:36.090 --> 00:01:38.270
Może być używany na urządzenia mobilne.

00:01:38.280 --> 00:01:45.300
Może być używany w rzeczywistości wirtualnej i można podłączać i odtwarzać różne biblioteki w ten sposób na

00:01:45.390 --> 00:01:47.780
podstawie ekranu, na który renderujesz.

00:01:47.940 --> 00:01:57.090
Więc ponownie działa Dom jest używany do głupich stron internetowych, więc klej reaguje, ale możemy mieć coś takiego jak rdzeń

00:01:57.090 --> 00:01:57.570
Riak.

00:01:57.570 --> 00:02:01.870
To faktycznie renderuje dwa telefony komórkowe.

00:02:01.920 --> 00:02:04.640
Posiadamy również indeks importowy CSSA.

00:02:04.710 --> 00:02:13.290
A to jest nowa składnia, która zareaguje, pozwala nam dodawać CSSA nie tylko w jednym pliku, ale także w każdym

00:02:13.290 --> 00:02:14.340
innym komponencie.

00:02:14.340 --> 00:02:15.910
Jeśli pójdziemy do APT.

00:02:16.050 --> 00:02:20.840
Tak, dobrze, mamy punkt CSSA, który opisuje aplikację.

00:02:21.180 --> 00:02:22.830
Jeśli przejdziemy do indeksu tak.

00:02:22.860 --> 00:02:27.890
Podczas indeksowania uruchamiamy usługę VSS, która ma swój własny status.

00:02:27.900 --> 00:02:35.610
A te komórki będą miały zastosowanie tylko do dowolnych komponentów i rendererów Ex-G-S.

00:02:35.860 --> 00:02:41.500
Sposób, w jaki go używamy, to po prostu importuj, a następnie w przeciwieństwie do

00:02:41.500 --> 00:02:47.890
pakietu Riak, w którym podajemy nazwę pakietu i automatycznie wie, czy należy sprawdzić folder znanych modułów, musimy

00:02:47.950 --> 00:02:55.230
powiedzieć mu, gdzie znajduje się indeks Dotsie SS i składnia dot slash oznacza, że znajduje się w tym samym katalogu.

00:02:55.270 --> 00:02:59.850
Tak więc powinno być tam polecenie sprawdzenia w folderze źródłowym i byłych nazistowskich SS.

00:03:01.230 --> 00:03:05.040
OK, a na końcu widzimy pracownika obsługi rejestru.

00:03:05.040 --> 00:03:10.980
Jest to zaawansowany temat, którego nie omówimy na tym kursie, ale pomyślimy o pracownikach serwisu jako o

00:03:10.980 --> 00:03:16.740
nowej funkcji, dzięki której nasze aplikacje mogą stać się szybsze i potencjalnie pracować w trybie offline.

00:03:16.740 --> 00:03:19.070
Jest to coś, z czym nie musimy się martwić.

00:03:19.080 --> 00:03:26.160
Na razie możesz to skomentować i będzie nadal działać, ale zachowamy go tutaj tylko dlatego,

00:03:26.160 --> 00:03:34.830
że tworzenie re-act up daje nam za darmo rzeczy, na które nam naprawdę zależy, podczas gdy ta linia tutaj

00:03:34.830 --> 00:03:43.110
to cała ta Rzecz w tym, co się odradza, mówi, że chcę, aby pakiet reagował na użycie funkcji

00:03:43.200 --> 00:03:52.680
renderowania, a ten render jest taki, że chciałem renderować cokolwiek to jest, ale jeśli pamiętasz, zanim mieliśmy aplikację i dobrze, to

00:03:55.060 --> 00:03:59.010
tak naprawdę nie jest to tag szeryfa to.

00:03:59.170 --> 00:04:04.810
Właśnie stworzyliśmy to z tego samego katalogu.

00:04:04.830 --> 00:04:09.470
Jest coś, co nazywa się aplikacją i nie ma kropki.

00:04:09.720 --> 00:04:17.700
Tak, tak jak widzimy to tutaj, a to dlatego, że automatycznie mówi, że jeśli nie ma żadnego cekinowego CSX ani żadnego

00:04:17.730 --> 00:04:19.350
innego typu po nim.

00:04:19.360 --> 00:04:27.400
Zakłada się, że jest to javascript, ale to zadziała tak dobrze, jak widzisz, ponieważ ostatni przejdzie do

00:04:27.490 --> 00:04:33.410
pliku dodgiest i zobacz, dlaczego możemy użyć tego haniebnego zadania, które stworzyliśmy.

00:04:33.610 --> 00:04:39.220
Jeśli pójdziemy zrezygnować ponownie z pliku japes i zobaczymy, że importujemy coś, co robimy, robimy coś,

00:04:39.220 --> 00:04:42.370
co nazywa się destrukturyzacją i dostajemy również komponent.

00:04:43.290 --> 00:04:49.640
Mamy też kilka plików, takich jak Logo jako Fidżi i porwanie CSSA, które importujemy.

00:04:49.920 --> 00:04:52.240
I znów widzimy, że nasza składnia jest trochę.

00:04:52.240 --> 00:05:03.780
Upewnij się również, że zmieniamy nasze pliki na tabelę javascript i wygląda na to, że aplikacja klasy A rozszerza komponent, który wchodzi

00:05:04.470 --> 00:05:05.780
w reakcję.

00:05:05.790 --> 00:05:08.010
A to tylko standardowa składnia.

00:05:08.040 --> 00:05:15.910
To sprawia, że składnik jest zawsze odpowiedzialny za renderowanie co najmniej części.

00:05:15.910 --> 00:05:21.210
A w ten sposób zwracamy fragment Chanel strony internetowej.

00:05:21.390 --> 00:05:24.810
Więc widzimy tutaj mile widziane, aby zareagować, aby zacząć dodawać.

00:05:25.030 --> 00:05:27.900
Cóż, dokładnie to tutaj mówi.

00:05:28.050 --> 00:05:29.390
Taka jest moc reakcji.

00:05:29.400 --> 00:05:38.800
Tworzymy własne niestandardowe komponenty, własne niestandardowe znaczniki shemale, które możemy dodać, a jeśli pamiętasz

00:05:38.800 --> 00:05:45.270
jednokierunkowy przepływ danych, mamy jednego rodzica, który ma dzieci.

00:05:45.270 --> 00:05:48.240
Więc aplikacja ma dzieci, ale wiesz co.

00:05:48.480 --> 00:05:52.110
Stwórzmy własny komponent, aby ten punkt był jasny.

00:05:52.320 --> 00:05:57.690
Zamiast witać świat tutaj, stwórzmy komponent o nazwie Hello.

00:05:58.930 --> 00:06:02.320
Jest to zadanie samozamykające się, więc chcesz mieć odwrotny ukośnik.

00:06:02.620 --> 00:06:12.580
I tutaj zamiast mówić o aplikacji importowej, zróbmy import Cześć z Nazwiemy to witam podejrzanie Tak.

00:06:12.610 --> 00:06:14.630
Zauważysz, że jest tutaj duża.

00:06:14.740 --> 00:06:19.770
Jeśli budujesz komponent, standardem jest to, że jest on pisany wielkimi literami.

00:06:19.840 --> 00:06:21.180
Więc będzie się nazywać "cześć".

00:06:21.270 --> 00:06:28.650
Tak, jeśli to zapiszemy, otrzymamy komunikat o błędzie, że nie można znaleźć modułu, którego nie można znaleźć.

00:06:28.660 --> 00:06:29.010
Dzień dobry.

00:06:29.050 --> 00:06:30.870
Ponieważ plik nie istnieje.

00:06:31.030 --> 00:06:32.290
Stwórzmy więc.

00:06:32.290 --> 00:06:36.970
Zamierzam powiedzieć nowy plik Hello dodgier Yes.

00:06:37.960 --> 00:06:38.600
Proszę bardzo.

00:06:38.620 --> 00:06:42.730
Mamy nowy plik dodgiest hello i został skompilowany pomyślnie.

00:06:42.970 --> 00:06:46.320
Jeśli przejdziemy do strony internetowej, spójrzmy na to.

00:06:46.330 --> 00:06:51.860
W rzeczywistości nawet daje nam to na stronie internetowej i dlatego tworzenie nowych wersji jest po prostu niesamowite.

00:06:51.940 --> 00:06:57.540
Pokazuje dokładnie, jakie są błędy bez otwierania konsoli tutaj.

00:06:59.460 --> 00:07:03.760
Znowu nie mamy nic teraz zbudowanego w Halo, więc musimy go stworzyć.

00:07:03.780 --> 00:07:05.970
Użyjmy aplikacji, którą James jako przykład.

00:07:05.970 --> 00:07:14.850
Wygląda na to, że musimy zaimportować powtórkę i komponent, więc potrzebujemy wyrazu i złego ponownego komponentu z Rijadu.

00:07:15.400 --> 00:07:16.500
DOBRZE.

00:07:16.530 --> 00:07:25.020
Powodem, dla którego robimy to ponownie, jest destructive, zamiast robić re-act element, możemy

00:07:25.020 --> 00:07:31.230
teraz po prostu komponować i oznacza to samo.

00:07:31.350 --> 00:07:34.310
Ponownie patrząc na App dodgiest wygląda tak, jak mówimy klasy.

00:07:34.350 --> 00:07:39.440
Nasza nazwa komputera rozszerza komponent do tej klasy.

00:07:39.720 --> 00:07:47.940
Ponownie nazwiemy to "cześć", to właśnie nasze komponenty nazywają komponentem.

00:07:47.990 --> 00:07:58.730
I znowu pamiętaj, aby zmienić nasz javascript na Paypal i jeśli pamiętasz jedną zasadę, to zawsze

00:07:58.730 --> 00:08:07.540
chcemy mieć funkcję renderowania iw tej funkcji renderowania mówimy to, co chcemy zwrócić.

00:08:08.010 --> 00:08:13.800
Cóż, chcemy przywrócić przykład Witaj świecie, ale możemy powiedzieć H-1

00:08:16.600 --> 00:08:18.220
Witaj świecie.

00:08:19.870 --> 00:08:27.290
H-1 Dobra, zobaczmy, co się stanie, gdy to zrobię, oszczędzę.

00:08:27.470 --> 00:08:31.570
I mówi, że nie znaleziono importu domyślnego importera.

00:08:31.600 --> 00:08:34.720
To dlatego, że nie eksportujemy tego.

00:08:34.720 --> 00:08:42.580
Pamiętaj, że jeśli chcemy, aby inny plik go użył, musimy wyeksportować i używamy domyślnych ustawień eksportu, gdy eksportujemy

00:08:42.880 --> 00:08:44.410
tylko jedną rzecz.

00:08:44.710 --> 00:08:50.620
Jeśli użyjemy słowa domyślnego, oznacza to, że ten plik eksportuje tylko do jednej rzeczy i to jest ta aplikacja.

00:08:50.820 --> 00:08:57.430
Mogę więc powiedzieć, że domyślnie eksportuję Hello.

00:08:57.670 --> 00:09:02.970
Zapiszmy wygląda na to, że działa, zobaczmy, co dzieje się na naszej stronie.

00:09:03.420 --> 00:09:04.270
Witaj świecie.

00:09:04.440 --> 00:09:09.910
Właśnie stworzyliśmy nasz pierwszy komponent.

00:09:09.930 --> 00:09:10.850
Jakie to jest świetne.

00:09:11.720 --> 00:09:19.760
Teraz mamy tylko jedną linię, ale co jeśli chciałbym zrobić coś takiego, jak Divx upuszczając

00:09:19.760 --> 00:09:28.230
go w div, a może pod tym wszystkim wszyscy mówią akapit, który mówi, że chodzić, aby zareagować.

00:09:31.560 --> 00:09:35.380
Jeśli to zapisałem, otrzymuję kolejny błąd.

00:09:37.970 --> 00:09:44.960
A to dlatego, że dajemy mu tutaj wiele linii i wraca, oczekując jednej rzeczy.

00:09:45.230 --> 00:09:47.840
Musimy zawinąć to w nawiasy.

00:09:48.970 --> 00:09:55.180
W ten sposób, aby javascript powiedział, że jest to wyrażenie.

00:09:55.220 --> 00:09:57.140
Oceń całą tę rzecz.

00:09:57.290 --> 00:10:05.610
Jeśli uratujemy to wygląda na to, że działa, a następnie witamy świat, aby zareagował.

00:10:05.720 --> 00:10:08.420
Bardzo fajnie tutaj.

00:10:08.430 --> 00:10:20.050
Jeśli pamiętasz, czy importujemy Daut Hello Dad CSA nam, możemy stworzyć dowolne style CSL, ale musimy stworzyć ten

00:10:20.050 --> 00:10:27.560
plik dla Sallesa do nowego pliku i muszę tutaj wyprowadzić własny.

00:10:27.570 --> 00:10:32.020
I wtedy nazwa pliku będzie teraz cześć kropka C Ss.

00:10:32.040 --> 00:10:34.650
Cześć CSSA Mogę tylko powiedzieć, że H-1.

00:10:34.710 --> 00:10:36.610
A to tylko standardowa CSSA.

00:10:36.840 --> 00:10:40.000
Będzie mieć tło czerwone.

00:10:40.410 --> 00:10:43.120
Mam zamiar uratować również to.

00:10:43.170 --> 00:10:44.360
Wszystko wygląda dobrze.

00:10:45.270 --> 00:10:46.440
I spójrz na to.

00:10:49.250 --> 00:10:51.760
Ale wiesz, co zrobić szybciej.

00:10:51.790 --> 00:10:59.510
Ponieważ przeszliśmy przez CSSA, chcę pokazać wam fajny pakiet o nazwie Tatiana i tak Kyon, który pozwala

00:10:59.510 --> 00:11:06.830
nam mieć podobne do fabrycznie zaprogramowanych nazw klas, które możemy po prostu dodać do komponentów, aby wszystko

00:11:06.830 --> 00:11:08.630
wyglądało naprawdę fajnie.

00:11:08.690 --> 00:11:09.420
Zróbmy to.

00:11:09.440 --> 00:11:17.670
Zamierzam to zamknąć i powiedzieć, że PM zainstaluje Tatianę.

00:11:17.750 --> 00:11:18.210
W porządku.

00:11:18.220 --> 00:11:19.190
Dodano pakiet.

00:11:19.210 --> 00:11:25.230
Możemy sprawdzić, pakując naszego Jasona, widzimy, że Tatiana jest tam i

00:11:25.230 --> 00:11:33.200
możemy bardzo łatwo używać rąk Tatiany, ale właśnie indeksujemy plik Jeffa i mówimy o imporcie Tatiany.

00:11:33.350 --> 00:11:42.460
A teraz mamy dostęp do tego pakietu tylko po to, aby pokazać ci atak Kyona, jeśli pójdę oznaczać style Kyon, które

00:11:46.770 --> 00:11:54.270
dają nam małe klasy, z których możemy skorzystać, na przykład centrum podatkowe będzie po prostu powiedzieć TC,

00:11:54.270 --> 00:12:01.170
o ile mamy dźwięki podatkowe, więc użyj nazwy klasy TCAS, aby dostosować nasze opodatkowane.

00:12:01.270 --> 00:12:12.840
Więc teraz, kiedy mamy indeks Kyona i jest on indeksowany, nie tylko plik, możemy powiedzieć, że tutaj klasa

00:12:12.960 --> 00:12:18.820
równa się EF 1 dla Fonte i Tuckson oszczędza.

00:12:19.020 --> 00:12:24.150
Ale muszę zrobić NPM zacząć tutaj, upewnij się, że nasz serwer

00:12:25.150 --> 00:12:30.940
działa, abyśmy mogli sprawdzić nasze zmiany i otrzymamy witający świat Volcom, by zareagował.

00:12:30.940 --> 00:12:33.130
Ale tutaj jest jedna sztuczka.

00:12:33.160 --> 00:12:39.220
Jeśli otworzysz konsolę, mimo że zadziałało, otrzymuję ostrzeżenie z informacją o niepoprawnej klasie właściwości Dom.

00:12:39.220 --> 00:12:41.280
Miałeś na myśli nazwę klasy i reagujesz.

00:12:41.290 --> 00:12:50.750
Naprawdę bardzo dobrze daje ci błędy i możesz zadawać sobie pytanie, dlaczego zamiast klasy zamiast nazwy

00:12:51.020 --> 00:12:51.750
klasy.

00:12:51.770 --> 00:12:57.910
Ponieważ jeśli to zapiszę, nie mam już powietrza.

00:12:58.350 --> 00:12:59.300
Dlaczego.

00:12:59.550 --> 00:13:04.270
Aż do tego momentu byliśmy po prostu piętnem.

00:13:04.560 --> 00:13:06.870
Ale jest to plik javascript.

00:13:06.990 --> 00:13:10.120
Jak możemy to zrobić.

00:13:10.140 --> 00:13:19.380
W rzeczywistości jest to coś, co nazywa się GSX częścią tego aktu, ponieważ pozwala ci napisać tę wiadomość e-mail jak

00:13:19.980 --> 00:13:28.540
składnię w twoim javascript i możesz zadawać sobie pytanie, że nie łamie to zasady rozdzielania obaw i tego, w

00:13:28.540 --> 00:13:36.610
jaki sposób jesteśmy w stanie dodać symbol do javascript, aby odpowiedzieć na pierwsze pytanie, oddzielenie problemów ponownie

00:13:36.610 --> 00:13:43.300
wprowadzić ma ideę składników i że lepiej jest mieć funkcjonalność i style na komponent, tak

00:13:43.540 --> 00:13:47.810
aby każdy składnik był jego własnym oddzielnym wszechświatem.

00:13:47.860 --> 00:13:55.690
Po prostu dodajecie te komponenty, a idea oddzielania obaw od reagowania jest tym komponentem, gdy

00:13:56.290 --> 00:13:59.310
nie przejmują się niczym innym.

00:13:59.380 --> 00:14:03.520
Więc zmienia tutaj paradygmat i jest to całkiem miłe.

00:14:03.520 --> 00:14:05.060
Mogę tylko spojrzeć na komponent halo.

00:14:05.050 --> 00:14:06.360
Wiem dokładnie, co robi.

00:14:06.370 --> 00:14:13.090
Mogę spojrzeć na to SS i za każdym razem, gdy muszę dokonać zmiany, muszę tylko martwić się

00:14:13.090 --> 00:14:15.900
plikami, które zawierają hello CSSA i JavaScript.

00:14:15.910 --> 00:14:21.440
Drugą rzeczą jest to, co nazywa się GSX pod maską.

00:14:21.490 --> 00:14:28.970
To, co robi reaktor, pozwala mi używać tej składni, ale nie są one rzeczywistymi podatkami.

00:14:29.110 --> 00:14:34.840
Zapamiętaj, co powiedziałem o wirtualnym Domie i jak re-act tworzy swój własny obiekt, a następnie patrzy na DOM i

00:14:34.840 --> 00:14:39.180
porównuje go i mówi, że muszę to zmienić i robi to za nas.

00:14:39.320 --> 00:14:48.070
Re-act używa GSX do tworzenia swoich wirtualnych Domów swoich fałszywych Domów, które zbudowali w oparciu o to, co im

00:14:48.070 --> 00:14:48.780
dajemy.

00:14:48.940 --> 00:14:55.300
Następnie patrzą na ten wirtualny Dom i prawdziwy Dom i mówią, że ta część się zmieniła.

00:14:55.300 --> 00:15:01.840
Zamierzam zmienić Domhnall na podstawie wirtualnych drzwi i dlatego re-act jest naprawdę szybki.

00:15:02.020 --> 00:15:08.380
Tworzy obiekty, które jest naprawdę szybkie i Javascript i tylko zmienia to, co należy zrobić

00:15:08.380 --> 00:15:09.240
w drzwiach.

00:15:09.310 --> 00:15:10.740
Więc przyzwyczaj się do tego.

00:15:10.780 --> 00:15:18.190
Na początku jest to niezręczne, ale znowu tak długo, jak można je zawinąć w klamrę, można napisać

00:15:18.190 --> 00:15:24.130
tutaj zarówno shemale, jak i własne niestandardowe komponenty, takie jak Halo, które wykorzystaliśmy

00:15:28.500 --> 00:15:39.080
w indeksie nie tylko dla, a teraz może i ma sens, dlaczego nie możemy powiedzieć classier, ponieważ klasa jest zastrzeżonym słowem kluczowym w klasie javascript

00:15:39.980 --> 00:15:42.770
jest częścią języka używanego przez javascript.

00:15:42.770 --> 00:15:49.460
Więc jeśli to jest javascript, to fakt, że widzimy tutaj klasę, nie ma sensu w starej wersji

00:15:49.460 --> 00:15:50.030
reagowania.

00:15:50.030 --> 00:15:57.730
To faktycznie nie działa, ale teraz daje nam niezły błąd, ponieważ jest to javascript, a nie shemale.

00:15:57.740 --> 00:16:01.100
Musimy powiedzieć nazwę klasy i jest to coś, do czego się przyzwyczaisz.

00:16:01.100 --> 00:16:05.600
Na początku zostaniesz oszukany, ale po pewnym czasie staje się to łatwe.

00:16:05.610 --> 00:16:12.230
W porządku Ostatnią rzeczą, jaką wam pokażę, jest część ponownego działania w ramach komponentu halo,

00:16:12.230 --> 00:16:19.220
mogę teraz dodać coś, co nazywa się rekwizytami lub właściwościami, a te rekwizyty można nazwać cokolwiek.

00:16:19.220 --> 00:16:21.310
Pomyśl o nich jako o shim wszystkie atrybuty.

00:16:21.310 --> 00:16:24.450
Mogę powiedzieć pozdrowienia.

00:16:24.730 --> 00:16:27.660
Wzywa ich tutaj.

00:16:27.980 --> 00:16:30.050
Chcę go zawinąć w nawiasy klamrowe.

00:16:30.230 --> 00:16:35.460
I to jest ekspresja javascript, co tylko chcę,

00:16:38.930 --> 00:16:43.140
mogę powiedzieć "cześć", odradzam ninja.

00:16:43.370 --> 00:16:48.940
I jeśli widzę to, dostaję błąd mówiąc, że nie ma żadnej bezużytecznej konkatenacji.

00:16:48.940 --> 00:16:52.100
Więc to jest powiedzenie, dlaczego nawet dodajecie rzeczy.

00:16:52.110 --> 00:16:53.960
Możesz po prostu je wszystkie połączyć.

00:16:54.010 --> 00:17:00.310
Tak więc jest wystarczająco trudno nawet podać ci sugestie lub ostrzeżenia, kiedy robisz coś, co nie jest czyste.

00:17:00.310 --> 00:17:02.970
Ale teraz dla celów demonstracyjnych jest to w porządku.

00:17:03.340 --> 00:17:10.840
Teraz, kiedy dałem go temu, co nazywamy powitaniem Propp do cześć, mam teraz dostęp i cześć.

00:17:11.020 --> 00:17:11.620
Tak.

00:17:11.740 --> 00:17:14.580
Dwa rekwizyty Mogę

00:17:17.140 --> 00:17:31.790
teraz powiedzieć, że to kropkowe pozdrowienie z prop dot. Zapisuję to wróć i mówię "cześć", powtórzcie Ninja.

00:17:32.000 --> 00:17:43.980
Za pomocą tej składni mówi się, że obiekt Halo ma właściwości rekwizytów, które są powitaniem.

00:17:44.020 --> 00:17:51.100
Wiem, że to jest mylące, to tylko składnia, do której musisz się przyzwyczaić, ale teraz

00:17:51.310 --> 00:17:57.120
mamy dostęp do każdej własności i jakiejkolwiek wartości nieruchomości, z której korzystamy.

00:17:57.240 --> 00:18:02.360
Witaj, to jest moc, która przyda się później.

00:18:02.360 --> 00:18:08.010
Ale chcę, żebyś zbudował swój własny komponent i poczuł się komfortowo z Sendakami.

00:18:08.170 --> 00:18:11.700
Jest naprawdę bardzo potężny i raz się do tego przyzwyczaić.

00:18:11.830 --> 00:18:14.250
Możesz zbudować dowolne komponenty.

00:18:14.290 --> 00:18:14.590
DOBRZE.

00:18:14.620 --> 00:18:15.630
Jedna ostatnia rzecz.

00:18:16.700 --> 00:18:23.500
Ten indeks może być trochę trudny, ale chcę ci pokazać, że jest to właściwie tylko funkcja.

00:18:23.670 --> 00:18:39.480
Jeśli robię Konst cześć i tutaj ta funkcja akceptuje rekwizyty, jeśli wykonuję funkcję błędu tutaj, zawijam ją w nawiasy klamrowe i zamiast robić

00:18:39.480 --> 00:18:47.570
to renderowanie, po prostu wracam, jeśli zapiszę to dobrze, otrzymuję błąd, ponieważ

00:18:54.660 --> 00:19:02.620
to zatrzymało Propst Greetings tak naprawdę nie istnieje, ponieważ nie jest

00:19:02.650 --> 00:19:06.070
już obiektem, jest funkcją.

00:19:06.070 --> 00:19:07.220
Więc nie potrzebuję rekwizytów.

00:19:07.240 --> 00:19:13.990
Otrzymuje rekwizyty bez względu na parametry, które mu dajemy, i podpowiada, że powitanie jest dla nas akceptowalne.

00:19:14.020 --> 00:19:16.770
Oszczędzam to i wracam do tego.

00:19:16.780 --> 00:19:17.590
To działa.

00:19:17.830 --> 00:19:19.750
To tylko funkcje.

00:19:19.740 --> 00:19:27.460
Pomyśl o reaktorach, że właśnie tworzymy te funkcje, które pobierają parametry,

00:19:27.730 --> 00:19:36.420
a te parametry, które są podawane przez nadawanie atrybutów i wartości są właśnie renderowane.

00:19:36.690 --> 00:19:43.000
Mam dostęp do powitania rekwizytów, jeśli je podaję, lub innego rekwizytu tutaj nazwanego powiedzmy psa,

00:19:43.000 --> 00:19:47.040
wtedy będę miał również dostęp do wsparcia dla psów.

00:19:48.550 --> 00:19:54.550
I znowu mamy niezły błąd, mówiąc, że komponent chwyta to, ale tak

00:19:54.550 --> 00:19:59.140
naprawdę go nie używamy i używamy niepotrzebnego łączenia ciągów.

00:19:59.140 --> 00:20:05.720
Ponownie bardzo przydatne, jak widać dość proste do odbioru w następnej lekcji.

00:20:05.730 --> 00:20:10.830
Zaczniemy teraz pracować nad naszą aplikacją Robo Friends teraz, gdy mamy podstawy.

00:20:10.830 --> 00:20:12.540
Widziałem to przez.