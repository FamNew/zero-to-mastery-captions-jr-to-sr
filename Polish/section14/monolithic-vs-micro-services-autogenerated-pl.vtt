WEBVTT

00:00:00.890 --> 00:00:07.260
Wróć do nich i przywróć naszą dyskusję do czegoś,

00:00:07.320 --> 00:00:18.050
o czym wcześniej rozmawialiśmy z Dr. Idea mikroprzedsiębiorstw symbolizuje ideę, że zanim mieliśmy tę monolityczną gigantyczną infrastrukturę

00:00:18.080 --> 00:00:25.760
lub bazę kodu, która zrobiła dla nas wszystko wszystkie duże elementy, wszystkie małe elementy razem w

00:00:25.760 --> 00:00:29.390
jednym miejscu, uruchamiając naszą aplikację i logikę.

00:00:29.580 --> 00:00:38.700
Teraz dzięki programowi dokowania i systemowi AWOS niezwykle ułatwia nam zarządzanie tymi maszynami i łączenie ich

00:00:38.700 --> 00:00:43.600
z usługami Micro staje się coraz bardziej popularne.

00:00:43.630 --> 00:00:50.050
Taki jest pomysł podzielenia twojej aplikacji na zestaw mniejszych połączonych ze sobą usług.

00:00:50.050 --> 00:00:57.430
Zamiast budować pojedynczą monolityczną aplikację, a każda usługa Micro jest małą aplikacją, która

00:00:57.820 --> 00:01:05.530
ma własną architekturę, składającą się z własnej logiki biznesowej i zajmującą się robieniem jednej rzeczy

00:01:05.530 --> 00:01:06.670
naprawdę dobrze.

00:01:06.670 --> 00:01:12.790
Patrząc na to, wydaje ci się, że to wydaje się monolityczne, wydaje się lepszą opcją niż

00:01:12.790 --> 00:01:17.190
najstarsze mylące rzeczy dziejące się tutaj i możesz znowu mieć rację.

00:01:17.200 --> 00:01:21.670
To naprawdę zależy od tego, co robi twoja firma.

00:01:22.530 --> 00:01:30.570
Jednak jedną wielką korzyścią z usług Micro jest to, że teraz masz te małe kawałki, które można przetestować

00:01:30.660 --> 00:01:38.630
na własną rękę, że możemy mieć różne zespoły programistów na własną rękę i wszystkie z nich mogą

00:01:38.660 --> 00:01:41.550
być wydawane pojedynczo do produkcji pojedynczo.

00:01:41.570 --> 00:01:44.340
Nie musimy się upewnić, że wszystkie elementy współpracują ze sobą.

00:01:44.360 --> 00:01:51.980
Nadal to robimy, ale tutaj musimy upewnić się, że wszystkie zespoły programistów pracują na jednej bazie kodu.

00:01:52.070 --> 00:01:59.150
Nikt niczego nie przerywa i wszystkie testy mijają, zanim wyślemy je do produkcji w porównaniu z tutaj, gdzie

00:01:59.150 --> 00:02:06.830
możemy mieć małe indywidualne zespoły, które martwią się o jedną maszynę z jedną usługą i upewnią się, że jest naprawdę

00:02:06.830 --> 00:02:13.000
bardzo dobra i można mieć jedną zaktualizowaną produkcję, podczas gdy inny może być zaktualizowany w produkcji

00:02:13.010 --> 00:02:14.390
za dwa tygodnie.

00:02:14.510 --> 00:02:21.560
I dopóki mają to, co nazywamy umową o poziom usług lub umowę SLA, o ile mówią, że hej, upewnij się,

00:02:21.560 --> 00:02:27.140
że bez względu na to, jakie aktualizacje zrobisz, dasz mi te dane, lub odpowiesz w ten

00:02:27.140 --> 00:02:27.740
sposób.

00:02:27.740 --> 00:02:34.460
Następnie możesz pracować indywidualnie na tych skrzyniach i sprawia, że te masywne firmy, które mają

00:02:34.460 --> 00:02:38.280
tak wiele zespołów Davala, działają o wiele wydajniej.

00:02:38.510 --> 00:02:43.910
A to jest naprawdę interesująca architektura, którą naprawdę chcesz przemyśleć i mieć na oku, ponieważ

00:02:44.060 --> 00:02:47.840
z biegiem czasu stanie się ona coraz bardziej popularna.

00:02:48.970 --> 00:02:54.820
W porządku, wróćmy do Amazon Web Services i porozmawiajmy o funkcjach lambda w następnym wideo.