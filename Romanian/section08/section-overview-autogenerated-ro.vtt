WEBVTT

00:00:01.860 --> 00:00:12.810
Inițial, paginile web afișate într-o manieră foarte simplă aveați o pagină pe an acum dacă site-ul dvs. Web avea mai multe pagini

00:00:12.810 --> 00:00:19.830
pe care pur și simplu le-ați adăugat un alt fișier HVM Alpha Multiple.

00:00:19.830 --> 00:00:28.920
De exemplu, dacă aveați o pagină de pornire și o pagină pe care ați avea o casa Daut HMO și o pagină de e-mail de aproximativ 8 și ați

00:00:29.790 --> 00:00:36.480
avea o etichetă de ancorare sau o etichetă de opt și sunteți un shemale care leagă aceste două paginile împreună.

00:00:37.610 --> 00:00:46.850
Aceasta înseamnă că, dacă ați făcut clic pe link-ul despre pagina de pornire, atunci o solicitare ar fi făcută

00:00:46.850 --> 00:00:55.400
serverului pentru a obține o ședință și ao afișa în browser, dar acesta a fost trecutul.

00:00:55.790 --> 00:01:01.030
Și acum există mai multe modalități de a face așa ceva.

00:01:01.120 --> 00:01:08.270
Și în această secțiune vom vorbi despre acest lucru despre aplicațiile cu o singură pagină versus aplicațiile redate

00:01:08.450 --> 00:01:09.730
de la server.

00:01:10.740 --> 00:01:18.270
Să mergem să aruncăm o privire asupra modului în care site-urile web erau chiar aici, avem prima

00:01:18.270 --> 00:01:24.260
pagină web creată vreodată de Tim Berners-Lee în timp ce lucra la CERN.

00:01:24.340 --> 00:01:30.010
Dacă te uiți la tine ești Albar de aici, când fac clic pe lucruri diferite.

00:01:30.040 --> 00:01:32.880
Se generează un nou fișier și

00:01:36.230 --> 00:01:41.910
de fiecare dată când comută linkuri, se face o cerere către browser.

00:01:42.200 --> 00:01:42.990
Haideți să aruncăm o privire.

00:01:45.690 --> 00:01:53.000
Dacă mă duc la fila mea de rețea și eu dau click pe ce e acolo, îmi dau pagina de sex feminin într-o pagină

00:01:53.010 --> 00:01:57.400
shemale, dacă mă întorc din nou o altă cerere și o altă cerere.

00:02:00.390 --> 00:02:03.520
Și așa funcționează lucrurile.

00:02:03.550 --> 00:02:04.500
Viața a fost bună.

00:02:04.540 --> 00:02:13.920
Viata a fost usoara deoarece aceasta a fost metoda conventionala de a obtine HMO-ul pe un ecran prin folosirea randarii

00:02:14.220 --> 00:02:19.930
server side rendering side-side-ului, care a functionat foarte bine la acel moment.

00:02:20.630 --> 00:02:27.850
Pentru că tot ce am făcut a fost doar să redați ASTM-ul pe care îl voi trimite clientului, care este browserul lor web, iar

00:02:27.850 --> 00:02:31.600
browser-ul va crea acel Dom și îl va afișa pe pagină.

00:02:32.620 --> 00:02:34.840
Și randarea serverului funcționează excelent.

00:02:34.840 --> 00:02:44.050
În acel moment, de vreme ce majoritatea paginilor web au afișat doar imagini statice și text cu

00:02:44.050 --> 00:02:46.270
foarte puțin de interactivitate.

00:02:47.250 --> 00:02:55.740
Odată ce dau clic pe un link aici și cererea merge pe server, cererea este apoi terminată de procesare și browser-ul

00:02:56.220 --> 00:03:03.460
dvs. returnează un complet pe care l l-a făcut astfel încât să îl poată afișa pe ecran.

00:03:05.010 --> 00:03:10.740
Și, așa cum ați văzut înainte, dacă faceți clic pe o altă pagină decât browserul dvs. va face din nou

00:03:10.740 --> 00:03:12.090
același proces din nou.

00:03:12.240 --> 00:03:18.420
Serverul va procesa întotdeauna o solicitare de returnare a unui Jimoh complet redat și apoi browser-ul va citi

00:03:18.420 --> 00:03:19.830
acel ASTM Alpha.

00:03:20.160 --> 00:03:27.960
Și aceasta se întâmplă de fiecare dată când vizitezi o pagină care nu contează nici dacă una dintre aceste pagini este foarte asemănătoare

00:03:27.960 --> 00:03:34.930
cu cea a celeilalte și poate că nu avem nevoie ca acest titlu să fie citit din nou, care nu

00:03:34.930 --> 00:03:35.460
contează.

00:03:35.500 --> 00:03:41.770
Browserul va cere întotdeauna întreaga pagină și va afișa totul pe pagină.

00:03:42.790 --> 00:03:44.570
Deci totul a fost bine atunci.

00:03:44.650 --> 00:03:51.220
Dar așteptați CSSA și Javascript au venit în jur și oamenii au început să facă site-urile lor să facă mai

00:03:51.220 --> 00:03:54.120
mult decât să afișeze doar text și imagini.

00:03:54.400 --> 00:03:56.610
CSSA a adăugat stiluri și culori.

00:03:57.420 --> 00:04:01.200
Dar a apărut javascript și a adăugat o mulțime mai mult.

00:04:01.740 --> 00:04:09.150
De atunci, ceva numit aplicații de o singură pagină sau espii devenise din ce în ce mai popular.

00:04:09.240 --> 00:04:17.740
Ceva ca produs pe aici, aceste aplicații cu o singură pagină vor avea doar un ACM

00:04:17.740 --> 00:04:22.150
Alpha, iar restul, cum ar fi navigarea

00:04:25.670 --> 00:04:32.150
între link-uri sau navigarea între pagini, se face în interiorul programului javascript.

00:04:32.150 --> 00:04:36.620
Nu mai trebuie să mergeți la server pentru a solicita o nouă pagină de fiecare dată.

00:04:36.620 --> 00:04:38.980
Suna destul de dulce dreapta.

00:04:38.990 --> 00:04:46.160
Pot doar să joc și pagina nu reîmprospătează doar părți ale paginii de reîmprospătare de care am nevoie și totul este

00:04:46.160 --> 00:04:53.760
frumos și rapid pentru așa, din cauza acestei singure aplicații pagină a devenit din ce în ce mai puternic pentru că ați putea

00:04:54.150 --> 00:05:00.360
susține că site-urile Web în aceste zile sunt mult mai mult decât aplicațiile decât site-urile Web pe care le

00:05:00.360 --> 00:05:01.360
aveam atunci.

00:05:02.660 --> 00:05:10.760
Iar ideea unei aplicații dintr-o singură pagină sau a unei aplicații de pagină rendered în fața unei aplicații de tip server a

00:05:11.300 --> 00:05:19.670
fost într-adevăr populară în javascript împrumutat de biblioteci, cum ar fi o coloană vertebrală unghiulară și reacție deoarece ați evitat această cerere

00:05:19.670 --> 00:05:25.850
constantă către server pentru a schimba paginile și actualiza doar părți pagina pe care ai nevoie

00:05:25.850 --> 00:05:29.100
de fapt și lucrurile arătau mult mai repede.

00:05:29.180 --> 00:05:37.250
După cum puteți vedea aici din nou site-urile web moderne nu sunt simple site-urile web moderne au sute de linii de

00:05:37.250 --> 00:05:44.970
cod și sunt mult mai complexe imaginându-ne modul în care ne-ar răsfoi o pagină web și trebuie să așteptăm ca

00:05:45.000 --> 00:05:52.140
fiecare pagină să redea când navighează un site ca ar trebui să facem redarea pe partea de server ar

00:05:52.140 --> 00:05:54.810
fi o durere de cap imensă.

00:05:54.980 --> 00:05:59.930
Prin modul în care aceasta este experiența pe care o aveți cu site-urile WordPress mai vechi, de fiecare dată

00:05:59.930 --> 00:06:04.710
când faceți clic pe o pagină, așteptați să priviți la un ecran gol pentru a încărca pagina nouă.

00:06:05.960 --> 00:06:11.520
Au o tona de javascript, dar este un site web redactat pe server.

00:06:11.620 --> 00:06:11.990
In regula.

00:06:11.990 --> 00:06:19.040
Asadar, randarea pe partea clientului este calea viitoarelor aplicatii de o singura pagina cand Let's elimina redarea partii server

00:06:19.040 --> 00:06:19.960
pentru totdeauna.

00:06:19.970 --> 00:06:21.020
Am terminat aici.

00:06:21.020 --> 00:06:23.320
Așteptați doar o secundă.

00:06:23.480 --> 00:06:29.990
Ar trebui să știm până acum că prea mult din nimic nu este bine pentru tine.

00:06:30.060 --> 00:06:36.850
Vedeți că există două probleme majore atunci când vine vorba de aplicații cu o singură pagină.

00:06:36.870 --> 00:06:41.920
Unul este că mai mult Javascript este trimis clientului la cererea inițială.

00:06:42.880 --> 00:06:48.850
Deoarece avem din nou sute de linii de cod, deoarece javascript are grija de rutare și paginile

00:06:48.850 --> 00:06:57.530
și vizualizările pentru noi, așa că este nevoie de mai mult timp ca javascriptul să fie trimis și apoi să execute paginile devin mai

00:06:57.530 --> 00:07:00.120
umflate și mai lent de încărcat.

00:07:00.410 --> 00:07:08.900
Din acest motiv, a doua problemă este performanța SVO sau optimizarea motorului de căutare.

00:07:08.920 --> 00:07:16.060
Este mult mai greu să faci SEO bun pe o singură aplicație de pagină decât o aplicație redată de pe server

00:07:16.540 --> 00:07:18.270
și vom ajunge la asta.

00:07:18.400 --> 00:07:23.820
Vom vorbi despre toate detaliile dintre ceea ce ne place să numim randarea

00:07:24.040 --> 00:07:30.970
pe partea clientului, care sunt acele aplicații de o singură pagină și aplicațiile redate pe servere, fiecare

00:07:30.970 --> 00:07:34.680
având argumente pro și contra în această secțiune.

00:07:34.800 --> 00:07:41.280
Vom putea decide când trebuie să facem unul peste celălalt și să-i dăm lui Brunow decizia potrivită

00:07:41.610 --> 00:07:44.700
pentru produsul care se apropie de drum.

00:07:44.710 --> 00:07:49.570
Vom juca, de asemenea, cu unele biblioteci de redare a serverului.

00:07:49.570 --> 00:07:50.960
E timpul să începem.

00:07:51.010 --> 00:07:51.780
Ne vedem la fața locului.