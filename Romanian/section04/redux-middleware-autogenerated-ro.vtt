WEBVTT

00:00:01.620 --> 00:00:03.020
Hei ești încă în jur.

00:00:03.060 --> 00:00:04.880
Ma bucur sa te revad.

00:00:04.890 --> 00:00:05.290
In regula.

00:00:05.340 --> 00:00:11.550
Deci noi doar Konsole logat aceste tipuri de acțiune și, de asemenea, a făcut asta.

00:00:11.550 --> 00:00:12.690
Unde facem asta?

00:00:12.690 --> 00:00:16.260
Am mai făcut și partea de acțiune.

00:00:16.420 --> 00:00:23.660
Dar vreau sa spun ca este frumos sa vedem, dar nu dorim sa consolezem jurnalul de fiecare data in aplicatia noastra redux pentru toate

00:00:23.660 --> 00:00:24.580
actiunile noastre.

00:00:24.800 --> 00:00:29.300
Deci, să eliminăm acest lucru și să ne întoarcem la modul în care avem lucrurile.

00:00:29.390 --> 00:00:35.010
Permiteți-mi să spun asta și, de asemenea, în reductor scoateți consola de blocare.

00:00:35.340 --> 00:00:44.010
Nu ar fi bine dacă ar exista o modalitate pentru noi să revenim la aplicația noastră și să monitorizăm încă acțiunile

00:00:44.910 --> 00:00:52.760
noastre și aplicațiile de depanare, văzând doar ce acțiune a fost declanșată, care a fost redusă sau declanșată.

00:00:53.220 --> 00:00:56.500
Din fericire pentru noi există o cale de a face asta.

00:00:57.320 --> 00:00:58.790
Acum o să vă arăt cum este.

00:00:58.790 --> 00:01:03.250
Dar mai întâi trebuie să recunosc ceva ce mi-am mințit puțin.

00:01:03.530 --> 00:01:13.180
Vedeți că de fapt există o altă parte a diagramei care vă arată și asta este ceva numit middleware.

00:01:13.490 --> 00:01:14.360
Și nu te speria.

00:01:14.360 --> 00:01:20.690
Este destul de simplu și funcționează în mod similar cu modul în care funcționează middleware-ul de tip dodgiest expres.

00:01:21.210 --> 00:01:31.680
Pur și simplu ascultă pentru acțiuni și este un tunel pe care acțiunile trec și, în funcție de ce este middleware-ul,

00:01:31.680 --> 00:01:36.660
poate modifica acțiunea sau poate declanșa o altă acțiune.

00:01:36.660 --> 00:01:44.790
Deci, ei declanșează acțiunile prin care trece ceva și se întâmplă ceva în interiorul acestei cutii albastre înainte ca

00:01:44.790 --> 00:01:46.860
aceasta să lovească reductorul.

00:01:46.890 --> 00:01:50.020
De ce ar putea fi util pentru noi.

00:01:50.970 --> 00:01:57.820
Vă voi arăta un lucru care este cu adevărat minunat pentru că dacă revenim la indexul

00:01:59.250 --> 00:02:05.580
filelor stargaze putem instala ceva ce este un middleware și se numește logger redox.

00:02:05.580 --> 00:02:13.140
Deci, să facem ca NPM să instaleze redux mai mult.

00:02:13.140 --> 00:02:13.840
În regulă.

00:02:13.950 --> 00:02:20.850
Și modul în care folosim acest lucru mai mult, ceea ce ajută la

00:02:20.850 --> 00:02:32.010
conectarea în consola, astfel încât să putem debug sau aplica cu ușurință, putem doar aici să importăm ceva numit logger creator care vine din

00:02:32.010 --> 00:02:40.020
pachetul pe care tocmai l-am instalat, care este pachetul loggerului nostru Dock și foarte simplu de utilizat.

00:02:40.290 --> 00:02:49.780
Tot ce trebuie să facem este să spunem că apelurile de la loggerul Konst creează logger.

00:02:50.000 --> 00:03:01.270
Și acum că avem această funcție mai lungă, care este un middleware, putem aplica acest lucru aplicației noastre redox.

00:03:01.660 --> 00:03:10.450
Și modul în care facem asta este prin pachetul redux care vine cu ceva numit aplica middleware și aplicăm middleware spune hey vrem să aplicăm

00:03:13.990 --> 00:03:19.380
unele middleware la acest flux pe care ne-am descurcat astfel încât să putem pur și

00:03:21.010 --> 00:03:28.870
simplu în funcția de a crea magazin au un al doilea parametru care spune că aplicați middleware-ul și îl oferiți indiferent de modul

00:03:28.870 --> 00:03:31.160
în care suntem interesați de middleware.

00:03:31.240 --> 00:03:39.050
În cazul nostru, cu atât mai mult Deci, să spunem că voi pleca la NPM aici.

00:03:47.660 --> 00:03:55.330
Și modul în care creăm loggerul deoarece aceasta este o funcție pe care trebuie să o executăm.

00:03:55.400 --> 00:03:59.900
Să salvăm întoarcerea, nu avem erori de jurnalizare în consola.

00:04:00.360 --> 00:04:11.900
Dar acum dacă introduc ceva în cutie vezi că l-am scris doar pe L și loggerul middleware-ul mi-a surprins acțiunea și mi-a spus

00:04:12.050 --> 00:04:19.670
că pe această acțiune care va merge în reductor vreau să consolez și să înregistrez

00:04:19.670 --> 00:04:23.000
asta și asta e acțiunea .

00:04:23.030 --> 00:04:29.600
Așa că am primit câmpul de căutare anterioară de stat a fost gol și apoi acțiunea pe care am luat-o a fost schimbarea câmpului de

00:04:29.960 --> 00:04:31.820
căutare cu sarcina utilă a iadului.

00:04:32.180 --> 00:04:35.220
Și următoarea stare a fost câmpul de căutare cu un acum.

00:04:35.450 --> 00:04:36.750
Cat de tare e asta.

00:04:36.770 --> 00:04:47.400
Avem logare instantanee în aplicația noastră și acest logger ne ajută să lucrăm mai bine cu codul nostru.

00:04:47.410 --> 00:04:55.100
Iată partea interesantă despre acest lucru, deoarece acum este greu să spun cu adevărat de ce acest lucru este util,

00:04:55.100 --> 00:04:58.620
în afară de a obține doar ceva timp.

00:04:58.780 --> 00:05:07.420
Dar frumusețea cu redux este faptul că a făcut atât de simplu să vă gândiți la aplicația dvs. și să monitorizați

00:05:07.420 --> 00:05:09.290
de ce merge aplicația.

00:05:09.570 --> 00:05:15.540
Acum vedeți că avem un sistem curat pe care să-l monitorizăm.

00:05:15.670 --> 00:05:26.020
Fiecare dintre acțiunile noastre, astfel încât, indiferent cât de multe acțiuni avem, putem anticipa mereu ce vor

00:05:26.020 --> 00:05:26.890
face.

00:05:26.920 --> 00:05:34.110
Putem asculta rezultatul înregistrării fiecăreia dintre aceste acțiuni, deoarece reductorul este o funcție pură.

00:05:34.210 --> 00:05:39.910
Întotdeauna știm că va reveni la aceeași stare și, din nou, din cauza

00:05:39.910 --> 00:05:48.660
modului de a reacționa, știm de asemenea că, de îndată ce statul va schimba, va face schimbările previzibile ale

00:05:48.660 --> 00:05:54.090
vederii noastre, iar cu middleware vom putea să le logăm acțiuni.

00:05:54.090 --> 00:06:01.330
Teoretic, putem chiar să ne întoarcem în timp și să jucăm diferite acțiuni pe care le joacă utilizatorii noștri.

00:06:02.450 --> 00:06:07.840
Pentru că avem o listă cu o listă cronologică a tuturor acestor acțiuni.

00:06:07.840 --> 00:06:11.840
Acum, de aceea îmi place să învăț redux.

00:06:11.980 --> 00:06:15.920
Nu este pentru că biblioteca va fi pe tot parcursul eternității.

00:06:16.000 --> 00:06:21.970
Nu va fi cel mai probabil înlocuit cu ceva nou de alte instrumente și biblioteci.

00:06:22.900 --> 00:06:31.210
Dar este o bibliotecă cu adevărat importantă care schimbă modul în care ne gândim la construirea de aplicații în loc să purtăm acțiuni dezordonate

00:06:31.210 --> 00:06:37.720
peste tot și doar să ne gândim la cod sau ceva pe care pur și simplu continuăm să ne

00:06:37.720 --> 00:06:43.320
ocupăm și să continuăm să construim și să continuăm să adăugăm caracteristici diferite la reducex.

00:06:43.330 --> 00:06:52.810
Te face sa crezi intr-un fel de hei cum pot face o aplicatie capabila sa scada intr-un mod in care avem mii de interactiuni

00:06:52.810 --> 00:06:55.590
ale utilizatorilor milioane de interactiuni ale utilizatorilor.

00:06:55.660 --> 00:07:03.190
Cum putem face ca informațiile să curgă de la o persoană la alta într-o viziune

00:07:03.190 --> 00:07:05.480
previzibilă într-un sistem previzibil.

00:07:05.810 --> 00:07:12.970
Și, ca dezvoltator senior, chiar vrei să te gândești la asta, cum construiești sisteme care funcționează într-adevăr

00:07:12.970 --> 00:07:17.300
foarte bine împreună și sunt logice și care curge frumos.

00:07:17.350 --> 00:07:22.660
De aceea, redox-ul sa inspirat din designul bazelor de date, deoarece bazele de date sunt similare.

00:07:22.660 --> 00:07:24.670
Ele sunt întotdeauna costisitoare.

00:07:24.670 --> 00:07:32.590
Se spune că există drepturi și că au nevoie de o modalitate de a se asigura că aceștia își administrează toți oamenii

00:07:32.590 --> 00:07:39.160
înmulțind mâinile în baza de date și fac lucruri, dar evită, de asemenea, bug-uri și erori și toate

00:07:39.160 --> 00:07:41.080
aceste lucruri în același timp.

00:07:41.170 --> 00:07:47.920
Acesta este un pic de notă laterală, dar cred că este important să înțelegeți acest lucru și este o modalitate bună de a

00:07:48.190 --> 00:07:53.890
vă gândi la lucruri și diagrame de fluxuri cum curg datele prin aplicația dvs. și cum trebuie să vă structurați

00:07:53.890 --> 00:07:56.450
aplicația astfel încât aceasta să circule fără probleme.

00:07:58.170 --> 00:08:06.270
În cele din urmă, vreau să vă arăt un alt instrument care îmi place loggerul redox deoarece este simplu, dar instrumentele redux def sunt

00:08:06.290 --> 00:08:14.000
într-adevăr foarte bune și utilizează această idee de middleware pentru a asculta în acțiuni și laga pentru tine o grămadă de lucruri interesante

00:08:14.000 --> 00:08:19.400
pe care le puteți juca chiar înapoi istoriile și de ce ați făcut și aplicația.

00:08:19.400 --> 00:08:23.510
Este un instrument foarte bun pe care îl puteți juca acum.

00:08:24.410 --> 00:08:27.130
Am învățat despre middleware.

00:08:27.280 --> 00:08:34.840
Am creat magazinul nostru și avem o imagine completă sau noi.

00:08:34.840 --> 00:08:39.230
Există o altă parte a aplicației noastre pe care trebuie să o transformăm în redux.

00:08:39.260 --> 00:08:42.860
Deci cu ce am spus voi vedea în următoarea.