WEBVTT

00:00:01.110 --> 00:00:03.070
Hei, e Bruno aici.

00:00:03.150 --> 00:00:06.130
Aceasta este tactica fanilor.

00:00:06.150 --> 00:00:08.200
Nu-mi vine să cred cât de multe teste ai scris.

00:00:08.390 --> 00:00:11.770
Oh, bărbat, aștept cu nerăbdare să nu am atâtea bug-uri în aplicația noastră.

00:00:11.820 --> 00:00:13.100
Foarte recunoscător pentru munca ta.

00:00:13.120 --> 00:00:18.030
Și știi că sper că înțelegi că îți prețuesc cu adevărat contribuția la echipa noastră.

00:00:18.150 --> 00:00:19.720
KCI Corp. îți mulțumesc.

00:00:21.590 --> 00:00:22.540
In regula.

00:00:22.730 --> 00:00:30.710
Am terminat o secțiune destul de greoaie, cred că testarea este una dintre acele lucruri care pot cu adevărat ciudat oamenii

00:00:31.400 --> 00:00:33.880
și pot chiar să vă frustreze.

00:00:34.880 --> 00:00:38.820
Dar nu mai suntem dezvoltatori juniori aici când vine vorba de testare.

00:00:39.110 --> 00:00:42.860
Noi înțelegem scopurile și limitele lor.

00:00:42.880 --> 00:00:50.290
Am aflat că există trei tipuri principale de teste care sunt testele de automatizare pentru testele de integrare a

00:00:50.290 --> 00:00:57.620
testelor de unitate și că din toate aceste trei teste de unitate sunt cele mai ușor de scris.

00:00:57.920 --> 00:01:05.570
Și, de asemenea, cele mai ieftine pentru companiile de a utiliza ca un instrument pentru a minimiza bug-uri.

00:01:06.860 --> 00:01:12.920
De obicei, doriți să rulați unități de testare cu teste de integrare complet separate într-un proces separat

00:01:13.130 --> 00:01:18.120
de ceva de genul testului de automatizare, care poate fi destul de complicat.

00:01:18.130 --> 00:01:22.570
Dar din fericire pentru noi există o grămadă de biblioteci pe care le putem folosi.

00:01:22.600 --> 00:01:28.480
De asemenea, am învățat toate instrumentele care sunt disponibile în ecosistemul Akos pentru ca noi să

00:01:28.480 --> 00:01:33.970
încercăm la sfârșitul zilei, deși sunt foarte asemănătoare și toți încearcă să realizeze același

00:01:33.970 --> 00:01:42.460
lucru, pur și simplu testează codul nostru, afirmă câteva declarații care rulează aceste teste spionați unele funcții și apoi vedeți ieșirea, asigurați-vă că

00:01:42.460 --> 00:01:46.780
sunt trecute și asigurați-vă că avem o bună acoperire a codului.

00:01:46.780 --> 00:01:53.680
Dar am aflat de asemenea că o acoperire perfectă a codului nu este neapărat ceea ce vrei să faci.

00:01:53.680 --> 00:01:58.600
Nu vrei niciodată să depuneți eforturi pentru acoperirea codului de 100%, deoarece la sfârșitul zilei

00:01:58.600 --> 00:01:59.980
acestea sunt doar numere.

00:01:59.980 --> 00:02:04.290
Totul depinde de aplicația dvs. și de obiectivele dvs.

00:02:05.530 --> 00:02:07.550
Deci, aveți grijă cu acoperirea codului.

00:02:07.630 --> 00:02:12.850
Este foarte ușor să vă blocați într-o gaură în care scrieți doar teste care sunt

00:02:12.850 --> 00:02:18.350
bune, dar încercați doar să obțineți concentrarea de 100% asupra calității testului în raport cu cantitatea.

00:02:19.710 --> 00:02:27.110
Aflăm cum pot fi efectuate testele în medii diferite și am aflat de asemenea că reacționarea are teste de

00:02:27.120 --> 00:02:31.730
enzime și instantaneu pentru a ne ajuta într-adevăr cu redarea componentelor.

00:02:31.800 --> 00:02:35.590
Toți au făcut teste de scris mult mai simple.

00:02:35.610 --> 00:02:40.510
În sfârșit, avem o idee mai bună despre mediul de testare.

00:02:40.530 --> 00:02:50.220
Testele sunt pur și simplu o modalitate de a ne folosi în dezvoltare pentru a ne asigura că codul nostru, pe măsură ce crește, este menținut și produce mai puține bug-uri,

00:02:50.730 --> 00:02:56.890
deoarece mai mulți oameni se alătură echipei și mai mulți oameni ating codurile și linii de coduri crescând folosind toate

00:02:57.960 --> 00:03:01.130
instrumentele pe care le avem la la dispoziția noastră.

00:03:01.170 --> 00:03:05.460
Suntem capabili să fim deștepți în legătură cu testele pe care le scriem.

00:03:05.510 --> 00:03:10.940
Ne concentrăm asupra a ceea ce este important pentru a testa care sunt caracteristicile cheie ale

00:03:10.940 --> 00:03:19.000
aplicațiilor noastre pe care vrem să ne asigurăm că le testați în mod corespunzător și dorim să ne asigurăm că aceste teste nu sunt complicate.

00:03:19.100 --> 00:03:20.840
Sunt foarte drăguț și ușor de citit.

00:03:20.840 --> 00:03:25.950
Dacă vine cineva pe echipă, ei înțeleg ce fac testele.

00:03:25.950 --> 00:03:35.180
Amintiți-vă dacă un test se complică, poate că există ceva în codul dvs. real care ar putea fi repetat, nu vă gândiți la teste

00:03:36.340 --> 00:03:40.420
sau la ceva ce faceți după ce ați terminat codul.

00:03:40.420 --> 00:03:46.090
Unii oameni se bucură de fapt să le facă înainte de a vă scrie codul real, astfel încât să vă

00:03:46.090 --> 00:03:49.840
dau idei despre modul de structurare a codului dvs. într-un mod frumos curat.

00:03:50.750 --> 00:04:00.280
Deci, gândiți-vă la acest lucru face teste care sunt de bună calitate, nu doar cantitatea și scrie codul dvs., astfel încât

00:04:00.370 --> 00:04:04.100
acestea sunt în unitati simplu de testare simplu.

00:04:05.670 --> 00:04:07.420
Bună treabă să ajungi atât de departe.

00:04:07.560 --> 00:04:09.750
Voi vedea în următoarea secțiune Buh-Bye.