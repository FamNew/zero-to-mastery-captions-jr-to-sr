WEBVTT

00:00:01.110 --> 00:00:03.070
Hej, tu jest Bruno.

00:00:03.150 --> 00:00:06.130
To jest taktyka fanów.

00:00:06.150 --> 00:00:08.200
Nie mogę uwierzyć, ile testów napisałeś.

00:00:08.390 --> 00:00:11.770
Och, nie mogę się doczekać, żeby nie mieć tak wielu błędów w naszej aplikacji.

00:00:11.820 --> 00:00:13.100
Naprawdę wdzięczny za twoją pracę.

00:00:13.120 --> 00:00:18.030
I wiesz, mam nadzieję, że rozumiesz, że naprawdę cenię twój wkład do naszego zespołu.

00:00:18.150 --> 00:00:19.720
KCl Corp. dzięki Ci.

00:00:21.590 --> 00:00:22.540
W porządku.

00:00:22.730 --> 00:00:30.710
Skończyliśmy dość trudną sekcję, która moim zdaniem to jedna z tych rzeczy, które mogą naprawdę przeszkadzać ludziom i

00:00:31.400 --> 00:00:33.880
naprawdę mogą cię też frustrować.

00:00:34.880 --> 00:00:38.820
Ale nie jesteśmy już młodszymi programistami, jeśli chodzi o testowanie.

00:00:39.110 --> 00:00:42.860
Rozumiemy ich cele i ograniczenia.

00:00:42.880 --> 00:00:50.290
Dowiedzieliśmy się, że istnieją trzy główne typy testów, które są testami integracyjnymi testów automatyzacji

00:00:50.290 --> 00:00:57.620
testów integracyjnych i że spośród tych trzech testów jednostkowych najłatwiej jest napisać.

00:00:57.920 --> 00:01:05.570
A także najtańsze dla firm do wykorzystania jako narzędzie dla nas w celu zminimalizowania błędów.

00:01:06.860 --> 00:01:12.920
Zwykle chcesz przeprowadzić testy jednostkowe z testami integracyjnymi całkowicie oddzielnymi w oddzielnym procesie od

00:01:13.130 --> 00:01:18.120
czegoś takiego jak test automatyzacji, który może być dość skomplikowany.

00:01:18.130 --> 00:01:22.570
Ale na szczęście dla nas jest mnóstwo bibliotek, z których możemy skorzystać.

00:01:22.600 --> 00:01:28.480
Dowiedzieliśmy się również, jakie narzędzia są dostępne w ekosystemie Akos, abyśmy mogli je przetestować pod

00:01:28.480 --> 00:01:33.970
koniec dnia, chociaż wszystkie są bardzo podobne i wszystkie starają się wykonać to samo,

00:01:33.970 --> 00:01:42.460
po prostu testują nasz kod, twierdzą, że niektóre stwierdzenia prowadzą te testy. szpiegować niektóre funkcje, a następnie zobaczyć dane wyjściowe upewnij się,

00:01:42.460 --> 00:01:46.780
że są pass i upewnij się, że mamy dobry zasięg kodu.

00:01:46.780 --> 00:01:53.680
Ale dowiedzieliśmy się również, że posiadanie idealnego zasięgu kodu niekoniecznie jest tym, co chcesz robić.

00:01:53.680 --> 00:01:58.600
Nigdy nie chcesz po prostu dążyć do 100-procentowego pokrycia kodu, ponieważ pod koniec dnia są

00:01:58.600 --> 00:01:59.980
to tylko cyfry.

00:01:59.980 --> 00:02:04.290
Wszystko zależy od Twojej aplikacji i Twoich celów.

00:02:05.530 --> 00:02:07.550
Uważaj więc na zasięg kodu.

00:02:07.630 --> 00:02:12.850
Naprawdę łatwo jest utknąć w otworze, w którym po prostu piszesz testy, które

00:02:12.850 --> 00:02:18.350
są dobre, ale próbujesz po prostu skupić się na jakości testu w stosunku do ilości.

00:02:19.710 --> 00:02:27.110
Dowiadujemy się, w jaki sposób testy można przeprowadzać w różnych środowiskach. Dowiedzieliśmy się również, że ponowne wprowadzanie ma

00:02:27.120 --> 00:02:31.730
testy enzymatyczne i migawkowe, aby pomóc nam w renderowaniu komponentów.

00:02:31.800 --> 00:02:35.590
Wszyscy znacznie ułatwili pisanie testów.

00:02:35.610 --> 00:02:40.510
Wreszcie mamy lepszy pomysł na środowisko testowe.

00:02:40.530 --> 00:02:50.220
Testy są po prostu dla nas sposobem na wykorzystanie w rozwoju, aby upewnić się, że nasz kod, który się rozwija, jest łatwy w utrzymaniu i powoduje mniej błędów,

00:02:50.730 --> 00:02:56.890
ponieważ coraz więcej osób dołącza do zespołu, a więcej osób dotyka kodu, a linie kodu rosną za

00:02:57.960 --> 00:03:01.130
pomocą wszystkich narzędzi, które mamy w nasza utylizacja.

00:03:01.170 --> 00:03:05.460
Możemy być inteligentni w testach, które piszemy.

00:03:05.510 --> 00:03:10.940
Koncentrujemy się na tym, co ważne, aby przetestować kluczowe cechy naszych

00:03:10.940 --> 00:03:19.000
aplikacji, które chcemy upewnić się, że testujemy prawidłowo, i chcemy się upewnić, że te testy nie są skomplikowane.

00:03:19.100 --> 00:03:20.840
Są bardzo ładne i czytelne.

00:03:20.840 --> 00:03:25.950
Więc jeśli ktoś wchodzi do zespołu, rozumie, co robią testy.

00:03:25.950 --> 00:03:35.180
Pamiętaj, że jeśli test się komplikuje, być może w twoim prawdziwym kodzie jest coś, co można naprawić, nie myśl o testach

00:03:36.340 --> 00:03:40.420
ani o czymś, co robisz po skończeniu całego kodu.

00:03:40.420 --> 00:03:46.090
Niektórzy ludzie naprawdę lubią robić to, zanim napiszesz swój prawdziwy kod, aby dać ci

00:03:46.090 --> 00:03:49.840
pomysły na uporządkowanie kodu w ładny czysty sposób.

00:03:50.750 --> 00:04:00.280
Pomyśl o tym, aby zrobić testy dobrej jakości, nie tylko ilościowe, i napisać swój kod, aby

00:04:00.370 --> 00:04:04.100
były w przyjemnych prostych testowalnych jednostkach.

00:04:05.670 --> 00:04:07.420
Dobra robota do tej pory.

00:04:07.560 --> 00:04:09.750
Zobaczę w następnej części Buh-Bye.