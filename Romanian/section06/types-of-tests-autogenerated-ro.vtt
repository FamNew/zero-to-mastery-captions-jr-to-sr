WEBVTT

00:00:02.060 --> 00:00:09.920
Bine ați venit înapoi, testele în general pot fi grupate în trei categorii principale.

00:00:10.200 --> 00:00:16.880
Acum, toată lumea are propria lor definiție și, uneori, o definiție unică ar putea să se suprapună

00:00:16.880 --> 00:00:20.910
cu cealaltă categorie, ci doar ca un cadru mental.

00:00:21.290 --> 00:00:27.620
Gândiți-vă că testele au trei tipuri distincte principale.

00:00:27.670 --> 00:00:35.380
Primele sunt teste unitare și acestea sunt cele mai comune cele mai ușor de implementat și cele care sunt cu

00:00:35.380 --> 00:00:37.790
adevărat importante în aplicația dvs.

00:00:39.240 --> 00:00:45.170
Testarea unităților, așa cum sugerează numele, testează funcții sau clase individuale.

00:00:45.510 --> 00:00:53.070
Deci, dacă aș avea o funcție, voi încerca doar acea funcție pentru a vă asigura că face ceea ce spune

00:00:53.070 --> 00:00:54.040
că face.

00:00:54.180 --> 00:01:01.290
Poate că, dacă acceptă parametrii A și B, vreau să mă asigur că A și B se adaugă acelei funcții.

00:01:02.270 --> 00:01:09.890
Acestea sunt cele mai ieftine pentru a pune în aplicare cel mai ușor de implementat și 90 la sută din timpul dvs.

00:01:09.890 --> 00:01:12.350
veți lucra la testarea unităților de scris.

00:01:12.350 --> 00:01:14.660
Sunt foarte utile.

00:01:14.660 --> 00:01:19.180
Al doilea este ceva numit teste de integrare.

00:01:19.370 --> 00:01:23.870
Acest lucru testează modul în care diferitele coduri funcționează împreună.

00:01:24.170 --> 00:01:32.930
Deci, poate fi testat dacă baza de date funcționează cu aplicația expres care cere anumite date din baza de date

00:01:32.930 --> 00:01:40.820
sau ar putea fi modul în care o funcție funcționează cu o altă funcție și cum funcționează

00:01:40.820 --> 00:01:44.660
această conexiune între ele și care o testează.

00:01:44.680 --> 00:01:49.480
În cele din urmă avem teste de automatizare sau teste UI.

00:01:49.480 --> 00:01:56.050
Aceasta implică de obicei testarea scenariilor de viață reale în browser prin controlul

00:01:56.050 --> 00:02:00.460
browserului și asigurarea corectitudinii comportamentului așteptat pe web.

00:02:00.460 --> 00:02:07.450
Acum, puteți face oamenii să facă acest lucru în cazul în care acestea trec prin și faceți clic pe tot pe site-ul dvs. Web și

00:02:07.450 --> 00:02:08.780
asigurați-vă că totul funcționează.

00:02:08.860 --> 00:02:16.330
Sau puteți programatic să aveți roboți sau coduri pe care le scrieți, care trece prin aceste teste pentru dvs., pe

00:02:17.440 --> 00:02:19.710
măsură ce mergem în această ordine.

00:02:19.720 --> 00:02:23.650
Ele devin din ce în ce mai costisitoare de implementat.

00:02:23.650 --> 00:02:24.540
Ce inseamna asta.

00:02:24.760 --> 00:02:32.110
Ei bine, testele de automatizare doar prin a auzi despre ceea ce fac ei sunt mult mai greu de implementat decât

00:02:32.170 --> 00:02:32.980
testele unitare.

00:02:33.010 --> 00:02:33.490
Dreapta.

00:02:34.340 --> 00:02:39.710
Deci, toate aceste teste au cazuri de utilizare, dar au argumente pro și contra, de asemenea.

00:02:41.250 --> 00:02:47.180
Și vom vorbi despre fiecare dintre acestea, dar deocamdată să lăsăm asta.

00:02:47.340 --> 00:02:52.140
În următorul videoclip vom vorbi despre unele dintre instrumentele pe care le veți

00:02:52.140 --> 00:02:54.590
întâlni când începeți să scrieți teste.

00:02:54.680 --> 00:02:55.470
Voi vedea în următorul.