WEBVTT

00:00:02.060 --> 00:00:09.920
Witamy ponownie teraz testy ogólnie można podzielić na trzy główne kategorie.

00:00:10.200 --> 00:00:16.880
Teraz każdy ma własną definicję, a czasem definicja niektórych jednostek może nakładać się z

00:00:16.880 --> 00:00:20.910
drugą kategorią, ale tylko jako struktura mentalna.

00:00:21.290 --> 00:00:27.620
Pomyśl o testach jako o trzech głównych różnych typach.

00:00:27.670 --> 00:00:35.380
Pierwsze to testy jednostkowe, które są najłatwiejsze do wdrożenia i te, które są naprawdę

00:00:35.380 --> 00:00:37.790
ważne w twojej aplikacji.

00:00:39.240 --> 00:00:45.170
Testy jednostkowe, jak sama nazwa wskazuje, testują poszczególne funkcje lub klasy.

00:00:45.510 --> 00:00:53.070
Więc gdybym miał jakąś funkcję, przetestuję tę jedną funkcję, aby upewnić się, że robi to, co

00:00:53.070 --> 00:00:54.040
ona mówi.

00:00:54.180 --> 00:01:01.290
Może jeśli zaakceptuje parametr A i B, chcę się upewnić, że A i B zostaną dodane z tą funkcją.

00:01:02.270 --> 00:01:09.890
Są najtańsze w implementacji najłatwiejszych w implementacji, a 90 procent czasu poświęcisz na

00:01:09.890 --> 00:01:12.350
pisanie testów jednostkowych.

00:01:12.350 --> 00:01:14.660
Są bardzo przydatne.

00:01:14.660 --> 00:01:19.180
Drugi to coś, co nazywa się testami integracyjnymi.

00:01:19.370 --> 00:01:23.870
To testuje działanie różnych elementów kodu.

00:01:24.170 --> 00:01:32.930
Zatem może to być testowanie, czy baza danych działa z aplikacją ekspresową, która żąda pewnych danych z bazy

00:01:32.930 --> 00:01:40.820
danych, czy też może to być sposób, w jaki funkcja działa z inną funkcją i jak działa

00:01:40.820 --> 00:01:44.660
to połączenie między nimi, i testowanie tego.

00:01:44.680 --> 00:01:49.480
Wreszcie mamy testy automatyzacji lub testy interfejsu użytkownika.

00:01:49.480 --> 00:01:56.050
Zazwyczaj polega to na testowaniu rzeczywistych scenariuszy w przeglądarce, kontrolując przeglądarkę i upewniając

00:01:56.050 --> 00:02:00.460
się, że oczekiwane zachowanie w sieci jest poprawne.

00:02:00.460 --> 00:02:07.450
Teraz możesz kazać ludziom robić to, gdzie przechodzą i klikać wszystko na twojej stronie internetowej i upewnić się,

00:02:07.450 --> 00:02:08.780
że wszystko działa.

00:02:08.860 --> 00:02:16.330
Możesz też zaprogramować programowanie robotów lub kodu, który uruchamiasz przez te testy, kiedy wchodzimy

00:02:17.440 --> 00:02:19.710
w tę kolejność.

00:02:19.720 --> 00:02:23.650
Są coraz droższe w realizacji.

00:02:23.650 --> 00:02:24.540
Co to znaczy.

00:02:24.760 --> 00:02:32.110
Testy dobrze zautomatyzowane tylko przez słuchanie o tym, co robią są o wiele trudniejsze do wdrożenia niż testy

00:02:32.170 --> 00:02:32.980
jednostkowe.

00:02:33.010 --> 00:02:33.490
Dobrze.

00:02:34.340 --> 00:02:39.710
Wszystkie te testy mają swoje zastosowania, ale mają również swoje wady i zalety.

00:02:41.250 --> 00:02:47.180
I porozmawiamy o każdym z nich, ale na razie zostawmy to.

00:02:47.340 --> 00:02:52.140
A w kolejnym filmie porozmawiamy o niektórych narzędziach, które napotkasz,

00:02:52.140 --> 00:02:54.590
gdy zaczniesz pisać testy.

00:02:54.680 --> 00:02:55.470
Zobaczę w następnym.