WEBVTT

00:00:01.540 --> 00:00:06.550
Să vorbim despre tipul final de teste de automatizare a testelor.

00:00:06.820 --> 00:00:10.370
Acum, puteți auzi și termenul de terminare până la sfârșitul testării.

00:00:10.570 --> 00:00:12.330
Când vine vorba de teste de automatizare.

00:00:12.550 --> 00:00:15.130
Așa că țineți cont de testele de automatizare.

00:00:15.280 --> 00:00:22.730
Asa cum am spus inainte, sunt testele UI care se executa intotdeauna intr-un browser sau intr-un

00:00:23.670 --> 00:00:31.280
mediu asemanator cu browser-ul, deoarece simularea comportamentului utilizatorilor in aceste medii, cum ar fi apasarea tastei de tiparire.

00:00:31.440 --> 00:00:38.460
Și, în final, necesitatea de a vă asigura că aceste scenarii funcționează efectiv din punctul de vedere al

00:00:38.460 --> 00:00:39.650
unui utilizator final.

00:00:39.660 --> 00:00:41.040
E un test important pentru Ray.

00:00:41.220 --> 00:00:48.850
Dacă procesul dvs. de plată are un bug, cea mai bună modalitate de a încerca probabil este să treceți prin fluxul de

00:00:48.870 --> 00:00:53.400
plăți și să vă asigurați că utilizatorii pot cumpăra ceea ce vând.

00:00:53.830 --> 00:01:00.450
Acum într-o lume ideală avem teste de automatizare peste tot și dacă oricare dintre ele nu reușește, știm că aplicația noastră web

00:01:00.450 --> 00:01:01.350
nu funcționează.

00:01:02.490 --> 00:01:08.880
Dar este important să rețineți că aceste teste sunt cele mai greu de configurat.

00:01:08.910 --> 00:01:16.770
Imaginați-vă că creați un mediu pentru a rula un test pe diferite mașini deoarece utilizatorii

00:01:16.890 --> 00:01:23.860
au diferite calculatoare diferite dispozitive diferite telefoane diferite tipuri de browser diferite versiuni.

00:01:23.910 --> 00:01:25.980
Cum puteți încerca cu adevărat pentru asta.

00:01:25.980 --> 00:01:30.550
Vreau să zic că poți, dar e foarte greu.

00:01:30.840 --> 00:01:36.650
Și acesta este motivul pentru care există atât de multe servicii care oferă testarea de automatizare pentru dvs.

00:01:36.680 --> 00:01:38.330
Iată un exemplu de câteva dintre ele.

00:01:40.100 --> 00:01:40.570
Da.

00:01:40.660 --> 00:01:47.880
Acestea sunt doar câteva dintre ele, cum ar fi Nightwatch șofer web O O test cafenea cafenea Cypress.

00:01:47.890 --> 00:01:54.760
Lista cu adevarat merge pe testarea automatizarii este ceva ce gasiti de obicei la companiile mai mari care au bugetul

00:01:54.760 --> 00:02:00.910
pentru a cheltui cu adevarat bani pentru asta, deoarece exista atatea cazuri si sunt atat de

00:02:00.910 --> 00:02:07.320
scumpe sa implementeze ca unii dezvoltatori isi duc intreaga cariera fara sa scrie vreodata un test de automatizare.

00:02:07.360 --> 00:02:10.380
Dar eu încă vreau să-l acopere pentru că este un subiect important.

00:02:10.690 --> 00:02:12.210
Iată o scăpare rapidă.

00:02:12.430 --> 00:02:20.120
Dacă doriți doar să începeți și să nu vă faceți griji cu privire la browserul încrucișat și să aveți toate instrumentele într-un test probabil,

00:02:20.450 --> 00:02:22.480
Skeff este cea mai bună alegere.

00:02:22.720 --> 00:02:30.160
Sau dacă doriți cel care are cea mai bună documentație online, toate driverele de web IO sunt cu adevărat minunate și dacă

00:02:30.160 --> 00:02:38.320
doriți moduri foarte simple de a automatiza acțiunile utilizatorilor sau de a face ceva răcoros, cum ar fi răzuirea pe internet, în timp ce

00:02:38.410 --> 00:02:40.560
coșmarul Deji este destul de bun.

00:02:40.850 --> 00:02:47.980
Acum, lucrul important cu testarea automatizării este că, așa cum sugerează și celălalt nume, și pentru a

00:02:48.220 --> 00:02:56.800
încerca să încercați întregul proces al interfeței dvs., s-ar putea să vă gândiți de ce vom face mașina să o facă.

00:02:56.810 --> 00:03:01.430
De ce nu putem angaja oameni să ne testeze și să facă teste de automatizare.

00:03:01.670 --> 00:03:09.380
Și că se întâmplă multe companii în loc de a scrie aceste script-uri angaja pur și simplu oameni pentru a face

00:03:09.380 --> 00:03:16.310
testarea de automatizare și la unele companii aveți oameni ca testeri care fac acest lucru pentru tine și asigurați-vă

00:03:16.310 --> 00:03:18.440
că aplicația funcționează conform destinației.

00:03:19.400 --> 00:03:24.880
Și există argumente pro și contra pentru aceste două lucruri și asta e ceva care depinde într-adevăr de

00:03:25.120 --> 00:03:27.430
compania dvs. și de mediul de lucru.

00:03:27.430 --> 00:03:34.360
Principalul lucru pe care vreau să-l sugerez, totuși, este că vrem să creăm două procese diferite de

00:03:34.750 --> 00:03:42.330
testare, unul pentru testele de testare și testele de integrare și unul complet separat pentru a rula aceste teste.

00:03:42.340 --> 00:03:44.200
Testele de automatizare.

00:03:44.440 --> 00:03:51.700
Asta pentru că testele UI durează mai mult, mai ales dacă ne îngrijorăm de browsere și de dispozitive diferite

00:03:51.700 --> 00:03:57.200
și costă mult mai mulți bani pentru a le rula în mod repetat.

00:03:57.310 --> 00:04:04.870
Așadar, doriți să rulați testele de unitate și testele de integrare, probabil, probabil în terminalul dvs., pe măsură ce

00:04:05.170 --> 00:04:12.380
salvați modificările aduse codului dvs. în mediul local și poate efectuați teste UI o dată pe zi sau

00:04:12.380 --> 00:04:20.730
de câteva ori pe săptămână sau poate chiar înainte vă îmbinați în sucursala de master înainte de ao elibera la producție.

00:04:20.740 --> 00:04:24.370
Deocamdată, asta e pentru testarea automatizării.

00:04:24.480 --> 00:04:25.960
Voi vedea în următorul.

00:04:26.120 --> 00:04:26.310
Probabil.