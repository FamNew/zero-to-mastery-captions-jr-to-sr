WEBVTT

00:00:01.120 --> 00:00:01.800
Mają rację.

00:00:01.810 --> 00:00:06.000
Więc mamy redox ładnie współpracujący z naszą aplikacją.

00:00:06.100 --> 00:00:09.160
Właśnie nauczyliśmy się niesamowitej biblioteki.

00:00:09.580 --> 00:00:12.510
Mam nadzieję, że teraz wszyscy czują się dobrze.

00:00:13.030 --> 00:00:15.890
Chcę dodać kilka rzeczy.

00:00:15.940 --> 00:00:23.530
Oczywiście jest to prosty przykład, ale podstawy są tam, używając tych zasad, które można

00:00:23.530 --> 00:00:27.560
odejść, a następnie budować coraz większe aplikacje.

00:00:27.970 --> 00:00:32.090
Ale kiedy to pisałem, być może zauważyłeś kilka rzeczy.

00:00:32.230 --> 00:00:32.850
Jeden.

00:00:33.100 --> 00:00:42.170
Cóż, spójrzmy tutaj na naszą strukturę folderów, którą możemy sobie wyobrazić, gdy nasza aplikacja będzie coraz

00:00:42.410 --> 00:00:44.540
większa i większa.

00:00:44.690 --> 00:00:49.460
I to jest coś, co chcę wam zademonstrować

00:00:49.460 --> 00:00:57.920
później, gdy pracujemy nad inteligentną aplikacją mózgu, w której uruchamiamy naszą aplikację tak z mnóstwem funkcji.

00:00:57.920 --> 00:01:00.100
I nie używamy do tego redux.

00:01:00.200 --> 00:01:06.660
Tak więc ta jesień staje się coraz dłuższa dzięki nowym metodom i nowym metodom oraz nowym metodom.

00:01:06.690 --> 00:01:16.350
Teraz ma jeden komponent kontenerowy, który ma jeden podłączony składnik komponentu, który wie, że istnieje sklep

00:01:16.410 --> 00:01:22.790
redux i słucha rekwizytów oraz wysyła z niego akcje.

00:01:22.830 --> 00:01:26.100
Cóż, po prostu wygrana nie jest realistyczna.

00:01:26.130 --> 00:01:33.570
Najprawdopodobniej będziesz miał wiele kontenerów, ale ze względu na sposób, w jaki działa redux, jest to

00:01:33.570 --> 00:01:34.570
dość łatwe.

00:01:34.620 --> 00:01:42.300
Możemy po prostu użyć połączenia i wybrać i wybrać składniki, które chcemy połączyć ze sklepem redux.

00:01:42.660 --> 00:01:46.960
A jeśli chcemy, żeby dwa pojemniki rozmawiały ze sobą.

00:01:47.280 --> 00:01:50.670
Cóż, bardzo proste, po prostu je łączymy.

00:01:50.850 --> 00:01:58.030
A ponieważ sklep jest wyżej niż wszystko inne, jesteśmy w stanie uzyskać te informacje o stanie.

00:01:58.950 --> 00:02:01.420
Dzięki temu komunikacja jest bardzo łatwa.

00:02:01.770 --> 00:02:08.790
Więc oczywiście chcemy mieć takie pojemniki i proste komponenty prezentacyjne, które są tylko

00:02:08.790 --> 00:02:13.940
czystymi funkcjami, które tylko otrzymują rekwizyty i renderują.

00:02:14.050 --> 00:02:20.650
Jednak wraz z rozwojem coraz większej liczby komponentów i coraz większej ilości kontenerów, zaczyna się

00:02:20.650 --> 00:02:26.710
sens, aby nie mieć jednego Constansa na jedno działanie, a jeden reduktor upada.

00:02:27.010 --> 00:02:33.670
Możesz sobie wyobrazić, że stają się coraz większe i większe, a zobaczysz projekty, które mają

00:02:33.670 --> 00:02:37.470
folder akcji, folder Constans i folder reduktorów.

00:02:37.630 --> 00:02:41.820
Ale osobiście podoba mi się sposób komponowania elementów.

00:02:42.160 --> 00:02:46.260
To wszystko grupuje według komponentu.

00:02:46.420 --> 00:02:53.630
Na przykład stwórzmy niestosowność aplikacji lub powiedzmy, że istnieje komponent inteligentnego pola wyszukiwania.

00:02:54.010 --> 00:02:59.920
Zamierzamy utworzyć folder o nazwie pole wyszukiwania, a folder pola wyszukiwania będzie

00:02:59.920 --> 00:03:03.670
zawierał wszystkie komponenty prezentacji DOM, których potrzebuje.

00:03:03.670 --> 00:03:06.730
Będzie miał wszystkie działania, które potrzebuje działania.

00:03:06.790 --> 00:03:10.060
Tak, będzie miał cały reduktor, który potrzebuje.

00:03:10.180 --> 00:03:12.780
I będzie też mieć całą zawartość.

00:03:13.000 --> 00:03:19.810
Tak więc każdy folder będzie stanowić część naszej witryny internetowej i wszystko to jest połączone w

00:03:20.080 --> 00:03:21.760
jednym małym folderze.

00:03:21.760 --> 00:03:26.400
Więc jeśli kiedykolwiek będziemy chcieli udostępnić kod, będzie to dość łatwe.

00:03:26.410 --> 00:03:32.850
Naprawdę miło jest myśleć o tym w ten sposób, zamiast mieć te masywne nazwy folderów ogólnych.

00:03:33.020 --> 00:03:35.840
I to właśnie zobaczysz w przypadku większości dużych projektów.

00:03:35.840 --> 00:03:43.190
Ten pomysł komponentów, które mają swoje własne foldery, te pojemniki, które ponownie mają swoje własne

00:03:43.190 --> 00:03:45.950
foldery, a także reduktory nie-działania.

00:03:46.100 --> 00:03:52.130
W ten sposób możesz przejrzeć strukturę folderów i zdecydować, gdzie chcesz się udać, aby naprawić torfowisko

00:03:52.130 --> 00:03:53.670
lub utworzyć nową funkcję.

00:03:55.690 --> 00:03:59.010
Również chcesz uniknąć powtarzania kodu tak bardzo.

00:03:59.170 --> 00:04:03.940
Na przykład w większości aplikacji będziemy mieli dużo pobierania.

00:04:04.210 --> 00:04:11.800
Czy nie byłoby wspaniale, gdybyśmy mieli tu folder API, który wykonuje szybką rozmowę, może nazwiemy

00:04:11.920 --> 00:04:20.740
API API get, a wszystko, co musimy zrobić, to przekazać funkcję i ta funkcja przejdzie, że jesteście l

00:04:20.740 --> 00:04:24.130
funkcja FS i to też zrobi.

00:04:24.160 --> 00:04:27.120
Jason dla nas po prostu zwróci dane.

00:04:27.130 --> 00:04:36.170
Tak więc płacimy z góry, więc przestajemy powtarzać cały ten szybki pies, a potem pies może złapać. Myśląc w kategoriach

00:04:36.230 --> 00:04:40.550
organizowania folderów do czegoś, co ma sens, można skalować.

00:04:40.760 --> 00:04:47.270
A jeśli ktoś przyjdzie do projektu, ułatwi im to podążanie i czytanie

00:04:47.270 --> 00:04:50.030
to dobry sposób robienia rzeczy.

00:04:50.050 --> 00:04:52.390
Wszystko na razie wystarczy.

00:04:52.390 --> 00:04:53.900
Do zobaczenia w następnym wideo.

00:04:53.910 --> 00:04:54.380
PA pa.