WEBVTT

00:00:01.110 --> 00:00:03.070
Hei, Bruno di sini.

00:00:03.150 --> 00:00:06.130
Ini taktik penggemar.

00:00:06.150 --> 00:00:08.200
Saya tidak percaya berapa banyak tes yang Anda tulis.

00:00:08.390 --> 00:00:11.770
Oh man, saya berharap tidak memiliki banyak bug di aplikasi kami.

00:00:11.820 --> 00:00:13.100
Sangat berterima kasih atas pekerjaan Anda.

00:00:13.120 --> 00:00:18.030
Dan Anda tahu saya harap Anda mengerti bahwa saya sangat menghargai kontribusi Anda untuk tim kami.

00:00:18.150 --> 00:00:19.720
KCl Corp. terimakasih.

00:00:21.590 --> 00:00:22.540
Baiklah.

00:00:22.730 --> 00:00:30.710
Kami menyelesaikan bagian yang cukup sulit. Saya pikir pengujian adalah salah satu dari hal-hal yang dapat benar-benar membuat orang bingung

00:00:31.400 --> 00:00:33.880
dan juga dapat membuat Anda frustrasi.

00:00:34.880 --> 00:00:38.820
Tapi kami bukan lagi pengembang junior di sini dalam hal pengujian.

00:00:39.110 --> 00:00:42.860
Kami memahami tujuan dan keterbatasan mereka.

00:00:42.880 --> 00:00:50.290
Kami belajar bahwa ada tiga jenis tes utama yang merupakan tes integrasi tes unit tes

00:00:50.290 --> 00:00:57.620
otomatisasi dan bahwa dari ketiga tes unit ini adalah yang paling mudah untuk ditulis.

00:00:57.920 --> 00:01:05.570
Dan juga yang termurah bagi perusahaan untuk digunakan sebagai alat bagi kita untuk meminimalkan bug.

00:01:06.860 --> 00:01:12.920
Dan Anda biasanya ingin menjalankan tes unit dengan tes integrasi yang benar-benar terpisah dalam

00:01:13.130 --> 00:01:18.120
proses yang terpisah dari sesuatu seperti tes otomasi yang paling rumit.

00:01:18.130 --> 00:01:22.570
Tapi untungnya bagi kita ada banyak perpustakaan yang bisa kita gunakan.

00:01:22.600 --> 00:01:28.480
Kami juga mempelajari semua alat yang tersedia di ekosistem Akos untuk kami uji pada akhir

00:01:28.480 --> 00:01:33.970
hari meskipun semuanya sangat mirip dan mereka semua mencoba untuk mencapai hal yang

00:01:33.970 --> 00:01:42.460
sama dengan hanya menguji kode kami, menyatakan beberapa pernyataan menjalankan tes ini, mungkin memata-matai beberapa fungsi dan kemudian melihat output memastikan mereka

00:01:42.460 --> 00:01:46.780
lulus dan memastikan bahwa kami memiliki cakupan kode yang baik.

00:01:46.780 --> 00:01:53.680
Tetapi kami juga belajar bahwa memiliki cakupan kode yang sempurna belum tentu ingin Anda lakukan.

00:01:53.680 --> 00:01:58.600
Anda tidak pernah ingin hanya berusaha untuk cakupan kode 100 persen karena pada akhirnya

00:01:58.600 --> 00:01:59.980
itu hanya angka.

00:01:59.980 --> 00:02:04.290
Semuanya tergantung pada aplikasi Anda dan apa tujuan Anda.

00:02:05.530 --> 00:02:07.550
Jadi berhati-hatilah dengan cakupan kode.

00:02:07.630 --> 00:02:12.850
Sangat mudah terjebak dalam lubang di mana Anda hanya menulis tes yang

00:02:12.850 --> 00:02:18.350
bagus tetapi Anda hanya berusaha agar fokus 100 persen pada kualitas tes versus kuantitas.

00:02:19.710 --> 00:02:27.110
Kami mempelajari bagaimana pengujian dapat dijalankan di lingkungan yang berbeda dan kami juga belajar bahwa re-act memiliki pengujian

00:02:27.120 --> 00:02:31.730
enzim dan foto untuk benar-benar membantu kami dalam rendering komponen.

00:02:31.800 --> 00:02:35.590
Mereka semua membuat tes menulis jauh lebih sederhana.

00:02:35.610 --> 00:02:40.510
Akhirnya kami memiliki gagasan yang lebih baik tentang lingkungan pengujian.

00:02:40.530 --> 00:02:50.220
Tes hanyalah cara bagi kita untuk menggunakan dalam pengembangan untuk memastikan bahwa kode kita saat tumbuh dapat dipelihara dan menghasilkan lebih sedikit bug karena lebih

00:02:50.730 --> 00:02:56.890
banyak orang bergabung dengan tim dan lebih banyak orang menyentuh kode dan garis kode meningkat menggunakan

00:02:57.960 --> 00:03:01.130
semua alat yang kita miliki di pembuangan kami.

00:03:01.170 --> 00:03:05.460
Kami dapat menjadi pintar tentang tes yang kami tulis.

00:03:05.510 --> 00:03:10.940
Kami berfokus pada apa yang penting untuk menguji apa saja fitur utama

00:03:10.940 --> 00:03:19.000
dari aplikasi kami yang ingin kami pastikan kami uji dengan benar dan kami ingin memastikan bahwa tes ini tidak rumit.

00:03:19.100 --> 00:03:20.840
Mereka sangat bagus dan enak dibaca.

00:03:20.840 --> 00:03:25.950
Jadi, jika ada yang datang ke tim mereka mengerti apa yang dilakukan tes.

00:03:25.950 --> 00:03:35.180
Ingat jika tes menjadi rumit, mungkin ada sesuatu dalam kode aktual Anda yang bisa diperbaiki, jangan memikirkan tes atau sesuatu yang

00:03:36.340 --> 00:03:40.420
Anda lakukan setelah Anda menyelesaikan semua kode Anda.

00:03:40.420 --> 00:03:46.090
Beberapa orang benar-benar menikmati melakukannya sebelum Anda menulis kode asli Anda sehingga memberi Anda ide tentang

00:03:46.090 --> 00:03:49.840
bagaimana menyusun kode Anda dengan cara bersih yang bagus.

00:03:50.750 --> 00:04:00.280
Jadi pikirkan tentang ini lakukan tes yang berkualitas baik bukan hanya kuantitas dan tulis kode Anda sehingga mereka dalam

00:04:00.370 --> 00:04:04.100
unit yang dapat diuji sederhana yang bagus.

00:04:05.670 --> 00:04:07.420
Kerja bagus sejauh ini.

00:04:07.560 --> 00:04:09.750
Saya akan lihat di bagian selanjutnya Buh-Bye.