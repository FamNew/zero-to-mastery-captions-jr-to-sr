WEBVTT

00:01.240 --> 00:10.180
Welcome back once a secured symmetric communication has been established the server needs to actually

00:10.420 --> 00:14.790
verify to see if the user has the right to access it.

00:15.100 --> 00:20.380
If it wasn't the case then anyone can connect into the server.

00:20.830 --> 00:29.140
You see we've talked about the Diffie Helman key exchange the asymmetric encryption to arrive at a symmetric

00:29.140 --> 00:31.390
key so that we can communicate.

00:31.810 --> 00:36.370
And we also used hashing to make sure of no funny business.

00:36.670 --> 00:44.830
But then the fourth thing is to authenticate a user we want to make sure that whoever is trying to communicate

00:44.830 --> 00:51.170
with us is somebody that we want to communicate with and has the rights to communicate with them.

00:52.620 --> 01:01.590
And that's why if we go back to my terminal we were ask for a password and this is the default behavior.

01:01.710 --> 01:11.540
If I S-sh into anything I will get asked for a password because I want to make sure that you whoops

01:11.900 --> 01:18.740
I want to make sure that you from your computer can't access my Digital Ocean server.

01:18.750 --> 01:19.420
Right.

01:19.450 --> 01:20.390
Like I paid for it.

01:20.390 --> 01:23.510
You can just go into it and do what you want with it.

01:23.520 --> 01:25.890
Take it down and bring down my website.

01:25.950 --> 01:32.010
No I want to make sure that whoever runs this command because you can't run this too and you'll get

01:32.010 --> 01:34.720
asked this exact same password requirement.

01:36.040 --> 01:39.220
But I want to make sure that only I can access it.

01:39.310 --> 01:46.310
And the reason I was able to prevent doing this and automatically signed in was again through S-sh.

01:46.390 --> 01:49.460
So bear with me I'm going to explain what's going on here.

01:49.510 --> 01:58.260
Now there's two ways that we can actually authenticate into a server first and this is what most S-sh

01:58.260 --> 02:01.430
users use is a password.

02:01.630 --> 02:05.350
The user is asked to enter a user name followed by a password.

02:05.350 --> 02:11.380
In this case the user is root and the password while password is something that digital should actually

02:11.380 --> 02:15.670
e-mail me when I first created this droplet or the server.

02:16.000 --> 02:24.520
And because this password is going to be sent after the S-sh connection was made and both my computer

02:24.550 --> 02:29.420
and the server has the symmetric key it's encrypted and safe to send.

02:29.770 --> 02:35.950
And although passwords are encrypted it's still not recommended to use passwords for secure connections

02:35.950 --> 02:43.160
because well you can use they bought and simply brute force and try out a whole bunch of password onto

02:43.180 --> 02:44.040
the server.

02:44.170 --> 02:47.540
And if the password is really bad like one two three.

02:47.860 --> 02:52.260
Well an attacker can easily get gain access to your server.

02:52.330 --> 02:56.670
A better alternative is a second way to get authenticated.

02:56.890 --> 02:58.970
And that's what we're going to talk about in the next few.

02:58.990 --> 03:05.890
It is the main reason we want to set up S-sh with get up and going back to what Bruno asks us to do

03:06.100 --> 03:10.200
initially to set up S-sh with get help.

03:10.210 --> 03:19.090
So finally in a long winded way I'm going to show you the next video the final power of S-sh and how

03:19.090 --> 03:23.290
you can avoid using passwords.

03:23.410 --> 03:25.000
I'll see in the next one Buh-Bye.
