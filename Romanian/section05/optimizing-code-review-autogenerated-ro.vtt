WEBVTT

00:00:01.990 --> 00:00:05.050
A fost o altă secțiune lungă.

00:00:05.050 --> 00:00:08.460
Dar sper că totul are sens acum.

00:00:08.650 --> 00:00:11.740
Cum optimizăm codul nostru.

00:00:12.710 --> 00:00:20.000
Ei bine, putem încărca doar ceea ce este nevoie de a face ceva de genul de divizare a codului în cazul în care putem face

00:00:20.720 --> 00:00:25.160
traseu pe bază de chunking sau componente bazate pe Chungking toate folosind pachet de web.

00:00:25.160 --> 00:00:33.350
Și acest import dinamic sau poate chiar folosind un instrument cum ar fi biblioteca încărcată care o face pentru tine și vă oferă

00:00:33.350 --> 00:00:34.820
un ambalaj frumos.

00:00:34.850 --> 00:00:40.970
Avem de asemenea această idee despre tremuratul copacilor, despre care nu am vorbit prea mult despre asta, pentru că este făcută în

00:00:40.970 --> 00:00:45.590
spatele scenei pentru dvs. de către un wetback care din nou este într-adevăr foarte frumos.

00:00:46.490 --> 00:00:50.250
Și acest copac scutură elimină orice cod neutilizat.

00:00:50.390 --> 00:00:52.960
Când construiți aplicația.

00:00:53.120 --> 00:01:00.020
De exemplu, dacă importați o bibliotecă masivă, dar utilizați doar o singură funcție din ea.

00:01:00.020 --> 00:01:02.260
Ei bine, aruncați restul.

00:01:02.360 --> 00:01:09.560
Acum, în mod ideal, într-o lume perfectă, care se întâmplă o sută la sută din timp cu o precizie de 100 la sută în

00:01:10.430 --> 00:01:11.030
viața reală.

00:01:11.040 --> 00:01:18.140
Acest lucru nu poate fi cazul, dar din nou acest lucru este ceva pe care îl puteți face cu spate umed și de a îmbunătăți pe măsură

00:01:18.140 --> 00:01:18.950
ce timpul trece.

00:01:19.460 --> 00:01:27.170
Dar pentru moment, folosind lucruri cum ar fi preselectate EMF pe care le-am văzut anterior, care ne-au

00:01:27.170 --> 00:01:36.390
evitat caracteristicile transponzătoare deja în browserele moderne, ne permite să folosim o parte din această capacitate de agitare a copacilor, celălalt

00:01:36.420 --> 00:01:39.170
punct fiind evitarea blocării primei amenințări.

00:01:39.300 --> 00:01:45.630
Și acesta este un lucru despre care am vorbit din nou și peste și până la minimizarea timpului nostru de javascript.

00:01:45.690 --> 00:01:52.290
Compilarea parcelei noastre și timpul de execuție ar fi cu adevărat inteligent cu privire la cât

00:01:52.350 --> 00:02:01.620
de mult javascript Wareing, inclusiv în codul nostru, ne-am înșelat de fapt, de asemenea, un pic despre scurgeri de memorie și scurgeri de memorie.

00:02:01.860 --> 00:02:11.250
Deși acest termen este nou aici, este pur și simplu să ne asigurăm că nu continuăm să adăugăm memorie în aplicațiile

00:02:11.250 --> 00:02:12.060
noastre.

00:02:12.060 --> 00:02:20.450
De exemplu, dacă avem o mulțime de ascultători de evenimente pe o pagină și schimbăm acea pagină într-un alt rând, să

00:02:20.450 --> 00:02:25.690
spunem că mergem la pagina Despre, dar nu am eliminat nici măcar ascultătorii.

00:02:25.820 --> 00:02:30.270
Acum, browserele noastre își amintesc din ce în ce mai multe lucruri.

00:02:30.410 --> 00:02:36.650
Deci, puteți avea ceva numit scurgeri de memorie unde, pe măsură ce lucrăm la aplicația noastră, lucrurile pe care

00:02:36.650 --> 00:02:43.010
browserul trebuie să-și amintească, cum ar fi variabilele, cresc din ce în ce mai mult până când ajunge la

00:02:43.100 --> 00:02:44.990
limită și se pot prăbuși.

00:02:44.990 --> 00:02:48.390
Un alt lucru care poate fi evitat prin minimizarea Javascript-ului nostru.

00:02:48.650 --> 00:02:54.080
Și apoi, în cele din urmă, dorim să evităm multipolul de a reda ceva despre care am vorbit cu

00:02:54.080 --> 00:02:58.630
adevărat să reacționăm și să minimizăm numărul de manipulări pe care trebuie să le facem.

00:02:58.640 --> 00:03:02.570
Cantitatea de lucru pe care codul nostru trebuie să o facă în browser.

00:03:02.570 --> 00:03:09.030
Codul de optimizare optim este ceva care poate continua să meargă și să meargă.

00:03:09.030 --> 00:03:13.400
Există atât de multe lucruri pe care le puteți face, dar într-adevăr doriți să vă alegeți bătăliile.

00:03:13.560 --> 00:03:20.280
Dar sper că a obținut o imagine de ansamblu asupra a ceea ce putem face și a principiilor fundamentale pentru această

00:03:20.280 --> 00:03:20.940
secțiune.

00:03:21.930 --> 00:03:26.070
În următoarea parte vom ajunge în sfârșit la progresul webapps-urilor.

00:03:26.220 --> 00:03:27.050
O să văd pe asta.