WEBVTT

00:01.750 --> 00:02.710
Welcome back.

00:02.710 --> 00:09.160
I know we're all getting excited to start coding but I want to do one last video before we actually

00:09.160 --> 00:13.860
start working with some code which is the exciting part.

00:14.010 --> 00:20.820
But again I want to emphasize that before we use anything we need to understand why and why we would

00:21.000 --> 00:28.780
need something like redux right now online and with any company that is working with react most of them

00:28.780 --> 00:31.200
have also redox.

00:31.300 --> 00:39.220
So you'll hear re-active redux app mentioned a ton when you're watching tutorials or working with react

00:39.840 --> 00:43.150
and that is because they go really really well together.

00:43.180 --> 00:49.510
Let's just go over a few things about redux that we want to make sure we learn and a bit of warning

00:49.510 --> 00:49.990
here.

00:49.990 --> 00:55.730
Some of the stuff might go over your head or maybe a little bit confusing but I want to show you the

00:55.730 --> 01:01.840
slides first because after we go through the redux coding women come back to them and make sure that

01:02.170 --> 01:06.440
these principles are applied and they make sense to you.

01:06.460 --> 01:07.930
So bear with me.

01:07.960 --> 01:10.480
Trust me it's all going to make sense by the end.

01:12.880 --> 01:21.820
Why do we want to use redux as we mentioned before redux is really really good at managing state especially

01:21.850 --> 01:23.470
large state.

01:23.470 --> 01:29.500
So redox is a library that we would want to use if our apps get bigger and bigger and bigger and they

01:29.500 --> 01:31.500
have larger and larger state.

01:31.570 --> 01:37.690
Remember we want to use tools based on the problems of the soul and redux solves the problem of what

01:37.690 --> 01:45.760
happens when re-act apps get really really big and using just this dot state just doesn't make sense

01:45.760 --> 01:46.520
anymore.

01:46.540 --> 01:48.880
It gets more and more complicated.

01:48.880 --> 01:51.880
Remember Briac is what we call a view layer.

01:51.880 --> 01:55.780
It's really good at the view side but not necessarily at managing state.

01:55.900 --> 02:00.660
So use redux when things get really really complicated.

02:00.670 --> 02:08.670
The second point is useful for sharing data between containers and this is another thing with when projects

02:08.670 --> 02:14.920
become large when they need to start sharing state between containers.

02:15.970 --> 02:22.870
With react this is actually a little bit difficult and you have to move the state up one layer so that

02:23.080 --> 02:26.290
you have a parent that can share a state between the two.

02:26.710 --> 02:33.250
But with redux this becomes really really easy as we're going to demonstrate in our coding section.

02:33.370 --> 02:40.590
And finally redox has predictable state management using the three principals.

02:40.740 --> 02:48.200
Now what are the three principals these three principals in redox are going to really really make sense.

02:48.200 --> 02:52.990
At the end but I want to still introduce them to you so that we're aware of them.

02:53.960 --> 02:57.370
The first one is the idea of single source of truth.

02:57.680 --> 03:04.490
And this is a fancy way of saying that we have one single big object that describes the entire state

03:04.550 --> 03:06.010
of the app.

03:06.020 --> 03:14.010
Remember this we had one massive state object that describes everything within our app.

03:14.170 --> 03:21.940
So we have our single source of truth because re-act reacts based on whatever the state is.

03:21.940 --> 03:29.330
We can just have one big object that describes how the app should look and react will take care of it.

03:29.330 --> 03:37.370
The second principle is the idea that state is read only and this encourages something called impeachability

03:37.610 --> 03:45.380
which is not modifying the object and it prevents unexpected errors this way.

03:45.470 --> 03:52.060
So the state object that we will create with redux will actually never get modified.

03:52.130 --> 04:00.870
And instead we would create a new state after each action is taken by the user and then finally the

04:00.870 --> 04:08.850
third principle is the idea that changes are made only using pure functions something that we've talked

04:08.850 --> 04:10.460
about in my previous course.

04:10.500 --> 04:19.080
The idea that a pure function is something that receives an input and always turns an output that is

04:19.110 --> 04:20.220
predictable.

04:20.220 --> 04:28.760
If we enter the same but 1000 times we expect that function to have the same output 1000 times using

04:28.760 --> 04:30.220
these principles.

04:30.470 --> 04:36.740
Redux has some new words that we're going to introduce in our vocabulary and we're going to be comfortable

04:36.740 --> 04:38.760
with them by the end of this section.

04:38.960 --> 04:40.360
The first one is action.

04:40.370 --> 04:46.890
An action is something that a user does such as clicking on a button or a dropdown menu.

04:47.100 --> 04:54.030
And what happens in redox is as soon as a user clicks on something a button and creates an action.

04:54.150 --> 05:02.010
It goes through something called a reducer and a reducer is simply a function a pure function that receives

05:02.010 --> 05:10.410
an input which is the action so the user just clicked on a button and creates an output and this output

05:10.680 --> 05:22.600
is the state or the store as we call it an redux which is the entire state of the app.

05:22.710 --> 05:31.290
So as it goes through the function the store gets updated and react because it notices this state change

05:31.680 --> 05:33.640
makes changes to the view.

05:36.590 --> 05:40.520
Again these are wars that we're going to encounter as we start coding along.

05:40.580 --> 05:44.070
Now why do this.

05:44.080 --> 05:51.270
I mean can we just have an action and then an action happens and then we just make changes.

05:52.790 --> 05:56.280
I mean that's how something like Jake we're used to work.

05:56.470 --> 05:59.200
And yeah it looks more complicated doesn't it.

05:59.200 --> 06:06.460
Adding all these steps beforehand but as you can see above if you have tons of actions happening which

06:06.520 --> 06:11.990
with modern apps that are very interactive This happens a lot where the users scroll action and then

06:11.990 --> 06:16.090
the clicks a button and then highlight something and so on and so forth.

06:16.150 --> 06:21.640
You see that the more and more actions we have the more changes we have to make and those changes might

06:21.640 --> 06:26.550
trigger other actions which trigger other changes and so on and so forth.

06:26.560 --> 06:30.090
And it can get pretty pretty complicated as you can see in this diagram.

06:31.820 --> 06:39.900
Well with redux we make sure that all the actions go through one reducer.

06:40.280 --> 06:49.570
Everything flows through this function and through this function it always because it's pure returns

06:50.290 --> 06:58.180
the same state based on the action and updates the store and this store now which represents what our

06:58.180 --> 07:00.610
app should look like makes changes.

07:01.000 --> 07:08.390
So kind of funnels all these actions into one reducers so that everything is predictable and nice again.

07:08.410 --> 07:13.600
One of those things that's hard to really explain without encountering the problem first which will

07:13.600 --> 07:16.360
get you now redux.

07:16.570 --> 07:23.260
And I want to teach this just for historical purposes uses an architectural pattern cold flux pattern

07:24.220 --> 07:30.790
architecture and software is used as a way to make sure that we're able to solve problems in a logical

07:30.790 --> 07:33.300
sense and in an organized fashion.

07:33.490 --> 07:40.930
And this flux pattern which inspired the library redux has this idea of having an action and then having

07:40.930 --> 07:49.520
a dispatcher that dispatches this action to the store which is our state which updates the view.

07:49.790 --> 07:53.590
And it's one way data flow everything flows one way.

07:53.660 --> 07:59.510
If the view gets updated we go back to the action and again goes to dispatcher that dispatches the change

07:59.510 --> 08:03.250
to the store and then to the view.

08:03.340 --> 08:06.380
And this was a pretty revolutionary idea.

08:07.800 --> 08:14.470
Because before that we had something called MVC or model view controller.

08:14.710 --> 08:21.780
And you may have heard of it it was quite quite popular the idea with the MVC pattern is we have an

08:21.780 --> 08:26.780
action and that action is read by a controller.

08:27.120 --> 08:34.710
So again another javascript file that looks Fraction's user clicks on a button and based on whatever

08:34.710 --> 08:38.750
the controller says We update the model or the data.

08:38.790 --> 08:39.820
In this case.

08:40.020 --> 08:47.490
So we can think of it a state we change something in the model and then it updates the view.

08:47.500 --> 08:54.280
Now the problem with the MBC pattern is well this diagram over here we have the controller that changes

08:54.280 --> 08:56.890
different pieces of the model.

08:57.100 --> 09:03.020
And this model can change the view that can trigger a nother change.

09:03.070 --> 09:07.270
And that model can change another part of the view and so on and so forth.

09:07.270 --> 09:14.470
And we have this thing that we saw before we have the craziness of actions and making changes all these

09:14.470 --> 09:17.860
arrows just crisscrossing and not looking very nice.

09:18.720 --> 09:24.480
And although it might not be bad when your apps are smaller as your apps get bigger you want to do something

09:24.480 --> 09:28.190
like this so it's logical and makes sense.

09:28.260 --> 09:29.970
And that's what we want to do with architecture.

09:29.970 --> 09:37.170
We want to architect our apps in ways that as they grow although we may add a few things in the end

09:37.730 --> 09:43.200
everything is easier to reason about and understand.

09:43.260 --> 09:48.500
So we have the flux pattern which enforces a unique directional data flow.

09:49.500 --> 09:57.770
We have the MVC pattern which could definitely be improved if you get anything out of this video.

09:57.780 --> 10:06.090
The one thing I want you to understand is the idea that redux at the end of the day is pretty much the

10:06.090 --> 10:14.970
same as this DOD state in react with three docs we can replace this Staat state and theoretically remove

10:15.120 --> 10:25.050
all of this state from react and have it all happen inside of this redux library which again we're going

10:25.050 --> 10:25.740
to do.

10:25.920 --> 10:29.280
But one caveat.

10:29.500 --> 10:39.220
You could technically have redux with the state but also still keep a little bit of reac state in a

10:39.220 --> 10:39.950
component.

10:40.060 --> 10:47.080
Redux doesn't replace completely the this state or this Stotts set state and react.

10:47.110 --> 10:53.710
You can still use them together and I'll show you when you might want to do that when it's a good decision.

10:54.130 --> 11:00.700
But like I said before without having gone into any of the code of redox this might look a little bit

11:00.760 --> 11:02.710
overwhelming and confusing.

11:02.710 --> 11:04.710
I promise you that we're going to come back.

11:04.720 --> 11:07.590
These diagrams and things are going to make sense by the end.

11:07.690 --> 11:14.110
Before I throw code onto the screen I want to make sure that you have some principles and concepts that

11:14.110 --> 11:15.420
we're working from.

11:15.420 --> 11:16.060
All right.

11:16.270 --> 11:21.250
I know where you're thinking Andre I am sick and tired of the slides even though they have this cool

11:21.250 --> 11:25.600
grading color I need to see some code because I'm getting bored here.

11:25.640 --> 11:30.440
Well you know what your prayers have been answered in the next video.

11:30.490 --> 11:35.330
We're finally going to start writing some code and get into some fun things.

11:36.110 --> 11:36.880
I'll see in that one.
